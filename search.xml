<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网站搭建指南</title>
      <link href="2022/da-jian-wang-zhan-zhi-nan/"/>
      <url>2022/da-jian-wang-zhan-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>如今，创建网站是超级简单的，无论是否具备相关专业知识，只要依照正确的方法，选择合适的平台和正确工具，一切问题迎刃而解。</p><h1>创建网站</h1><p>创建网站基本流程为：</p><ol><li>注册域名</li><li>购买虚拟主机</li><li>设计网页</li><li>验证和测试网站</li><li>优化</li></ol><p>而其中设计网页的方法有三种：</p><ol><li>从零开始创建</li><li>使用内容管理系统(CMS)</li><li>使用网站构建器创建</li></ol><h2 id="注册域名">注册域名</h2><p>域名是网站或博客最重要的标识，一个好的域名对 SEO 优化至关重要。可以通过域名注册商，以年度合同或长期合同方式注册域名。</p><ol><li><p>选择权威域名注册服务商</p><p>国内如，<code>万网/阿里云</code>、<code>西部数码</code>、<code>新网互联</code>、<code>美橙互联</code>、<code>三五互联</code>。国外如：<code>GoDaddy</code>、<code>Namecheap</code>、<code>Domain.com</code>。</p><p>总之，注册域名时，尽可能选择获得 ICANN 和 CNNIC 授权认证的域名注册服务商。</p></li><li><p>选择域名原则</p><ul><li>简单好记，不要复杂。</li><li>尽可能选择和网站业务相关。</li><li>不要使用特殊字符。</li><li>使用<code>.com</code>域名后缀。</li><li>检查域名是否有黑历史，使用<code>site</code>和<code>domain</code>指令。</li></ul><p>你也可以使用域名生成器生成域名：</p><ul><li><a href="https://leandomainsearch.com/">LeanDomainSearch</a></li></ul></li><li><p>域名备案</p><p>主要针对国内网站用户群体，一般建议选择国内服务器。主要优势：有利于网站收录，国内服务器访问速度更快，用户更加信任。</p></li><li><p>泛域名解析</p><p>域名主要是为了便于记忆服务器 IP 地址，所以顾名思义<code>域名解析</code>就是将域名翻译成服务器 IP 地址。而域名又分为<code>顶级域名</code>、<code>一级域名</code>和<code>二级域名</code>。</p><ul><li>顶级域名：域名最右边的字符组，分为两类，一类是<code>顶级域</code>，如<code>.com</code>、<code>.org</code>、<code>.net</code>等；还有一类是<code>地区顶级域</code>，如<code>.cn</code>等。</li><li>一级域名：是由<code>字符串 + 域名后缀</code>组成，如：<a href="http://baidu.com">baidu.com</a>。</li><li>二级域名：又称为<code>子域名</code>，带有一级域名下的主机名，如：<a href="http://cloud.baidu.com">cloud.baidu.com</a></li></ul><p>回到主题，泛域名解析时利用通配符<code>*</code>来做二级域名以实现所有二级域名均指向同一个顶级域名。在顶级域名前添加任何的子域名，均访问的是顶级域名地址。</p></li></ol><h2 id="购买虚拟主机">购买虚拟主机</h2><p>虚拟主机即是虚拟服务器、云服务器，一些大型公司拥有并管理其 WEB 服务器，其它企业则从云服务器供应商那里租赁（这更加便宜和容易）。</p><p>国内云服务器供应商如，<code>阿里云</code>、<code>腾讯</code>等。国外如，<code>virmach</code>、<code>racknerd</code>等。</p><p>通常云服务器供应商提供了各种托管服务，可根据自身业务定制网站。</p><h2 id="设计网页">设计网页</h2><p>设计和创建网页可以通过聘请 WEB 开发人员实现。对于 DIY 者，以下是三种简单方法。</p><h3 id="从零开始">从零开始</h3><p>所需技能和工具：</p><ul><li>知识：HTML、CSS、JavaScript、MySQL 或 PostgreSQL</li><li>集成开发环境 IDE：Sublime Text、Atom、Adobe Dreamweaver</li><li>FTP：FileZilla、WinSCP、Cyberduck</li></ul><ol><li>安装配置 IDE 本地开发环境。</li><li>规划网站结构和导航系统。 必须了解如何提供内容，导航菜单的数量，列数或内容字段数，要包含的图像数量以及位置。使用 Photoshop 创建网页的粗略绘图。可能需要为不同页面制作不同草稿页。</li><li>使用 HTML 和 CSS 对步骤 2 的设计进行编码。</li><li>使用 JavaScript 和 jQuery 使网站动态化。</li><li>使用 FTP 客户端将本地文件上传到服务器。</li></ol><h3 id="使用-CMS">使用 CMS</h3><p>所需技能和工具：</p><ul><li>知识：HTML、CSS、PHP</li><li>CMS：WordPress 和 Weebly、joomla、Drupal</li></ul><p>需要学习不同 CMS 的模块，或深入自己深入定制。</p><h3 id="使用网站构建器">使用网站构建器</h3><p>所需技能和工具：</p><ul><li>工具：zyro、Wix 和 Weebly</li></ul><p>即使不了解 Web 编程，设计者也可以通过 Drag&amp;Drop 轻松建立一个网站。</p><h2 id="验证和测试网站">验证和测试网站</h2><p>网站准备就绪后，就可以在主要浏览器（Chrome，Firefox，Safari，Microsoft Edge，IE11 等）以及不同屏幕尺寸上验证并测试其效果。</p><p>在线免费测试工具：</p><ol><li>测试网页是否满足 W3C 标准：<a href="https://validator.w3.org/">https://validator.w3.org/</a></li><li>浏览器适配测试：<a href="https://browsershots.org/">https://browsershots.org/</a></li></ol><h2 id="优化">优化</h2><ol><li>优化网站速度</li><li>提高网站搜索的可见性，SEO 优化</li><li>使用 HTTPS</li><li>添加基本页面，如索引（主页）、关于页面和联系页面</li><li>添加图标，以下是一些免费的图标生成网站：<ul><li><a href="https://www.favicon-generator.org/">https://www.favicon-generator.org/</a></li><li><a href="http://www.favicon.cc/">http://www.favicon.cc/</a></li><li><a href="http://tools.dynamicdrive.com/favicon/">http://tools.dynamicdrive.com/favicon/</a></li><li><a href="http://www.genfavicon.com/">http://www.genfavicon.com/</a></li><li><a href="http://www.favicongenerator.com/">http://www.favicongenerator.com/</a></li><li><a href="https://www.logaster.com/favicon/">https://www.logaster.com/favicon/</a></li></ul></li></ol><h1>Web 服务器</h1><p>Apache、Nginx、Caddy、Tomcat 和 Nodejs 辨析。</p><h2 id="Apache">Apache</h2><p>Apache 是指 Apache 软件基金会的 Apache HTTP Server。它能够接收 http 请求，然后返回各类资源，如 HTML，PDF，MP4 等。它的特点是只是接收请求，然后返回资源，至于这个资源是怎么来的，它不管，所以很多时候，大家会说 Apache 支持静态资源，动态资源需要其他模块来支持，比如使用 CGI，比如 tomcat。</p><h2 id="Nginx">Nginx</h2><p>Nginx 功能同 Apache，也是 HTTP Server，但是 Nginx 经过性能优化（使用 epoll（Linux2.6 内核）和 kqueue（FreeBSD）网络 I/O 模型），可以支持比 apache（select 模型）高得多的连接数，cpu 与内存占用更低，工作中常见的是用于反向代理，负载均衡和虚拟主机。</p><h2 id="Caddy">Caddy</h2><p>Caddy 类似 Nginx 常用语 web 服务器或反向代理。</p><h2 id="Tomcat">Tomcat</h2><p>tomcat 最主要的功能是提供 Servlet/JSP 容器，虽然它也具有 http 服务器的功能，但是在管理功能和对静态资源的处理速度上不如专门的 http 服务器，如果性能需求不高的 web 应用，可以尝试单独使用 tomcat，但是对于高性能要求的情况，需要 http 服务器和 Tomcat 集成来完成。</p><h2 id="Node-js">Node.js</h2><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎。node 下如express 的应用库也是 HTTP Server 的一种，不同的是，nodejs 主要提供前端资源的服务，简单的业务逻辑也可以在 nodejs 下完成，但是复杂的业务需要 nodejs server 再与应用服务器进行数据交换（如 RESTful）来完成。这里面会有大前端，前后端分离之类的说法。</p><h2 id="总结">总结</h2><p>它们都能创建 Web 服务器，但是他们关注的点不一样。</p><ol><li>Apache 通常跟 PHP 配合，但也不排除能跟 Node.js 配合反向代理。建站组合为<code>LAMP = Linux + Apache + MySQL + PHP</code></li><li>Nginx 通常作为反向代理，可以和 Node.js web 服务器配合。建站组合为<code>LNMP = Linux + Nginx + MySQL + PHP</code></li><li>Tomcat 最好跟 Java 配合。</li><li>Node.js 更倾向于业务逻辑。</li></ol><p>Apache 和 Nginx 算接近一类，node.js 和 tomcat 算接近一类。</p><p>Apache 就是静态网页服务器，将本地页面文件做一个网络映射。可以添加 mod 来扩展功能，例如 php 模块就扩展了基于 php 的 CGI 动态页面页面能力，代理模块就是成了代理服务器。</p><p>nginx 同 Apache，不过更多主职于代理服务器。</p><p>tomcat 就是一个 Java Servlet 容器，换个说法就是基于 java 的 CGI 动态页面服务器，静态页面只是一个附属功能。</p><p>node.js 同样一个容器，换个说法就是基于 JavaScript 的 CGI 动态页面服务器，看上去静态页面不算是直接功能。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON 对象</title>
      <link href="2022/json-dui-xiang/"/>
      <url>2022/json-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1>JSON 格式</h1><p>JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式，目的是取代繁琐笨重的 XML 格式。</p><p>相比 XML 格式，JSON 格式有两个显著的优点：</p><ol><li>书写简单，一目了然；</li><li>符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。</li></ol><hr><p>每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。</p><p>JSON 对值的类型和格式有严格的规定。</p><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和 <code>null</code>（不能使用 NaN, Infinity, -Infinity 和 undefined）。</li><li>字符串必须使用双引号表示，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li><li><code>null</code>、空数组和空对象都是合法的 JSON 值。</li></ol><p>一下都是合法的 JSON：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span> <span class="token property">"one"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"two"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"three"</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下都是不合法的 JSON：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> 'age'<span class="token operator">:</span> <span class="token number">32</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 属性名必须使用双引号</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> 0xFFF<span class="token punctuation">]</span> <span class="token comment">// 不能使用十六进制值</span><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> undefined <span class="token punctuation">&#125;</span> <span class="token comment">// 不能使用 undefined</span><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token property">"birthday"</span><span class="token operator">:</span> new Date('Fri<span class="token punctuation">,</span> <span class="token number">26</span> Aug <span class="token number">2011</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">13</span><span class="token operator">:</span><span class="token number">10</span> GMT')<span class="token punctuation">,</span>  <span class="token property">"getName"</span><span class="token operator">:</span> function () <span class="token punctuation">&#123;</span>      return this.name;  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 属性值不能使用函数和日期对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>JSON 对象</h1><p>JSON 对象是 JavaScript 的原生对象，用来处理 JSON 格式数据。它有两个静态方法：<code>JSON.stringify()</code> 和<code>JSON.parse()</code>。</p><h2 id="JSON-stringify">JSON.stringify()</h2><p><code>JSON.stringify()</code> 方法用于将一个值转为 JSON 字符串。该字符串符合 JSON 格式，并且可以被 <code>JSON.parse()</code> 方法还原。</p><h2 id="toJSON">toJSON()</h2><p>如果参数对象有自定义的 toJSON()方法，那么 JSON.stringify()会使用这个方法的返回值作为参数，而忽略原对象的其他属性。</p><p>下面是一个普通的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  firstName<span class="token operator">:</span> <span class="token string">'三'</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">'张'</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment">// "&#123;"firstName":"三","lastName":"张","fullName":"张三"&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，为这个对象加上 <code>toJSON()</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  firstName<span class="token operator">:</span> <span class="token string">'三'</span><span class="token punctuation">,</span>  lastName<span class="token operator">:</span> <span class="token string">'张'</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">toJSON</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment">// "&#123;"name":"张三"&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON-parse">JSON.parse()</h2><p><code>JSON.parse()</code> 方法用于将 JSON 字符串转换成对应的值。</p><p>为了处理解析错误，可以将 JSON.parse() 方法放在 <code>try...catch</code> 代码块中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"'String'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'parsing error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joomla 网站搭建指南</title>
      <link href="2022/joomla-wang-zhan-da-jian-zhi-nan/"/>
      <url>2022/joomla-wang-zhan-da-jian-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>查看模板布局ip/?tp=1</p><p>模板、菜单、模块、组件</p><h1>组件</h1><p>网页主要内容生产者，如文章管理组件、分类管理组件等。</p><h1>菜单</h1><h2 id="菜单">菜单</h2><h2 id="菜单项">菜单项</h2><h2 id="菜单项类型">菜单项类型</h2><p>用户访问网站是通过点击导航栏上的菜单项实现。若想呈现各种各样的页面，菜单项必须和组件联系起来，这个过程的实现，专业术语称为 <code>菜单项类型</code>。</p><p>菜单项类型有如，嵌入页面、文章管理、新闻源、智能搜索、标签管理等等各种组件，每一项又有许多子项组件。</p>]]></content>
      
      
      <categories>
          
          <category> Joomla </category>
          
      </categories>
      
      
        <tags>
            
            <tag> joomla </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joomla 环境搭建</title>
      <link href="2022/joomla-huan-jing-da-jian/"/>
      <url>2022/joomla-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.joomla.org/">joomla!</a> 是一套开源的内容管理系统（简称 CMS）。可以把它理解为一套免费、好用的建站系统。和它同样知名的还有 <code>Drupal</code> 以及 <code>WordPress</code>系统。</p><p>Joomla 核心优势就在于各种类型的内容发布管理，包括文字、图片、音频视频、文件等。无论是企业、政府、教育、金融等各行业的官网制作，或是电商网站、个人博客或是内部资讯平台 Joomla 都能胜任。</p><p>joomla 运行环境参考<a href="https://downloads.joomla.org/technical-requirements">这里</a>。</p><ul><li>VirtualBox 6.1.34</li><li>Ubuntu Server 22.04</li><li>Apache 2.4+</li><li>PHP 8.0</li><li>MySQL 5.6+</li></ul><h1>Ubuntu Server</h1><p>获取 <a href="https://ubuntu.com/download/server">Ubuntu Server</a> ，在 VirtualBox 中按步骤安装。</p><ol><li>替换默认官网源为清华镜像源 <code>https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</code>。</li><li>勾选 <code>openssh-server</code> 安装 ssh 服务。</li></ol><p>完成安装后登录，使用命令<code>ifconfig</code>查看 IP，结果发现是 <code>10.0.2.15</code> 在本地无法ping 通。打开本地 cmd 输入指令 <code>ipconfig</code> 得到 <code>以太网适配器 VirtualBox Host-Only Network</code> 的 IP 为 <code>192.168.56.1</code>，且可以 ping 通。</p><p>使用 <code>putty</code> 远程登录 <code>192.168.56.1</code> 报错 <code>Network error: connection refused</code>。主要原因是 Virtualbox 网络配置网卡连接方式为 <code>网络地址转换(NAT)</code>，需要在<code>端口转发规则</code> 中设置，如下：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">协议</th><th style="text-align:right">主机 IP</th><th style="text-align:right">主机端口</th><th style="text-align:right">子系统 IP</th><th style="text-align:right">子系统端口</th></tr></thead><tbody><tr><td style="text-align:center">ssh</td><td style="text-align:center">TCP</td><td style="text-align:right">192.168.56.1</td><td style="text-align:right">22</td><td style="text-align:right">10.0.2.15</td><td style="text-align:right">22</td></tr></tbody></table><p>现在，可以在本地通过 putty 访问 Ubuntu Server 了。</p><h1>Apache</h1><p>Apache 相关信息在<a href="https://www.apache.org/">这里</a>查看。</p><ol><li><p>Ubuntu 安装 Apache2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apache2 -y<span class="token comment"># 如果有 UFW 防火墙运行，需要允许 Apache</span><span class="token function">sudo</span> ufw allow <span class="token string">'Apache'</span><span class="token comment"># 查看运行状态</span><span class="token function">sudo</span> systemctl status apache2<span class="token comment"># 若没运行</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> apache2<span class="token function">sudo</span> systemctl start apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看 Apache2 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 版本为 2.4.52</span>apache2 -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改默认网站根目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新根目录 /home/www</span><span class="token function">sudo</span> <span class="token function">mkdir</span> /home/www<span class="token comment"># 由于 apache2 属于用户和用户组都为 www-data 启动，所以要修改权限</span><span class="token comment"># 或直接为用户 www-data 创建一个 home 目录</span><span class="token function">sudo</span> <span class="token function">chown</span> www-data:www-data /home/www<span class="token comment"># 修改 apache2.conf 配置文件</span><span class="token comment"># 找到 /var/www/ 更改为自定义新根目录 /home/www</span><span class="token function">sudo</span> <span class="token function">vi</span> /etc/apache2/apache2.conf<span class="token comment"># 修改 000-default.conf 配置文件</span><span class="token comment">#找到 DocumentRoot 后面的 /var/www/html 更改为/home/www</span><span class="token function">sudo</span> <span class="token function">vi</span> /etc/apache2/sites-available/000-default.conf<span class="token comment">#重启 apache2 服务，重启完后</span><span class="token function">sudo</span> systemctl restart apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 VirtualBox 网络设置 <code>端口转发规则</code> 增加 80 端口和 443 端口，这样就可以在本地浏览器输入 <code>192.168.56.1</code> 访问服务器了。</p></li></ol><h1>PHP</h1><p>PHP 相关信息在<a href="https://www.php.net/">这里</a>查看。</p><ol><li><p>配置独立最新软件源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> software-properties-common<span class="token function">sudo</span> add-apt-repository ppa:ondrej/php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装 PHP8.1</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为 Apache 安装 PHP8.1 和相应模块</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php8.1 libapache2-mod-php8.1 libapache2-mod-fcgid<span class="token comment"># 启动模块，可在/etc/apache2/mods-enabled 中查看</span><span class="token function">sudo</span> a2enmod php8.1 fcgid<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php8.1-<span class="token punctuation">&#123;</span>curl,mysql,xml,fpm<span class="token punctuation">&#125;</span><span class="token comment"># 开启配置，可在/etc/apache2/conf-enabled 中查看</span><span class="token function">sudo</span> a2enconf php8.1-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 apache</p></li><li><p>在 <code>/home/www</code> 根目录下创建 <code>index.php</code>，内容为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若显示 PHP 详细信息则表示成功。</p></li></ol><h1>MySQL</h1><p>MySQL 相关信息在<a href="https://www.mysql.com/">这里</a>查看。</p><ol><li><p>安装 MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录超级用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 超级用户账号密码在配置文件 /etc/mysql/debian.cnf 中保存</span>mysql -u debian-sys-maint -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建新用户并授予整个数据库所有权限</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create user &#39;naruto&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;grant all privileges on *.* to &#39;naruto&#39;@&#39;localhost&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1>安装 joomla</h1><p>下载<a href="https://downloads.joomla.org/">joomla ZIP</a> 压缩包，本文中使用 <code>4.1.2</code>。</p><p>使用 <code>PSFTP</code> 工具上传到服务器，使用 <code>7zip</code> 解压到 <code>/home/www</code> 目录中并修改所有者和组为 <code>www-data</code>。</p><p>在网页中打开服务器地址 <code>192.168.56.1</code> 即可看到 joomla 安装页面。按照步骤完成。</p><ol><li><p>在数据库配置这部分，需要和 MySQL 小节中保持一致。数据库按照默认给出的创建，则无法连接数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 以 hkk 用户身份登录创建 joomla_db 数据库create database joomla_db;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>为了更好的确保系统兼容，需要对 PHP 进行深入设置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php8.1-gd php8.1-zip php8.1-intl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭输出缓冲，在文件 <code>/etc/php/8.1/fpm/php.ini</code> 中注释掉 <code>output_buffering</code>即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Joomla </category>
          
      </categories>
      
      
        <tags>
            
            <tag> joomla </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 实用手册</title>
      <link href="2022/emacs-shi-yong-shou-ce/"/>
      <url>2022/emacs-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1>变量</h1><h2 id="查看-emacs-编译选项">查看 emacs 编译选项</h2><p>变量 system-configuration-options</p>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Org-mode 实用指南</title>
      <link href="2022/org-mode-shi-yong-zhi-nan/"/>
      <url>2022/org-mode-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://orgmode.org/">Org</a> 基于 Outline 模式，用层次结构来组织文档。</p><h1>基础</h1><h2 id="标题">标题</h2><pre class="line-numbers language-none"><code class="language-none">*     一级标题**    二级标题***   三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="视图循环">视图循环</h2><p>大纲模式</p><h1>进价</h1><h1>Babel</h1><p>org babel 用于运行 org 文档中插入的源代码，命令 <code>C-c C-c</code>。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">#+begin_src python <span class="token lisp-property property">:results</span> output  def hello<span class="token punctuation">(</span><span class="token punctuation">)</span>:    return <span class="token string">"hello, world!"</span>  print <span class="token punctuation">(</span><span class="token car">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#+end_src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>其它</h1><ul><li>源代码块快速补全</li></ul><pre class="line-numbers language-none"><code class="language-none">;; 需要在配置文件中配置 (require &#39;org-tempo)&lt;s + &lt;TAB&gt;    ;; 插入 #+begin_src ... #+end_src;; 类似选项e    ; #+begin_example ... #+end_example  : 单行的例子以冒号开头q    ; #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进v    ; #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行c    ; #+begin_center ... #+end_centerl    ; #+begin_latex ... #+end_latexL    ; #+latex:h    ; #+begin_html ... #+end_htmlH    ; #+html:a    ; #+begin_ascii ... #+end_asciiA    ; #+ascii:i    ; #+index: lineI    ; #+include: line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>#+</code> 快速补全</li></ul><pre class="line-numbers language-none"><code class="language-none">C-M i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>增加时间</li></ul><pre class="line-numbers language-none"><code class="language-none">C-c .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> org </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XRAY 搭配 VLESS 搭建 VPN</title>
      <link href="2022/xray-da-pei-vless-da-jian-vpn/"/>
      <url>2022/xray-da-pei-vless-da-jian-vpn/</url>
      
        <content type="html"><![CDATA[<p>采用方式 xray + vless + xtls + tcp 实现 VPN。详细参考这篇<a href="https://xtls.github.io/document/level-0">文章</a>。</p><h1>工作准备</h1><ol><li>购买一台系统为 16.04 Ubuntu VPS，参考 <a href="/2022/vps-zhu-ji-gou-mai/" title="VPS 主机购买">VPS 主机购买</a></li><li>在 freenom 获取一个心仪域名，参考 <a href="/2022/freenom-mian-fei-yu-ming-shen-qing/" title="freenom 免费域名申请">freenom 免费域名申请</a>。</li><li>在 cloudflare 中为新域名创建一个站点，并设置 DNS，添加一条指向你 VPS 的 IP 地址的 A 记录。A 记录取名为“vpn”。完整的域名则会用 <code>二级域名.你的域名.com</code> 或者<code>vpn.yourdomain.com</code> 来表示。将 cloudflare 的两个 nameserver 添加到 freenom新申请域名的自定义 nameserver 中。</li></ol><h1>网站建设</h1><p>做网站的原因：</p><ol><li>申请合法的 TLS 证书（非常重要）</li><li>提供合理的回落，防止主动探测攻击，提高安全性</li><li>建设一个伪装站（如博客、私人网盘、多媒体网站、游戏网站等），直接访问时有合理的前台，使流量使用看上去更合理。</li></ol><h2 id="安装运行-nginx">安装运行 nginx</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 root 权限直接安装 nginx，要问为什么直接是 root，很简单嫌麻烦</span><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若输入 VPS 的地址显示出“Welcome to nginx!”表示按照成功。</p><h1>创建简单网页</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 由于使用 root，所以 ~ 表示 /root</span><span class="token comment"># /root/www/webpage 将作为网站存储位置，index.html 是我们创建的网页</span><span class="token function">mkdir</span> -p ~/www/webpage/ <span class="token operator">&amp;&amp;</span> <span class="token function">vi</span> ~/www/webpage/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>index.html 页面内容为：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>学习使我(*^▽^*)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>搭建网站<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个网站用来学习如何搭建个人网站的。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>The first item in your list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>The second item; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>italicize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> key words<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Improve your image by including an image.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./panda.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>可爱的大熊猫<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      Add a link to your favorite      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.dummies.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Web site<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>. Break up your page      with a horizontal rule or two.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      Finally, link to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>another page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> for searching site.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- And add a copyright notice.--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>© foo Publishing, 2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-Nginx">配置 Nginx</h2><p>修改 nginx.conf 并重启 Nginx 服务器，将 80 端口的 http 访问定位到刚刚建立的 HTML 页面上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>http&#123;&#125;</code> 内添加如下内容：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 定位 80 端口</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> vpn<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">root</span> <span class="token operator">/</span><span class="token keyword">root</span><span class="token operator">/</span>www<span class="token operator">/</span>webpage<span class="token punctuation">;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认 nginx 用户为 <code>www-data</code>，修改 nginx 启动用户为 root，否则报错 403。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 修改 nginx 用户为 root</span><span class="token keyword">user</span> <span class="token keyword">root</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>让 Nginx 重新载入配置使其生效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时若访问 <code>http://vpn.yourdomain.com</code> 能够正确显示之前的 index.html 则说明成功。</p><h1>证书管理</h1><h2 id="申请-LTS-证书">申请 LTS 证书</h2><p>为域名申请一个真实的 TLS 证书，使网站具备标准 TLS 加密的能力及 HTTPS 访问的能力。这就是 Xray 等现阶段安全代理工具确保流量充分加密最 <strong>重要的工具</strong>。</p><h2 id="证书管理工具-acme-sh">证书管理工具 <code>acme.sh</code></h2><p>安装 <code>acem.sh</code> 证书管理工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载</span><span class="token function">wget</span> -O -  https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 安装</span><span class="token builtin class-name">.</span> .bashrc<span class="token comment"># 开启 acme.sh 的自动升级</span>acme.sh --upgrade --auto-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试证书申请">测试证书申请</h2><p>在正式申请证书之前，我们先用测试命令(–issue --test)来验证是否可以成功申请，这样可以避免在本地配置有误时，反复申请证书失败，超过 Let’s Encrypt 的频率上限（比如，每小时、每个域名、每个用户失败最多 5 次），导致后面的步骤无法进行。</p><ol><li><p>测试证书申请命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh --issue --server letsencrypt --test -d vpn.yourdomain.com -w /root/www/webpage --keylength ec-256<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若成功会看到 <code>Cert success.</code> 提示。</p></li><li><p>注意：这里申请的是测试证书，没办法直接用的，只是用来证明你的域名、配置全都正确。</p></li><li><p>如果这一步出错的话，你可以运行下面的命令，来查看详细的申请过程和具体的错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh --issue --server letsencrypt --test -d vpn.yourdomain.com -w /root/www/webpage --keylength ec-256 --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这一步确定成功之后，就可以申请正式的证书了。（测试证书不需要删除，它会自动被正式证书覆盖）。</p></li></ol><h2 id="正式证书申请">正式证书申请</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh --set-default-ca --server letsencryptacme.sh --issue -d vpn.yourdomain.com -w /root/www/webpage --keylength ec-256 --force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>Xray 服务器</h1><h2 id="安装-Xray">安装 Xray</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 root 权限</span><span class="token function">wget</span> https://github.com/XTLS/Xray-install/raw/main/install-release.sh<span class="token function">bash</span> install-release.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="给-Xray-配置-TLS-证书">给 Xray 配置 TLS 证书</h2><ol><li><p>虽然我们前面已经申请好了 TLS 证书，但是按照官方说明申请后的证书不建议直接使用。正确的方法是使用 --install-cert 命令安装给需要的程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 root 权限</span><span class="token function">mkdir</span> ~/xray_cert<span class="token comment"># 安装证书</span>acme.sh --install-cert -d vpn.yourdomain.com --ecc <span class="token punctuation">\</span>            --fullchain-file ~/xray_cert/xray.crt <span class="token punctuation">\</span>            --key-file ~/xray_cert/xray.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>xray.key</code> 文件默认对其它用户不可读，所以需要赋予其可读性权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +r ~/xray_cert/xray.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>acme.sh</code> 会每 60 天检查一次证书并自动更新临期证书。但它并不会自动将新证书安装给 <code>xray-core</code>，所以我们需要新增一个系统的自动周期任务来完成这一步。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 建立脚本文件并增加可执行权限</span><span class="token function">touch</span> ~/xray_cert/xray-cert-renew.sh<span class="token function">chmod</span> +x ~/xray_cert/xray-cert-renew.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>脚本内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/root/.acme.sh/acme.sh --install-cert -d vpn.yourdomain.com --ecc --fullchain-file /root/xray_cert/xray.crt --key-file /root/xray_cert/xray.key<span class="token builtin class-name">echo</span> <span class="token string">"Xray Certificates Renewed"</span><span class="token function">chmod</span> +r /root/xray_cert/xray.key<span class="token builtin class-name">echo</span> <span class="token string">"Read Permission Granted for Private Key"</span><span class="token function">sudo</span> systemctl restart xray<span class="token builtin class-name">echo</span> <span class="token string">"Xray Restarted"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行 <code>crontab -e</code>，添加一个自动任务【每月自动运行一次<code>xray-cert-renew.sh</code>】</p><pre class="line-numbers language-none"><code class="language-none"># 1:00am, 1st day each month, run &#96;xray-cert-renew.sh&#96;0 1 1 * *   bash &#x2F;home&#x2F;vpsadmin&#x2F;xray_cert&#x2F;xray-cert-renew.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="配置-Xray">配置 Xray</h2><ol><li><p>生成一个合法的 UUID 并保存备用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xray uuid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立日至专用目录并生成所需要的访问日志和错误日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/xray_log<span class="token function">touch</span> ~/xray_log/access.log <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> ~/xray_log/error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>因为 Xray 默认是 nobody 用户使用，所以我们需要让其他用户也有“写”的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> a+w ~/xray_log/*.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建配置文件 <code>/usr/local/etc/xray/config.json</code></p></li><li><p>配置文件内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// REFERENCE:</span><span class="token comment">// https://github.com/XTLS/Xray-examples</span><span class="token comment">// https://xtls.github.io/config/</span><span class="token comment">// 常用的 config 文件，不论服务器端还是客户端，都有 5 个部分。外加小小白解读：</span><span class="token comment">// ┌─ 1*log 日志设置 - 日志写什么，写哪里（出错时有据可查）</span><span class="token comment">// ├─ 2_dns DNS-设置 - DNS 怎么查（防 DNS 污染、防偷窥、避免国内外站匹配到国外服务器等）</span><span class="token comment">// ├─ 3_routing 分流设置 - 流量怎么分类处理（是否过滤广告、是否国内外分流）</span><span class="token comment">// ├─ 4_inbounds 入站设置 - 什么流量可以流入 Xray</span><span class="token comment">// └─ 5_outbounds 出站设置 - 流出 Xray 的流量往哪里去</span><span class="token punctuation">&#123;</span><span class="token comment">// 1\_日志设置</span><span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token comment">// 内容从少到多: "none", "error", "warning", "info", "debug"</span> <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"/root/xray_log/access.log"</span><span class="token punctuation">,</span> <span class="token comment">// 访问记录</span> <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"/root/xray_log/error.log"</span> <span class="token comment">// 错误记录</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2_DNS 设置</span> <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"servers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">"https+local://1.1.1.1/dns-query"</span><span class="token punctuation">,</span> <span class="token comment">// 首选 1.1.1.1 的 DoH 查询，牺牲速度但可防止 ISP 偷窥</span>   <span class="token string">"localhost"</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 3*分流设置</span><span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"domainStrategy"</span><span class="token operator">:</span> <span class="token string">"AsIs"</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 3.1 防止服务器本地流转问题：如内网被攻击或滥用、错误的本地回环等</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>      <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"geoip:private"</span> <span class="token comment">// 分流条件：geoip 文件内，名为"private"的规则（本地）</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"block"</span> <span class="token comment">// 分流策略：交给出站"block"处理（黑洞屏蔽）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 3.2 屏蔽广告</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>      <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"geosite:category-ads-all"</span> <span class="token comment">// 分流条件：geosite 文件内，名为"category-ads-all"的规则（各种广告域名）</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"block"</span> <span class="token comment">// 分流策略：交给出站"block"处理（黑洞屏蔽）</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 4*入站设置</span>  <span class="token comment">// 4.1 这里只写了一个最简单的 vless+xtls 的入站，因为这是 Xray 最强大的模式。如有其他需要，请根据模版自行添加。</span>  <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vless"</span><span class="token punctuation">,</span>      <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"clients"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 填写你的 UUID</span>            <span class="token property">"flow"</span><span class="token operator">:</span> <span class="token string">"xtls-rprx-direct"</span><span class="token punctuation">,</span>            <span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"vpsadmin@yourdomain.com"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"decryption"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>        <span class="token property">"fallbacks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token number">80</span> <span class="token comment">// 默认回落到防探测的代理</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span>        <span class="token property">"security"</span><span class="token operator">:</span> <span class="token string">"xtls"</span><span class="token punctuation">,</span>        <span class="token property">"xtlsSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"allowInsecure"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 正常使用应确保关闭</span>          <span class="token property">"minVersion"</span><span class="token operator">:</span> <span class="token string">"1.2"</span><span class="token punctuation">,</span> <span class="token comment">// TLS 最低版本设置</span>          <span class="token property">"alpn"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http/1.1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"certificates"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"certificateFile"</span><span class="token operator">:</span> <span class="token string">"/root/xray_cert/xray.crt"</span><span class="token punctuation">,</span>              <span class="token property">"keyFile"</span><span class="token operator">:</span> <span class="token string">"/root/xray_cert/xray.key"</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 5*出站设置</span>  <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 5.1 第一个出站是默认规则，freedom 就是对外直连（vps 已经是外网，所以直连）</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 5.2 屏蔽规则，blackhole 协议就是把流量导入到黑洞里（屏蔽）</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="启动-Xray-服务">启动 Xray 服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 xray</span>systemctl start xray<span class="token comment"># 查看状态</span>systemctl status xray<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时你会发现 xray 启动失败，原因在于 xray 默认权限是 nobody，而我所有的操作都是 root。所以需要修改 xray 权限为 root。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl edit --full xray.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 <code>User=root</code>。</p><h2 id="服务器优化：开启-BBR">服务器优化：开启 BBR</h2><p>BBR = Bottleneck Bandwidth and Round-trip propagation time，是一种 TCP 的拥塞控制算法。</p><ol><li><p>添加官方 backports 源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把下面内容加在最后，保存退出</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;deb.debian.org&#x2F;debian bullseye-backports main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>刷新软件库并查询 Debian 官方的最新版内核并安装。请务必安装你的 VPS 对应的版本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> -t bullseye-backports <span class="token function">install</span> linux-image-amd64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能报错：The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY XXXX</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-key adv --recv-keys --keyserver keyserver.ubuntu.com XXXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 kernel 参数配置文件 sysctl.conf 并指定开启 BBR</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把下面内容添加进去</p><pre class="line-numbers language-none"><code class="language-none">net.core.default_qdisc&#x3D;fqnet.ipv4.tcp_congestion_control&#x3D;bbr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启系统。</p></li><li><p>确认 BBR 开启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 返回 tcp_bbr</span>lsmod <span class="token operator">|</span> <span class="token function">grep</span> bbr<span class="token comment"># 返回 sch_fq</span>lsmod <span class="token operator">|</span> <span class="token function">grep</span> fq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="服务器优化：开启-HTTP-自动跳转-HTTPS">服务器优化：开启 HTTP 自动跳转 HTTPS</h2><ol><li><p>之前我们已经搭建了 80 端口的 http 网页，并以此申请了 TLS 证书。</p><p>但如果你尝试过用浏览器访问我们的这个界面，就会发现 http 访问并不会像大多数网站一样自动升级为 https 访问。换言之，我们现在的设置下，http(80) 和 https(443)之间完全是独立的。如果要解决这个问题，就需要做一些修改。</p></li><li><p>编辑 nginx 配置文件 <code>nginx.conf</code>，在我们设置过的 80 端口 Server 中加入下面的语句，并保存退出（可同时删除 root 和 index 两行）</p><pre class="line-numbers language-none"><code class="language-none">return 301 https:&#x2F;&#x2F;$http_host$request_uri;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在与 80 端口同级的位置增加一个本地端口监听来提供网页展示。本文以 8080 端口做演示。（可以是任意端口）</p><pre class="line-numbers language-none"><code class="language-none">server &#123;   listen 127.0.0.1:8080;   root &#x2F;home&#x2F;vpsadmin&#x2F;www&#x2F;webpage;   index index.html;   add_header Strict-Transport-Security &quot;max-age&#x3D;63072000&quot; always;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 nginx。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 Xray 的回落设置，将回落从 80 端口改为 8080 端口（找到 “dest”: 80, 并改成“dest”: 8080）。重启 xray 服务。</p></li></ol><p>当你输入 <a href="http://vpn.yourdomain.com">http://vpn.yourdomain.com</a> 的时候，它应该已经会自动跳转 <code>https</code> 了。</p><h1>客户端配置</h1><ul><li>服务器【地址】: <a href="http://a-name.yourdomain.com">a-name.yourdomain.com</a></li><li>服务器【端口】: 443</li><li>连接的【协议】: vless</li><li>连接的【流控】: xtls-rprx-direct (direct 模式适合全平台，若是 Linux/安卓用户，可改成 xtls-rprx-splice 性能全开)</li><li>连接的【验证】: uuiduuid-uuid-uuid-uuiduuiduuid</li><li>连接的【安全】: “allowInsecure”: false</li></ul><p>PC 端手工配置：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// REFERENCE:</span><span class="token comment">// https://github.com/XTLS/Xray-examples</span><span class="token comment">// https://xtls.github.io/config/</span><span class="token comment">// 常用的 config 文件，不论服务器端还是客户端，都有 5 个部分。外加小小白解读：</span><span class="token comment">// ┌─ 1_log          日志设置 - 日志写什么，写哪里（出错时有据可查）</span><span class="token comment">// ├─ 2_dns          DNS-设置 - DNS 怎么查（防 DNS 污染、防偷窥、避免国内外站匹配到国外服务器等）</span><span class="token comment">// ├─ 3_routing      分流设置 - 流量怎么分类处理（是否过滤广告、是否国内外分流）</span><span class="token comment">// ├─ 4_inbounds     入站设置 - 什么流量可以流入 Xray</span><span class="token comment">// └─ 5_outbounds    出站设置 - 流出 Xray 的流量往哪里去</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 1_日志设置</span>  <span class="token comment">// 注意，本例中我默认注释掉了日志文件，因为 windows, macOS, Linux 需要写不同的路径，请自行配置</span>  <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span> <span class="token comment">// 内容从少到多: "none", "error", "warning", "info", "debug"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 2_DNS 设置</span>  <span class="token property">"dns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"servers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// 2.1 国外域名使用国外 DNS 查询</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"1.1.1.1"</span><span class="token punctuation">,</span>        <span class="token property">"domains"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:geolocation-!cn"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 2.2 国内域名使用国内 DNS 查询，并期待返回国内的 IP，若不是国内 IP 则舍弃，用下一个查询</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"223.5.5.5"</span><span class="token punctuation">,</span>        <span class="token property">"domains"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"expectIPs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geoip:cn"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 2.3 作为 2.2 的备份，对国内网站进行二次查询</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"114.114.114.114"</span><span class="token punctuation">,</span>        <span class="token property">"domains"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:cn"</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 2.4 最后的备份，上面全部失败时，用本机 DNS 查询</span>      <span class="token string">"localhost"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 3_分流设置</span>  <span class="token comment">// 所谓分流，就是将符合否个条件的流量，用指定`tag`的出站协议去处理（对应配置的 5.x 内容）</span>  <span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"domainStrategy"</span><span class="token operator">:</span> <span class="token string">"AsIs"</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// 3.1 广告域名屏蔽</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:category-ads-all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"block"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 3.2 国内域名直连</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 3.3 国内 IP 直连</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geoip:cn"</span><span class="token punctuation">,</span> <span class="token string">"geoip:private"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 3.4 国外域名代理</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:geolocation-!cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"proxy"</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 3.5 默认规则</span>      <span class="token comment">// 在 Xray 中，任何不符合上述路由规则的流量，都会默认使用【第一个 outbound（5.1）】的设置，所以一定要把转发 VPS 的 outbound 放第一个</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 4_入站设置</span>  <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 4.1 一般都默认使用 socks5 协议作本地转发</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"socks-in"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"socks"</span><span class="token punctuation">,</span>      <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment">// 这个是通过 socks5 协议做本地转发的地址</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">10800</span><span class="token punctuation">,</span> <span class="token comment">// 这个是通过 socks5 协议做本地转发的端口</span>      <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"udp"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 4.2 有少数 APP 不兼容 socks 协议，需要用 http 协议做转发，则可以用下面的端口</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"http-in"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"http"</span><span class="token punctuation">,</span>      <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment">// 这个是通过 http 协议做本地转发的地址</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">10801</span> <span class="token comment">// 这个是通过 http 协议做本地转发的端口</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 5_出站设置</span>  <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 5.1 默认转发 VPS</span>    <span class="token comment">// 一定放在第一个，在 routing 3.5 里面已经说明了，这等于是默认规则，所有不符合任何规则的流量都走这个</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"proxy"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vless"</span><span class="token punctuation">,</span>      <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"vnext"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"vpn.yourdomain.com"</span><span class="token punctuation">,</span> <span class="token comment">// 替换成你的真实域名</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>            <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"uuiduuid-uuid-uuid-uuid-uuiduuiduuid"</span><span class="token punctuation">,</span> <span class="token comment">// 和服务器端的一致</span>                <span class="token property">"flow"</span><span class="token operator">:</span> <span class="token string">"xtls-rprx-direct"</span><span class="token punctuation">,</span> <span class="token comment">// Windows, macOS 同学保持这个不变</span>                <span class="token comment">// "flow": "xtls-rprx-splice",    // Linux 和安卓同学请改成 Splice 性能更强</span>                <span class="token property">"encryption"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                <span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">0</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span>        <span class="token property">"security"</span><span class="token operator">:</span> <span class="token string">"xtls"</span><span class="token punctuation">,</span>        <span class="token property">"xtlsSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"serverName"</span><span class="token operator">:</span> <span class="token string">"a-name.yourdomain.com"</span><span class="token punctuation">,</span> <span class="token comment">// 替换成你的真实域名</span>          <span class="token property">"allowInsecure"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 禁止不安全证书</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 5.2 用`freedom`协议直连出站，即当 routing 中指定'direct'流出时，调用这个协议做处理</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 5.3 用`blackhole`协议屏蔽流量，即当 routing 中指定'block'时，调用这个协议做处理</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>      <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端工具">客户端工具</h2><ul><li><a href="https://github.com/2dust/v2rayN/releases">v2rayN</a> - 适用于 Windows 平台</li><li><a href="https://github.com/2dust/v2rayNG/releases">v2rayNG</a> - 适用于 Android 平台</li><li>Shadowrocket - 适用于 iOS, 基于苹果 M 芯片的 macOS，付费</li><li><a href="https://github.com/Qv2ray/Qv2ray/releases">Qv2ray</a> - 跨平台图形界面，适用于 Linux, Windows, macOS</li></ul>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freenom 免费域名申请</title>
      <link href="2022/freenom-mian-fei-yu-ming-shen-qing/"/>
      <url>2022/freenom-mian-fei-yu-ming-shen-qing/</url>
      
        <content type="html"><![CDATA[<p>登录 <a href="http://www.freenom.com/zh/index.html">freenom</a> 网站申请一个免费域名。</p><p>注册后在 <em>Services -&gt; Register a New Domain</em> 中输入你的域名，点击 <em>CheckAvailability</em> 查看心仪的域名。点击获取后可在 <em>view cart</em> 中完成购买。</p><p>freenom 申请域名时要保证电脑 IP 和个人信息内的地址在一个地区，否则最后一步下单无法成功。</p><p>IP 所在地区可在 <a href="https://www.ip138.com/">ip138</a> 查询。</p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freenom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器代理配置</title>
      <link href="2022/liu-lan-qi-dai-li-pei-zhi/"/>
      <url>2022/liu-lan-qi-dai-li-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1>chrome 代理</h1><p>Chrome 推荐代理插件<a href="https://github.com/FelisCatus/SwitchyOmega/releases">SwitchyOmega</a>。</p><ul><li><p>插件网 <em><a href="http://www.cnplugins.com/">http://www.cnplugins.com/</a></em> 上面把代理相关的全禁了，真闲的蛋疼。</p></li><li><p>新版 Chrome 不能直接安装 crx 文件，把 crx 尾缀修改为 zip 拖到 Chrome 的拓展程序即可。此离线安装方法重启 Chrome 后失效，需要重新操作一遍。</p></li><li><p>最好的方法是通过 Chrome 商店安装，但需要翻墙（开启 v2ray 的 HTTP 代理全局模式）。</p></li></ul><h2 id="SwitchOmega-设置">SwitchOmega 设置</h2><p>在左侧的情景模式中，默认有 <em>proxy</em>、<em>auto switch</em> 和 <em>新建情景模式…</em>。可以通过<em>新建情景模式…</em> 来创建新的 <em>代理服务器</em> 和 <em>自动切换模式</em>。使用默认的两种模式已经满足需求了。</p><ol><li><em>代理服务器 proxy</em></li></ol><p>proxy 配置需要和 v2ray 客户端 inbounds 参数保持一致。</p><table><thead><tr><th style="text-align:center">网址协议</th><th style="text-align:center">代理协议</th><th style="text-align:center">代理服务器</th><th style="text-align:center">代理端口</th></tr></thead><tbody><tr><td style="text-align:center">（默认）</td><td style="text-align:center">SOCKS5</td><td style="text-align:center">127.0.0.1</td><td style="text-align:center">2080</td></tr></tbody></table><ol start="2"><li><em>自动切换模式 auto switch</em></li></ol><p>主要作用是将特定情景模式（代理）应用到具有某种模式的网址，实现自动根据网站适配不同代理。</p><ul><li><p>切换规则</p><table><thead><tr><th style="text-align:center">条件类型</th><th style="text-align:center">条件设置</th><th style="text-align:center">情景模式</th><th style="text-align:center">操作</th></tr></thead><tbody><tr><td style="text-align:center">域名通配符</td><td style="text-align:center">*<a href="http://youtube.com">youtube.com</a>*</td><td style="text-align:center">proxy</td><td style="text-align:center">-</td></tr></tbody></table><p>当我浏览 YouTube 时，自动会切换到 proxy 代理。</p></li><li><p>规则列表设置</p><p>规则列表网址：<em><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></em></p><p>点击 <em>立即更新情景模式</em>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS 主机购买</title>
      <link href="2022/vps-zhu-ji-gou-mai/"/>
      <url>2022/vps-zhu-ji-gou-mai/</url>
      
        <content type="html"><![CDATA[<h1>VPS 主机购买</h1><p>逢年过节各大 VPS 供应商会有各种优惠活动，可参考 <a href="https://www.zhujiceping.com/">国外主机测评</a> 了解详细信息。</p><p>购买主机选择 OS 时，至少选择 <strong>Ubuntu 16.04 64 位</strong> 操作系统。（<font color="red">v2ray 运行在 init 系统为 <em>systemd</em> 的操作系统上</font>）。</p><h2 id="virmach">virmach</h2><ol><li><p>注册 <a href="https://virmach.com/">virmach</a> 账号。</p></li><li><p>在 <em>Order New Services</em> 中选择适合主机，网上查找优惠码，使用支付宝支付。</p></li><li><p>付款成功后会收到一封邮件，包括主机 IP、OS 登录账户和密码。</p></li><li><p>可使用 putty 远程 ssh 登录。也可使用 virmach 控制面板 <em>VNC/Desktop</em> 工具登录。</p></li><li><p>修改 Ubuntu 登录密码</p><ul><li><p>按照官方说明，首先尝试在 <em>control panel</em> 中修改 <em>root/Admin</em> Password。若不成功则关闭主机重新修改，若还不成只能求助技术支持了。</p></li><li><p>若无法在 <em>control panel</em> 修改密码，可以在 VNC 中使用指令 <em>passwd</em> 修改root 密码。此时虽然 root 密码已被修改，但是控制面板显示的密码并没有改变。</p></li></ul></li></ol><h2 id="racknerd">racknerd</h2><p>和 virmach 流程基本一样。</p><ol><li><p>注册 <a href="https://www.racknerd.com/">racknerd</a> 账号。</p></li><li><p>购机后会收到一封邮件，包括主机 IP、OS 登录账号和密码、<em>control panel</em> 账号和密码。</p></li><li><p>可以所使用的 putty 远程 ssh 登录，使用 <em>passwd</em> 指令直接修改 <em>root</em> 登录密码。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 实用操作</title>
      <link href="2021/emacs-shi-yong-cao-zuo/"/>
      <url>2021/emacs-shi-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1>eww</h1><p>Emacs 内置浏览器，使用命令 <code>M-x eww</code> 进入浏览器。</p><ul><li><code>q</code>，绑定函数 <code>eww-quit</code>，退出 eww。</li><li><code>g</code>，绑定函数 <code>eww-reload</code>，重载该页面。</li><li><code>w</code>，绑定函数 <code>eww-copy-page-url</code>，拷贝当前 URL 到 kill ring。</li><li><code>d</code>，绑定函数 <code>eww-download</code>，下载光标所在的 URL，下载的目录存在变量 <code>eww-download-directory</code> 中，默认为 ~/Downloads。</li><li><code>l</code>，绑定函数 <code>eww-back-url</code>，回退上一个 URL。</li><li><code>r</code>，绑定函数 <code>eww-forward-url</code>，前进到下一个 URL。</li><li><code>H</code>，绑定函数 <code>eww-list-histories</code>，显示浏览历史。</li><li><code>b</code>，绑定函数 <code>eww-add-bookmark</code>，加书签。</li><li><code>B</code>，绑定函数 <code>eww-list-bookmarks</code>，显示书签列表。</li><li><code>&amp;</code>，绑定函数 <code>eww-browse-with-external-browser</code>，使用外部浏览器打开当前浏览的 URL,外部浏览器由变量 <code>shr-external-browser</code> 决定。</li><li><code>v</code>，绑定函数 <code>eww-view-source</code>，查看页面源代码。</li><li><code>C</code>，绑定函数 <code>eww-cookie-list</code>，列示 Cookie。</li></ul><h1>emms</h1><p>Emacs 内置音频播放器，命令 <code>M-x emms</code>。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 解决 emms 不识别中文路径和包含中文信息的歌曲名</span><span class="token punctuation">(</span><span class="token keyword">setq</span> default-process-coding-system <span class="token punctuation">'(</span><span class="token car">utf-8-unix</span> <span class="token punctuation">.</span> chinese-gbk-dos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 使用 mplayer 作为后端播放器</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> emms  <span class="token lisp-property property">:commands</span> emms  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'emms-setup</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'emms-player-mplayer</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">emms-all</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> emms-player-list <span class="token punctuation">'(</span><span class="token car">emms-player-mplayer</span><span class="token punctuation">)</span>        emms-repeat-playlist <span class="token boolean">nil</span>        emms-playlist-buffer-name <span class="token string">"*Emms*"</span>        emms-source-file-default-directory <span class="token string">"F:\音乐"</span><span class="token punctuation">)</span>  <span class="token comment">;; 使用 general 按键绑定</span>  <span class="token punctuation">(</span><span class="token car">es/leader-key-def</span>    <span class="token string">"m"</span>  <span class="token punctuation">'(</span><span class="token lisp-property property">:ignore</span> <span class="token boolean">t</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"media"</span><span class="token punctuation">)</span>    <span class="token string">"mp"</span> <span class="token punctuation">'(</span><span class="token car">emms-pause</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"play / pause"</span><span class="token punctuation">)</span>    <span class="token string">"mf"</span> <span class="token punctuation">'(</span><span class="token car">emms-play-file</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"play file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>道德经</title>
      <link href="2021/dao-de-jing/"/>
      <url>2021/dao-de-jing/</url>
      
        <content type="html"><![CDATA[<h1>一</h1><blockquote><p>道可道，非常道；名可名，非常名。</p></blockquote><blockquote><p>无名天地之始，有名万物之母。</p></blockquote><blockquote><p>故常无欲，以观其妙；</p></blockquote><blockquote><p>常有欲，以观其徼。</p></blockquote><blockquote><p>此两者同出而异名，同谓之玄，玄之又玄，众妙之门。</p></blockquote><h1>二</h1><blockquote><p>天下皆知美之为美，斯恶已；</p></blockquote><blockquote><p>皆知善之为善，斯不善已。</p></blockquote><blockquote><p>故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。</p></blockquote><blockquote><p>是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不恃，功成而弗居。</p></blockquote><blockquote><p>夫唯弗居，是以不去。</p></blockquote><h1>三</h1><blockquote><p>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。</p></blockquote><blockquote><p>是以圣人之治，虚其心，实其腹；</p></blockquote><blockquote><p>弱其志，强其骨。</p></blockquote><blockquote><p>常使民无知无欲，使夫智者不敢为也。</p></blockquote><blockquote><p>为无为，则无不治。</p></blockquote><h1>四</h1><blockquote><p>道冲而用之或不盈，渊兮似万物之宗。</p></blockquote><blockquote><p>挫其锐，解其纷，和其光，同其尘。</p></blockquote><blockquote><p>湛兮似或存，吾不知谁之子，象帝之先。</p></blockquote><h1>五</h1><blockquote><p>天地不仁，以万物为刍狗。</p></blockquote><blockquote><p>圣人不仁，以百姓为刍狗。</p></blockquote><blockquote><p>天地之间，其犹橐龠乎？虚而不屈，动而愈出。</p></blockquote><blockquote><p>多言数穷，不如守中。</p></blockquote><h1>六</h1><blockquote><p>谷神不死，是谓玄牝，玄牝之门，是谓天地根。</p></blockquote><blockquote><p>绵绵若存，用之不勤。</p></blockquote><h1>七</h1><blockquote><p>天长地久。</p></blockquote><blockquote><p>天地所以能长且久者，以其不自生，故能长生。</p></blockquote><blockquote><p>是以圣人后其身而身先，外其身而身存。</p></blockquote><blockquote><p>非以其无私邪？故能成其私。</p></blockquote><h1>八</h1><blockquote><p>上善若水。</p></blockquote><blockquote><p>水善利万物而不争，处众人之所恶，故几于道。</p></blockquote><blockquote><p>居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。</p></blockquote><blockquote><p>夫唯不争，故无尤。</p></blockquote><h1>九</h1><blockquote><p>持而盈之，不如其已。</p></blockquote><blockquote><p>揣而锐之，不可长保。</p></blockquote><blockquote><p>金玉满堂，莫之能守。</p></blockquote><blockquote><p>富贵而骄，自遗其咎。</p></blockquote><blockquote><p>功遂身退，天之道。</p></blockquote><h1>十</h1><blockquote><p>载营魄抱一，能无离乎？</p></blockquote><blockquote><p>专气致柔，能婴儿乎？</p></blockquote><blockquote><p>涤除玄鉴，能无疵乎？</p></blockquote><blockquote><p>爱民治国，能无知乎？</p></blockquote><blockquote><p>天门开阖，能无雌乎？</p></blockquote><blockquote><p>明白四达，能无为乎？</p></blockquote><blockquote><p>生之、畜之，生而不有，为而不恃，长而不宰，是谓玄德。</p></blockquote><h1>十一</h1><blockquote><p>三十辐共一毂，当其无，有车之用。</p></blockquote><blockquote><p>埏埴以为器，当其无，有器之用。</p></blockquote><blockquote><p>鑿户牗以为室，当其无，有室之用。</p></blockquote><blockquote><p>故有之以为利，无之以为用。</p></blockquote><h1>十二</h1><blockquote><p>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。</p></blockquote><blockquote><p>是以圣人为腹不为目，故去彼取此。</p></blockquote><h1>十三</h1><blockquote><p>宠辱若惊，贵大患若身。</p></blockquote><blockquote><p>何谓宠辱若惊？宠，为下得之若惊，失之若惊，是谓宠辱若惊。</p></blockquote><blockquote><p>何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾又何患！</p></blockquote><blockquote><p>故贵以身为天下，若可寄天下，爱以身为天下，若可托天下。</p></blockquote><h1>十四</h1><blockquote><p>视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。</p></blockquote><blockquote><p>此三者不可致诘，故混而为一。</p></blockquote><blockquote><p>其上不皎，其下不昧，盈盈不可名，复归于无物，是谓无状之状，无物之象。</p></blockquote><blockquote><p>是谓惚恍。</p></blockquote><blockquote><p>迎之不见其首，随之不见其后。</p></blockquote><blockquote><p>执古之道，以御今之有，能知古始，是谓道纪。</p></blockquote><h1>十五</h1><blockquote><p>古之善为士者，微妙玄通，深不可识。</p></blockquote><blockquote><p>夫唯不可识，故强为之容。</p></blockquote><blockquote><p>豫兮若冬涉川，犹兮若畏四邻，俨兮其若容，涣兮若冰之将释，敦兮其若樸，狂喜其若容，混兮其若拙。</p></blockquote><blockquote><p>孰能浊以静之徐清？孰能安以久动之徐生？保此道者不欲盈，夫唯不盈，故能蔽不新成。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Culture </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电路分析</title>
      <link href="2021/dian-lu-fen-xi/"/>
      <url>2021/dian-lu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1>串联直流电路</h1><p>两个元件，或支路，或电路只有一个公共点，且没有其它元件、支路、电路连接到这个点。</p><h2 id="基尔霍夫电压定理（KVL）">基尔霍夫电压定理（KVL）</h2><p>沿着一条闭合路径（或闭环），电位上升和电位下降的代数和为零。</p><p>$\sum_C V = 0$ ，式中 $\Sigma$ 表示总和， C 表示闭环， V 指电位下降或电位上升，代数和表示公式中的各项电压有加有减。</p><p>KVL 也可写成 $\sum_C V_开 = \sum_C V_降$ ，它揭示了沿着闭合电路，电位上升之和总是等于电位下降之和。</p><ol><li>KVL 不仅适用于直流电路，也适用于其它波形的电路，如交流电路、脉冲电路。对于解决复杂网络问题非常有效。</li><li>定律要求规定一个闭合路径。沿哪个闭合路径？是否总是沿着电流的方向？只要能返回到起始点，任何方向都可以。</li><li>电压极性。对于一个确定电压，当前进方由低电位到高电位则规定为正，由高电位到低电位为负</li></ol><h2 id="分压定律（VDR）">分压定律（VDR）</h2><p>在串联电路中，某个电阻上的电压等于总电压乘以该电阻值再除以串联电路的总阻值。</p><h2 id="其它">其它</h2><ol><li><strong>标称值</strong> 测量器具上标定的数值称为标称值。由于制造和测量精度不够以及环境等因素的影响，标称值并不一定等于它的真值或实际值。为此，在标出测量器具的标称值时，通常还要标出它的误差范围或准确度等级。</li><li><strong>电路</strong> 构成电流通路的元件组合。</li><li>电流方向决定电阻电压极性</li><li>串联电路中电流方向是电源的正极流出，负极流入</li><li>任何仪表接入电路都会影响电路</li><li>每个现实中的电源都有内阻，它与理想电压源串联</li></ol><h1>并联直流电路</h1><h2 id="并联电阻">并联电阻</h2><p>一般的，如果两个元件，或两个支路，或两个电路，它们有两个公共的连接点，称为并联电路</p><ol><li>总电导等于总电阻的倒数，单位为 <code>S</code></li><li>并联电路总电阻小于最小电阻阻值，若最小电阻阻值远远小于其它阻值，则最终总电阻非常接近最小电阻阻值</li><li>当电路有新电阻并入时，不管他们阻值有多大，总电阻都会减小</li><li>N 个相同阻值的电阻并联，总电阻为这个阻值的 N 分之一</li><li>两个电阻的并联，总阻值等于两个电阻的乘积除以它们的和</li><li>并联电阻换位后不影响总阻值</li></ol><h2 id="并联电路">并联电路</h2><ol><li>并联的任何元件电压都是相同的。</li><li>对单电源的并联电路，电源电流等于各个并联支路电流的和</li><li>电流总是寻找电阻最小的通路</li></ol><h2 id="功率分配">功率分配</h2><ol><li>对任何电阻电路，电源提供的功率都等于电阻消耗的功率之和 $P_E = P_R1 + P_R2$</li><li>电源提供的功率 $P_E = EI_s$，单位为瓦(W)</li><li>每个电阻的功率 $P_1 = V_1I_1 = I_1^2R_1 = \frac{V_1^2}{R_1}$</li><li>在并联电路里，电阻越大，吸收的功率越小</li></ol><h2 id="基尔霍夫电流定律">基尔霍夫电流定律</h2><p>流入和流出一个节点（或区域）的电流代数和为零</p><p>改述为：流入一个节点（或区域）的电流之和等于流出同一节点（或区域）的电流之和</p><p>$$\sum I_i = \sum I_o$$</p><ol><li>对于未知电流的方向，先电流假定一个方向，若根据假设计算的结果是负的，那么假定方向错误。</li></ol><h2 id="分流定律">分流定律</h2><p>对于两个相同的并联电阻，电流将会平均分配；对于不同的并联电阻，电阻越小，分配的电流越大；对于不同的并联电阻，电流将按照他们的阻值的倒数进行分配</p><h2 id="电压源并联">电压源并联</h2><p>电压源具有相同的电压时，它们才能并联在一起。</p><h2 id="开路和短路">开路和短路</h2><p>开路：两个分离的端子没有任何元件连接。开路处的端子之间可能存在电位差（电压），但电流总是零</p><p>短路：电路的两个端子直接连接，因而具有很小的电阻。一个短路处可以通过的电流是由电路决定的，但它的端子之间的电压总是零</p><p>开路时，串联的电阻可以看做阻值为零；短路时，并联的电阻可以看做阻值为无穷大。</p><h1>串并联直流电路</h1><p><strong>串并联结构</strong> 就是由串联的和并联的元件所形成的组合结构</p><p><strong>复杂网络结构</strong> 就是在该结构中存在既不是串联也不是并联的元件</p><h2 id="化简">化简</h2><ol><li>确定哪些元件是串联的或并联的</li><li>计算总电阻、计算电源电流和继续进行其他分析</li></ol><h2 id="合并">合并</h2><ol><li>花点时间从“总体”上研究一下所要分析的问题，并对你要用的所有方法在头脑中描绘出一个轮廓。这样为后面的工作节省时间和精力。</li><li>在对全部串并联结构进行分析之前，先对网络中的每个局部区域进行单独的分析。这通常可以简化网络，并能发现求解一个或多个未知量的直接方法。这样可以减少由于缺乏系统方法而产生的分析错误。</li><li>要尽可能频繁地重新画出化简后的网络，包括简化的支路和没有改动的未知量，以保持电路清楚，从而可以根据简化的网络从电源侧反推出未知量</li><li>当获得结果后，要根据电源和元件的参数，检查结果的合理性。如果结果看起来是不合理的，可以更换方法另行求解，或者检查原来的计算</li></ol><h2 id="分块法">分块法</h2><p>化简和合并方法可能不能直接使用，需要把元件分成组来考虑。对元件分组的方法称为分块法</p><ol><li>合理将元件分块</li><li>将每个方块化简为单一元件</li><li>将网络以一种比较熟悉的形式重新画出是非常重要的</li></ol><h2 id="分压器的有载和空载">分压器的有载和空载</h2><p>给一个系统加载，就是指给这个系统加入了某个元件或网络，从系统中获得了电流。电流越大，负载效应越大</p><p>一般来说，为使分压器有效工作，所加载负载电阻应该比分压器中的电阻大很多</p><h1>直流电路分析方法</h1><h2 id="电流源">电流源</h2><p><strong>对偶</strong> 如果一个元件的变量与另外一个元件的不同变量具有相同的特征，就说这两个元件是“对偶”的。</p><p>电流源通常被描述为电压源的对偶形式。</p><p>一般来说，电流源决定了它所在支路的电流方向和量值</p><p>进一步可说，电流源两端电压的量值和极性由它所供电的网络决定</p><h2 id="电源的等效变换">电源的等效变换</h2><p><strong>电压源</strong> 可等效变换为一个电压源串联一个电阻，E=IR（R 为串联等效电阻，I 为流过电压源的电流）</p><p><strong>电流源</strong> 可等效变换为一个电流源并联一个电阻，I=E/R（R 为并联等效电阻，E 为电流源两端电压）</p><p><strong>注</strong>：一个电流源和一个电压源之间的等效只是对它们的外部端子而言，它们内部特性可能是非常不同的</p><p>一个电源和它的等效电路将会在所加的任何负载上产生相同的电流</p><h2 id="电流源的并联">电流源的并联</h2><ol><li>端电压不同的电压源（理想的）不能并联的，违反基尔霍夫电压定律</li><li>电流值不同的电流源（理想的）不能够串联，违反基尔霍夫电流定律</li></ol><p>两个或多个电流源的并联可以由一个电流源替代，其替代的电流由一个方向电流之和与另外一个方向电流之和的差值决定。新的并联内阻等于所有并联电阻的总阻值。</p><h2 id="支路电流分析法">支路电流分析法</h2><p><strong>节点</strong> 就是两个或多个支路的交叉点，其中的支路可以是任意串联元件的组合。</p><ol><li>给电路中的每条支路都标上一个电流，电流的方向任意</li><li>根据假定的电流方向，标出每个电阻电压的极性</li><li>对电路中每个独立的闭合回路应用基尔霍夫电压定律。电路中网孔数量有多少个就应用多少次基尔霍夫电压定律</li><li>在最少个数的节点处应用基尔霍夫电流定律，并且包含网络的所有支路电流。最少个数就是电路中总节点的个数减一</li><li>根据得到的联立线性方程组，求解假定的支路电流</li></ol><p>计算结果中的负号表明实际电流的方向和假定电流的方向相反，但绝对值一致。</p><h2 id="网孔分析法（应用基尔霍夫电压定律）">网孔分析法（应用基尔霍夫电压定律）</h2><p>适用于那些已经将所有电流源转化为等效电压源的电路。</p><p>是 <strong>支路电流分析法</strong> 的延伸，不需要进行支路分析法的步骤 4</p><p>需要定义的电流称为<strong>网孔电流</strong>或<strong>回路电流</strong></p><p>分析一个电路所需要的电流的数量等于电路中<strong>窗口</strong>的数量</p><ol><li>对于电路中每个独立回路，按照顺时针方向指定一个唯一的电流</li><li>根据假定的回路电流方向，标出每个回路中每个电阻电压的极性</li><li>在每个闭合回路中按照顺时针方向应用基尔霍夫电压定律<ul><li>如果有两个或多个假定的回路电流流过一个电阻，那么这个电阻的总电流等于这些回路电流的代数和</li><li>电压源的极性不受假定回路电流的方向的影响</li></ul></li><li>求解得到的联立线性方程组，计算假定的回路电流</li></ol><h2 id="超级网孔">超级网孔</h2><p>电路中的电流源没有与之并联的电阻，使得我们不能够按照给定的步骤将电流源转换为电压源。</p><p>在每个独立回路中定义网孔电流，去除电流源（用等效的开路进行替代），并使用刚刚定义的网孔电流对电路中所有剩余的独立回路应用基尔霍夫电压定律。去除电流源后得到的包含两个或多个网孔电流的回路，称为<strong>超级网孔</strong>。最后，建立所选网孔电流与电流源之间的关系，计算出网孔电流。</p><h2 id="网孔分析法（格式化方法）">网孔分析法（格式化方法）</h2><p>适用于那些已经将所有电流源转化为等效电压源的电路。</p><p>一个公共项通常是任意一个电阻元件由另外的回路电流流过它所产生的。若感兴趣的回路电流和其它回路电流有多个公共元件的话，那么就可能由多个公共项。</p><ol><li>在每个独立回路中按照顺时针方向标注回路电流</li><li>所需方程的数量等于独立回路的数量。每个方程的第一列都是由该回路电流所流过<strong>电阻之和乘以这个回路电流</strong>。</li><li>考虑公共项，它们总是从第一列中减去。每一项都是公共电阻与流过该电阻的其它回路电流的乘积</li><li>等号右侧的那一列是所研究的回路电流所流过的电压源的代数和。若回路电流从电压源的负端流向正端（电位升），那么这些电压源前加正号；否则加负号。</li><li>求解所得联立方程组，计算待求回路电流</li></ol><h2 id="节点分析法（应用基尔霍夫电流定律）">节点分析法（应用基尔霍夫电流定律）</h2><p>这是一种直接计算电路中节点电压的方法，也就是电路中不同节点（支路汇集点）到地之间的电压。利用基尔霍夫电流定律。</p><p>习惯将地作为参考节点，并且把它的电位设为零。</p><p>对于一个含有 N 个节点的电路，通过设定其中一个节点作为参考点，我们就有（N-1）个节点的电压需要计算。换句话说，计算电路中所有节点电压所需的方程个数等于节点的总数减去 1</p><ol><li>确定电路中节点的数量</li><li>选择一个参考节点，并且给剩下的节点标上带有下标的电压值：V1， V2 等</li><li>除参考点外，对每个节点应用基尔霍夫电流定律。在每次应用定律时，假定所有未知电流都是离开节点的。每个节点都被看做是一个单独的个体，独立应用定律</li><li>求解所得到的方程，计算出节点电压</li></ol><h2 id="超级节点">超级节点</h2><p>电路中的电压源没有与之串联的电阻，使得我们不能够按照给定的步骤将电压源转换为电流源。</p><p>首先给电路中的每一个节点标注一个节点电压，包括每个独立电压源，就好像它们是电阻或者是电流源。然后想象着去除独立电压源，用短路进行代替，并且对电路中定义的结点应用基尔霍夫电流定律。用短路代替电压源后，短路线连接的两个节点称为超级节点。最后，建立节点间电压和电路中的独立电压源关系，并计算出节点电压。</p><h2 id="节点分析法（格式化方法）">节点分析法（格式化方法）</h2><p>适用于那些已经将所有电压源转化为等效电流源的电路。</p><ol><li>选择一个参考点，并且将带下标的节点电压标在剩余电路的（N-1）个节点处</li><li>求解所需的方程数等于节点电压的数量，即 N-1 个。每个方程的第一列都是由与所研究节点相连的电导之和，再乘以该节点的节点电压来得到。</li><li>考虑公共项，这些项通常是从第一列中减去。每个公共项都是公共电导值与另外节点电压的乘积</li><li>等号右侧是与该节点相连的电流源代数和。若电源电流流入该节点，那么电流源前面是正号，否则就是负号</li><li>求解所得到的联立方程组，计算待求电压</li></ol>]]></content>
      
      
      <categories>
          
          <category> ProfessionalCourse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电路分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax</title>
      <link href="2021/mathjax/"/>
      <url>2021/mathjax/</url>
      
        <content type="html"><![CDATA[<p>MathJax 是一款运行在浏览器中的开源数学符号渲染引擎。</p><p>hexo 开启 mathjax 只需在博客文章的开头加入 <code>mathjax: true</code>。</p><h1>公式排版</h1><p>公式排版有两种方式。</p><ul><li><p>inline 表示公式嵌入到文本段中。默认的 inline 公式分隔符为 <code>(...)</code> 和<code>$...$</code>。比如，<code>$y = x + 2$</code> 显示为 $y = x + 2$ 是 inline 公式。</p></li><li><p>displayed 表示公式独自成为一个段落。默认的 displayed 公式分隔符为<code>$$...$$</code>。比如，<code>$$y = x + 2$$</code> 显示为 $$y = x + 2$$ 是 displayed 公式。</p></li></ul><h1>希腊字母</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">大写</th><th style="text-align:center">Tex</th><th style="text-align:center">小写</th><th style="text-align:center">Tex</th></tr></thead><tbody><tr><td style="text-align:center">alpha</td><td style="text-align:center">A</td><td style="text-align:center">A</td><td style="text-align:center">α</td><td style="text-align:center">\alpha</td></tr><tr><td style="text-align:center">beta</td><td style="text-align:center">B</td><td style="text-align:center">B</td><td style="text-align:center">β</td><td style="text-align:center">\beta</td></tr><tr><td style="text-align:center">gamma</td><td style="text-align:center">Γ</td><td style="text-align:center">\Gamma</td><td style="text-align:center">γ</td><td style="text-align:center">\gamma</td></tr><tr><td style="text-align:center">delta</td><td style="text-align:center">Δ</td><td style="text-align:center">\Delta</td><td style="text-align:center">δ</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">epsilon</td><td style="text-align:center">E</td><td style="text-align:center">E</td><td style="text-align:center">ϵ</td><td style="text-align:center">\epsilon</td></tr><tr><td style="text-align:center">zeta</td><td style="text-align:center">Z</td><td style="text-align:center">Z</td><td style="text-align:center">ζ</td><td style="text-align:center">\zeta</td></tr><tr><td style="text-align:center">eta</td><td style="text-align:center">H</td><td style="text-align:center">H</td><td style="text-align:center">η</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">theta</td><td style="text-align:center">Θ</td><td style="text-align:center">\Theta</td><td style="text-align:center">θ</td><td style="text-align:center">\theta</td></tr><tr><td style="text-align:center">iota</td><td style="text-align:center">I</td><td style="text-align:center">I</td><td style="text-align:center">ι</td><td style="text-align:center">\iota</td></tr><tr><td style="text-align:center">kappa</td><td style="text-align:center">K</td><td style="text-align:center">K</td><td style="text-align:center">κ</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">lambda</td><td style="text-align:center">Λ</td><td style="text-align:center">\Lambda</td><td style="text-align:center">λ</td><td style="text-align:center">\lambda</td></tr><tr><td style="text-align:center">mu</td><td style="text-align:center">M</td><td style="text-align:center">M</td><td style="text-align:center">μ</td><td style="text-align:center">\mu</td></tr><tr><td style="text-align:center">nu</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">ν</td><td style="text-align:center">\nu</td></tr><tr><td style="text-align:center">xi</td><td style="text-align:center">Ξ</td><td style="text-align:center">\Xi</td><td style="text-align:center">ξ</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">omicron</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">ο</td><td style="text-align:center">\omicron</td></tr><tr><td style="text-align:center">pi</td><td style="text-align:center">Π</td><td style="text-align:center">\Pi</td><td style="text-align:center">π</td><td style="text-align:center">\pi</td></tr><tr><td style="text-align:center">rho</td><td style="text-align:center">P</td><td style="text-align:center">P</td><td style="text-align:center">ρ</td><td style="text-align:center">\rho</td></tr><tr><td style="text-align:center">sigma</td><td style="text-align:center">Σ</td><td style="text-align:center">\Sigma</td><td style="text-align:center">σ</td><td style="text-align:center">\sigma</td></tr><tr><td style="text-align:center">tau</td><td style="text-align:center">T</td><td style="text-align:center">T</td><td style="text-align:center">τ</td><td style="text-align:center">\tau</td></tr><tr><td style="text-align:center">upsilon</td><td style="text-align:center">Υ</td><td style="text-align:center">\Upsilon</td><td style="text-align:center">υ</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">phi</td><td style="text-align:center">Φ</td><td style="text-align:center">\Phi</td><td style="text-align:center">ϕ</td><td style="text-align:center">\phi</td></tr><tr><td style="text-align:center">chi</td><td style="text-align:center">X</td><td style="text-align:center">X</td><td style="text-align:center">χ</td><td style="text-align:center">\chi</td></tr><tr><td style="text-align:center">psi</td><td style="text-align:center">Ψ</td><td style="text-align:center">\Psi</td><td style="text-align:center">ψ</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">omega</td><td style="text-align:center">Ω</td><td style="text-align:center">\Omega</td><td style="text-align:center">ω</td><td style="text-align:center">\omega</td></tr></tbody></table><h1>上标与下标</h1><ul><li>上标 <code>^</code>。如，<code>$x^y$</code> 效果为 $x^y$。</li><li>下标 <code>_</code>。如，<code>$x_i$</code> 效果为 $x_i$。</li></ul><p>默认情况下，上下标符号仅对下一个组起作用。一个 <strong>组</strong> 即 <strong>单个字符</strong> 或者 <strong>使用{…}包裹起来的内容</strong>。例如，若使用 <code>$10^10$</code> 得到 $10 ^ 10$，正确方式为<code>$10^&#123;10&#125;$</code> 得到 $10^{10}$。</p><h1>括号</h1><ul><li>小括号和方括号。直接使用 <code>()</code> 和 <code>[]</code> 即可。如，<code>$(1+1)[2*2]$</code> 效果为 $(1+1)[2*2]$。</li><li>大括号。大括号 <code>&#123;&#125;</code> 被用来分组，需使用 <code>\&#123;...\&#125;</code> 表示大括号，也可以使用<code>\lbrace</code> 和 <code>\rbrace</code> 来表示。例如，<code>$\&#123;a*b\&#125;$</code> 效果为 $\lbrace a*b \rbrace$。如果不行尝试 <code>$\\&#123;a*b\\&#125;$</code>。</li><li>尖括号。使用 <code>\langle</code> 和 <code>\rangle</code> 表示左右尖括号。如，<code>$\langle x \rangle$</code> 效果为 $\langle x \rangle$。</li><li>上取整。使用 <code>\lceil</code> 和 <code>\rceil</code> 表示。如，<code>$\lceil x \rceil$</code> 效果为 $\lceil x \rceil$。</li><li>下取整。使用 <code>\lfloor</code> 和 <code>\rfloor</code> 表示。如，<code>$\lfloor x \rfloor$</code> 效果为 $\lfloor x \rfloor$。</li><li>自适应调整括号大小。使用 <code>\left(</code> 和 <code>\right)</code> 表示。如，<code>$\left(\frac&#123;x&#125;&#123;y&#125;\right)$</code> 效果为 $\left(\frac{x}{y}\right)$。</li></ul><h1>求和/积分</h1><ul><li><code>\sum</code> 表示求和符号，其上下标表示积分的上下限。如，<code>$\sum_1^n$</code> 效果为 $\sum_1^n$</li><li><code>\int</code> 表示积分符号，其上下标表示积分的上下限。如， <code>$\int_1^\infty$</code> 效果为 $\int_1^\infty$。</li></ul><p>类似的还有，</p><ul><li><code>\prod</code> 效果为 $\prod$。</li><li><code>\bigcup</code> 效果为 $\bigcup$。</li><li><code>\bigcap</code> 效果为 $\bigcap$。</li><li><code>\iint</code> 效果为 $\iint$。</li></ul><h1>分式/根式</h1><ul><li><p><code>\frac</code> 表示分式。如，<code>$\frac ab$</code> 效果为 $\frac ab$。若分子或分母不是单个字符，使用 <code>&#123;...&#125;</code> 分组，如，<code>$\frac &#123;ab&#125;&#123;cd&#125;$</code> 效果为 $\frac {ab}{cd}$。</p></li><li><p><code>\over</code> 用来分割一个组的前后两部分。如，<code>$&#123;a+1 \over b+1&#125;$</code> 效果为 ${a+1 \over b+1}$。</p></li><li><p><code>\sqrt</code> 表示根式。如，<code>$\sqrt[4]&#123;\frac xy&#125;$</code> 效果为 $\sqrt[4]{\frac xy}$。</p></li></ul><h1>箭头符号</h1><ul><li><code>\uparrow</code> 效果为 $\uparrow$。</li><li><code>\downarrow</code> 效果为  $\downarrow$。</li><li><code>\Uparrow</code> 效果为  $\Uparrow$。</li><li><code>\Downarrow</code> 效果为  $\Downarrow$。</li><li><code>\updownarrow</code> 效果为  $\updownarrow$。</li><li><code>\Updownarrow</code> 效果为  $\Updownarrow$。</li><li><code>\rightarrow</code> 效果为  $\rightarrow$。</li><li><code>\leftarrow</code> 效果为  $\leftarrow$。</li><li><code>\Rightarrow</code> 效果为  $\Rightarrow$。</li><li><code>\Leftarrow</code> 效果为  $\Leftarrow$。</li><li><code>\leftrightarrow</code> 效果为  $\leftrightarrow$。</li><li><code>\Leftrightarrow</code> 效果为  $\Leftrightarrow$。</li><li><code>\longrightarrow</code> 效果为  $\longrightarrow$。</li><li><code>\longleftarrow</code> 效果为  $\longleftarrow$。</li><li><code>\Longrightarrow</code> 效果为  $\Longrightarrow$。</li><li><code>\Longleftarrow</code> 效果为  $\Longleftarrow$。</li><li><code>\longleftrightarrow</code> 效果为  $\longleftrightarrow$。</li><li><code>\Longleftrightarrow</code> 效果为  $\Longleftrightarrow$。</li></ul><h1>特殊函数和符号</h1><ul><li>常见三角函数。如，<code>$sin x$</code> 效果为 $sin x$。还有，$arctan x$、$lim_{1 \rightarrow \infty}$。</li><li>比较运算符，<code>\lt</code>, <code>\gt</code>, <code>\le</code>, <code>\ge</code>, <code>\neq</code>。可以在这些运算符前面加上 <code>\not</code>，如，<code>$\not\lt$</code> 效果为 $\not\lt$。</li><li>加减乘除，<code>\times</code>, <code>\div</code>, <code>\pm</code>, <code>\mp</code>, <code>\cdot</code>，效果分别为 $\times$, $\div$, $\pm$, $\mp$, $\cdot$。</li><li>集合关系与运算，<code>\cup</code>, <code>\cap</code>, <code>\setminus</code>, <code>\subset</code>, <code>\subsetneq</code>, <code>\supset</code>, <code>\in</code>,<code>\notin</code>, <code>\emptyset</code>, <code>\varnothing</code>，效果分别为 $\cup$, $\cap$, $\setminus$,$\subset$, $\subsetneq$, $\supset$, $\in$, $\notin$, $\emptyset$, $\varnothing$。</li><li>排列，<code>\binom</code> 或 <code>\choose</code>。如，<code>$\binom&#123;n+1&#125;&#123;2k&#125;$</code> 效果为 $\binom{n+1}{2k}$，<code>$&#123;n+1 \choose 2k&#125;$</code> 效果为 ${n+1 \choose 2k}$。</li><li>箭头，<code>\to</code>, <code>\mapsto</code>，效果分别为 $\to$, $\mapsto$。</li><li>逻辑运算符，<code>\land</code>, <code>\lor</code>, <code>\lnot</code>, <code>\forall</code>, <code>\exists</code>, <code>\top</code>, <code>\bot</code>,<code>\vdash</code>, <code>\vDash</code>。效果分别为，$\land$, $\lor$, $\lnot$, $\forall$,$\exists$, $\top$, $\bot$, $\vdash$, $\vDash$。</li><li><code>\star</code>, <code>\ast</code>, <code>\oplus</code>, <code>\circ</code>, <code>\bullet</code>。效果为，$\star$, $\ast$, $\oplus$, $\bullet$。</li><li><code>\approx</code>, <code>\sim</code>, <code>\cong</code>, <code>\equiv</code>, <code>\prec</code>。效果为，$\approx$, $\sim$,$\cong$, $\equiv$, $\prec$。</li><li><code>\infty</code>, <code>\aleph_o</code>, <code>\nabla</code>, <code>\partial</code>, <code>\Im</code>, <code>\Re</code>。效果为，$\infty$,$\aleph_o$, $\nabla$, $\partial$, $\Im$, $\Re$。</li><li>模运算 <code>\pmod</code>，如，<code>$a \equiv b \pmod n$</code> 效果为 $a \equiv b \pmod n$。</li><li><code>\ldots</code>，和 <code>\cdots</code> 区别在于点的位置不同，ldots 稍低，cdots 居中。<code>$\ldots$</code>效果为 $\ldots$，<code>$\cdots$</code> 效果为 $\cdots$。</li><li>一些希腊字母具有变体形式，如，<code>\epsilon</code> 变体为 <code>\varepsilon</code>，效果分别为 $\epsilon$, $\varepsilon$。</li></ul><h1>公式内部空格</h1><p>MathJax 的公式内部空格显示如，a…b 与 a…b( . 表示空格)都会显示为 ab。通过在 ab 间加入 <code>\ </code> 增加些许间隙，如 <code>$a\ b$</code> 效果为 $a\ b$。<code>\quad</code> 与 <code>\qquad</code>会增加更大的间隙，如 <code>$a \qquad b$</code> 效果为 $a \qquad b$。</p><h1>顶部符号</h1><ul><li>对于单字符，<code>\hat</code> 效果为 $\hat x$。</li><li>低于多字符，<code>\widehat</code> 效果为 $\widehat {xy}$。</li><li>类似的还有 <code>\overline</code>, <code>\vec</code>, <code>\overrightarrow</code>, <code>\dot</code>, <code>\ddot</code>。效果分别为$\overline {xyz}$, $\vec a$, $\overrightarrow x$, $\dot x$, $\ddot x$。</li></ul><h1>字体</h1><ul><li><code>\mathbb</code> 或 <code>\Bbb</code> 显示黑板粗体字，常用于表示实数、整数、有理数、复数。如，<code>$\mathbb &#123;ABC&#125;$</code> 效果为 $\mathbb {ABC}$。</li><li><code>\mathbf</code> 显示黑体字。如，<code>$\mathbf &#123;ABC&#125;$</code> 效果为 $\mathbf {ABC}$。</li><li><code>\mathtt</code> 显示打印机字体。如，$\mathtt {ABC}$。</li><li><code>\mathrm</code> 显示罗马字体。如，$\mathrm {ABC}$。</li><li><code>\mathscr</code> 显示手写体。如，$\mathscr {ABC}$。</li></ul><h1>转义</h1><p>使用 <code>\</code> 转义特殊字符为原本含义。如，<code>\$</code> 表示美元符，<code>\_</code> 表示下划线。</p><h1>矩阵</h1><p>使用 <code>$$\begin&#123;matrix&#125;...\end&#123;matrix&#125;$$</code> 表示矩阵，矩阵的行用 <code>\\\</code> 分隔，列用<code>&amp;</code> 分隔。如，$$\begin{matrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{matrix}$$</p><ul><li>加括号，替换 <code>\begin&#123;matrix&#125;...\end&#123;matrix&#125;</code> 中的 matrix 为 <code>pmatrix</code>,<code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code>。</li></ul><p><code>pmatrix</code> 效果为 $$\begin{pmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{pmatrix}$$</p><p><code>bmatrix</code> 效果为 $$\begin{bmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{bmatrix}$$</p><p><code>Bmatrix</code> 效果为 $$\begin{Bmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{Bmatrix}$$</p><p><code>vmatrix</code> 效果为 $$\begin{vmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{vmatrix}$$</p><p><code>Vmatrix</code> 效果为 $$\begin{Vmatrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \end{Vmatrix}$$</p><ul><li>省略元素，使用 <code>\cdots</code>, <code>\ddots</code>, <code>\vdots</code>，效果分别为 $\cdots$, $\ddots$, $\vdots$。</li><li>增广矩阵，使用 <code>array</code> 实现。如，<code>$$ \left[ \begin&#123;array&#125;&#123;cc|c&#125; 1 &amp; 2 &amp; 3 \\\ 4 &amp; 5 &amp; 6 \end&#123;array&#125; \right] $$</code> 效果为$$ \left[ \begin{array}{cc|c} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \end{array} \right] $$</li></ul><h1>公式等号对齐</h1><p>使用 <code>\begin&#123;align&#125;...\end&#123;align&#125;</code>，其中使用 <code>&amp;</code> 指示需要对齐的位置。</p><p>\begin{align} \sqrt{37} &amp; = \sqrt{\frac{73^2-1}{12^2}} \\ &amp; = \sqrt{\frac{73^2}{12^2} \cdot \frac{73^2-1}{73^2}} \\ &amp; = \frac{73}{12} \sqrt{1 - \frac{1}{73^2}} \\ &amp; \approx \frac{73}{12} \left( 1 - \frac{1}{2 \cdot 73^2} \right) \end{align}</p><h1>分类表达式</h1><p>使用 <code>\begin&#123;cases&#125;...\end&#123;cases&#125;</code>，其中使用 <code>\</code> 来分类，使用 <code>&amp;</code> 指示需要对齐的位置。如，$$f(n) = \begin{cases} n/2, &amp; \text{if $n$ is even} \\ 3n+1, &amp; \text{if $n$ is odd} \end{cases}$$</p><h1>参考</h1><ol><li><a href="https://www.lemonpig.cn/lemonpig/mathjax-study.html">https://www.lemonpig.cn/lemonpig/mathjax-study.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin</title>
      <link href="2021/kotlin/"/>
      <url>2021/kotlin/</url>
      
        <content type="html"><![CDATA[<h1>变量</h1><ul><li>创建变量必须要有 <strong>变量名、变量类型、是否可被重新赋值</strong></li><li>若不显式声明变量类型，则变量类型由编译器推断</li><li>变量存储的内容是一个指向 object 对象的 <strong>引用</strong>，在 kotlin 中任何类型变量都是一个 object 对象</li><li>val 定义的变量不能再次赋值，变量存储的引用在生命周期内永不改变</li><li>var 定义的变量可以重新赋值，即可以改变此变量所引用的 object</li><li>kotlin 基本类型 <code>Byte, Short, Int, Long, Float, Double, Boolean, Char and String</code></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 变量创建及赋值，编译器推断 num 为 Int 类型</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">// 显式定义 name 变量，类型为 String</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token comment">// 错误，类型不匹配</span><span class="token keyword">var</span> number<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">5.5</span><span class="token comment">// 溢出截断</span><span class="token keyword">var</span> numLong<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">12345678900</span><span class="token comment">// numInt 值为 3755744308</span><span class="token keyword">var</span> numInt<span class="token operator">:</span> Int <span class="token operator">=</span> numLong<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 数组定义，编译器推断类型为 Int</span><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 数组元素访问，值为 2</span>myArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// 数组大小</span>myArray<span class="token punctuation">.</span>size<span class="token comment">//显式声明数组,类型为 Long</span><span class="token keyword">var</span> myArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 错误，val 定义的变量不管是啥都不能重新指定</span><span class="token keyword">val</span> valArray <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">)</span>    valArray <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">,</span> <span class="token string">"ef"</span><span class="token punctuation">)</span><span class="token comment">// 虽然 valArray 不能重新指定，但它的元素 valArray[0] 可以被修改</span>valArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>给显式声明的变量赋值，类型必须匹配</li><li>不能直接给类型不匹配的变量赋值，但可以使用 object 方法，如 toInt()。数字类型都支持这些方法：<code>toByte(), toShort(), toInt(), toLong(), toFloat() and toDouble()</code></li><li>在不同类型之间转换时注意类型所表示的范围，防止溢出被截断。</li><li>创建数组使用 arryOf()，编译器会推断类型，显式定义类型使用 Array&lt;类型&gt;</li><li>使用 val 和 var 定义的数组变量，和普通变量意义一样，对于 val 来说，虽然不能重新指定数组，但数组的元素可以更新</li></ol><h1>函数</h1><ol><li>函数使用 <code>return</code> 语句返回时必须明确函数返回值类型。编译器不会去 infer</li><li>函数若没有返回值则可以忽略返回值类型，或定义为 <code>Unit</code></li><li>函数入参默认限定 <code>local val</code>，所以不能在函数体中直接修改</li><li>函数返回值只能返回一个值，若要返回多个值可以使用 Array 数组</li><li>如果定义的函数只由一个表达式组成，则可以移除花括号和 <code>return</code> 返回值</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 函数体由一个表达式组成</span><span class="token keyword">fun</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> max <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b  <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token comment">// 等价于，if 作为表达式时必须要有 else 分支</span><span class="token keyword">fun</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b<span class="token comment">// 形参不能直接修改，默认是 local val</span><span class="token keyword">fun</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>  x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>     <span class="token comment">// 错误</span>  <span class="token keyword">return</span> x<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-循环">for 循环</h2><ol><li><code>..</code> 用于指定范围，如，<code>1..10</code>，指的是 1 到 10 范围</li><li><code>until</code> 用于指定范围，但不包括右侧数值，如，<code>1 until 100</code>，指定的是 1 到 99 而不包括 100</li><li><code>downTo</code> 用于逆序指定范围，如，<code>15 downTo 1</code>，指的是 15 到 1 逆序</li><li><code>step</code> 用于遍历范围时，一次步进，<code>.., until, downTo</code> 默认是 1，<code>1..100 step 2</code> 设定步进为 2</li><li>如果 for 循环只有一个语句，可以忽略花括号</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// in 表示遍历 范围 1..10，每次步进为 1， x 值为 1,2,3...,10</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//步进 2</span><span class="token comment">// 遍历数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> myArray<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$item</span> is an item in the array"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token keyword">in</span> myArray<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index <span class="token interpolation variable">$index</span> has item <span class="token interpolation variable">$item</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它">其它</h2><ol><li><code>readLine</code> 从终端读取用户输入，若输入为空则返回 <code>null</code></li><li>kotlin 有转换字符串大小写函数，toLowerCase， toUpperCase 和 capitalize。<code>mystring.capitalize()</code></li><li>随机数产生函数 Math.random()</li></ol><h1>类</h1><h2 id="class">class</h2><p>kotlin 允许我们定义自己的类（定义我们自己的数据类型），它是 object 的模板。一个类可以创建任意多个 objects。</p><ol><li>由关键字 <code>class</code> 定义一个类</li><li>类包含属性和方法，属性变量是类的局部变量</li><li>使用 <code>.</code> 操作符访问对象的属性和方法</li><li>当初始化一个 object 时，首先执行构造函数初始化该对象。初始化方式非常灵活，既可以在构造函数参数中使用 <code>val</code> 和 <code>var</code> 定义属性，也可以在构造函数外类体中定义属性。当构造函数初始化完成后，继续按顺序初始化构造函数外类体中的属性和 <code>init &#123;&#125;</code> 代码块。</li><li>属性必须在使用前<strong>初始化</strong></li><li>可使用 <code>getters</code> 和 <code>setters</code> 访问和设置属性，若没有显式设置，编译器会为每个属性设置默认的 <code>getter</code> 和 <code>setter</code></li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 构造函数参数中定义属性</span><span class="token keyword">class</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> weight_param<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构造函数外类体中定义属性</span><span class="token keyword">class</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> weight_param<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> weight <span class="token operator">=</span> weight_param     <span class="token comment">// 属性，此类有两个属性，name 和 weight</span><span class="token punctuation">&#125;</span><span class="token comment">// init 代码初始化</span><span class="token keyword">class</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> weight_param<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先初始化构造函数，属性 name 被初始化</span>  <span class="token keyword">var</span> weight <span class="token operator">=</span> weight_param                         <span class="token comment">// 按顺序初始化属性 weight</span>  <span class="token keyword">init</span> <span class="token punctuation">&#123;</span>                                            <span class="token comment">// 按顺序初始化 init 代码块</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog <span class="token interpolation variable">$name</span> has been created, weight is <span class="token interpolation variable">$weight</span>"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// getter 和 setter</span><span class="token keyword">var</span> weight <span class="token operator">=</span> weight_param    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// set 参数一般就是 value</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> field <span class="token operator">=</span> value    <span class="token comment">// field 是 set 的一个字段，不要修改</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 注意 weightInKgs 是 val， 它由 weight 改变</span><span class="token keyword">val</span> weightInKgs<span class="token operator">:</span> Double    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> weight <span class="token operator">/</span> <span class="token number">2.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="superclass-subclass">superclass &amp; subclass</h2><ol><li>类默认是不能继承的 <code>final</code>，需要显式声明 <code>open</code>。若要属性和方法可被重写，也需要显式声明 <code>open</code></li><li>在初始化 subclass 时，先会初始化 superclass，执行 superclass 的构造函数。若构造函数中属性使用 val 定义，若要在子类中修改必须使用 override 方式；若使用 var 定义，则须在子类的 init {} 代码块中修改即可。</li><li>除了在初始化时 override 属性，还可以通过 override 一个属性的 getter 和 setter 方法；在 superclass 中以 val 定义的属性，可以在 subclass  中以 var 方式 override，反之在超类中以 var 定义的属性则不行；当在 subclass 中 override 一个 superclass 的属性时，必须类型匹配，或是超类的 subtype。</li><li>override 方法时，必须保证和 superclass 中的方法参数类型匹配，返回值类型必须兼容：返回相同类型或 subclass type</li><li>override 的属性和方法，都保持 open，可以声明 final 禁止 override</li><li>subclass 可以定义 superclass 中没有的属性和方法</li><li>只要能够使用 superclass 的地方，就能够使用其 subclass</li><li>多态(polymorphism) 允许不同子类对同一个方法有不同的实现</li><li>继承保证了所有子类都具有超类中定义的属性和方法</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 声明一个超级类，其构造函数定义了两个属性</span><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">val</span> make<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> model<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承，subclass 的构造函数必须定义两个参数，用于初始化 superclass Car 的属性</span><span class="token keyword">class</span> <span class="token function">ConvertibleCar</span><span class="token punctuation">(</span>make_param<span class="token operator">:</span> String<span class="token punctuation">,</span> model_param<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Car</span><span class="token punctuation">(</span>make_param<span class="token punctuation">,</span> model_param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化时重写属性和方法</span><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Car</span><span class="token punctuation">(</span>make_param<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> model<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">open</span> <span class="token keyword">val</span> make <span class="token operator">=</span> make_param<span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token function">ConvertibleCar</span><span class="token punctuation">(</span>make_param<span class="token operator">:</span> String<span class="token punctuation">,</span> model_param<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Car</span><span class="token punctuation">(</span>make_param<span class="token punctuation">,</span> model_param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> make <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化时子类修改超类属性</span><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Car</span><span class="token punctuation">(</span>make_param<span class="token operator">:</span> String<span class="token punctuation">,</span> model_param<span class="token operator">:</span>String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">open</span> <span class="token keyword">val</span> make <span class="token operator">=</span> make_param  <span class="token keyword">var</span> model <span class="token operator">=</span> model_param<span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token function">ConvertibleCar</span><span class="token punctuation">(</span>make_param<span class="token operator">:</span> String<span class="token punctuation">,</span> model_param<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Car</span><span class="token punctuation">(</span>make_param<span class="token punctuation">,</span> model_param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> make <span class="token operator">=</span> <span class="token string">"A"</span>    <span class="token comment">// override 修改 val 定义属性</span>  <span class="token keyword">init</span> <span class="token punctuation">&#123;</span>    model <span class="token operator">=</span> <span class="token string">"a"</span>             <span class="token comment">// 在 init 代码块中修改 superclass model</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 只要能够使用 superclass 的地方，就能够使用其 subclass</span><span class="token keyword">val</span> car<span class="token operator">:</span> Car <span class="token operator">=</span> <span class="token function">ConventibleCar</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment">// car 虽然是 Car 类型，但编译器知道它底层是 ConventibleCar，所以 car.model 是 ConventibleCar 重写的值</span><span class="token keyword">val</span> model <span class="token operator">=</span> car<span class="token punctuation">.</span>model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>可使用 IS-A 测试一个类是否是超类的子类，例如，X 是 Y 的子类，X 是 Y 必须有意义。</li><li>IS-A 是一个单向测试</li></ol><h2 id="Abstract-Interface">Abstract &amp; Interface</h2><p>类可以分为三种，concrete, abstract 和 interface，具体区分就是 concrete 完完整整实现所有属性和方法，abstract 只实现部分属性和方法，interface 可能实现部分方法，但不会实现属性。前二者具有 state，interface 则无 state</p><ol><li>抽象类<strong>不能被实例化</strong>，它可以有抽象和非抽象的属性和方法</li><li>任何类，只要包含抽象属性和方法，那么它必须被声明为抽象类</li><li>通过 override 实现抽象类的 abstract 属性和方法重写</li><li>所有的 abstract 属性和方法，必须在 concrete subclass 重新 override 实现</li><li>interface 可以有抽象和非抽象方法</li><li>interface 没有构造函数，它可以有 abstract 属性，或者属性可以有 getters 和 setters，但是 abstract 属性不能被初始化，意味着 setters 不能访问默认 field 字段</li><li>一个类可以实现多个 interface，但只能继承一个 class</li><li>子类访问超类或接口（假设为 A）的函数 <code>super&lt;A&gt;.function</code></li><li>可以使用 <code>is</code> 操作符判断一个存储对象的变量存储的类型</li><li>当编译器可以保证底层对象在类型检查和使用之间不会改变时， <code>is</code> 运算符会执行智能转换。</li><li><code>as</code> 操作符可以显式转换类型</li></ol><h1>data class</h1><ol><li>kotlin 中所有的类都直接或间接继承 Any，Any 类实现了三个方法 <code>equals</code>, <code>hashCode</code>, <code>toString</code>，所有的类都是 Any 的子类，三个方法可被 override。</li><li>比较操作符 <code>==</code> 是由函数 <code>equals</code> 实现，默认情况，如果两个底层对象一致一致，它返回 <code>true</code>，若是不同的底层对象，返回 <code>false</code></li><li>比较操作符 <code>===</code> 允许你检查两个变量是否指向相同的底层对象，而忽略底层对象类型</li></ol><hr><ol><li>data 类允许你创建一个主要用于存储数据的对象。编译器会重写 data 类的 <code>eauqls</code>, <code>hashCode</code>, <code>toString</code> 方法，并且新增 <code>copy</code> 和 <code>componetN</code> 方法</li><li>data 类的 <code>equals</code> 方法检查两个 data 对象的构造函数中定义的属性是否一致，若一致则返回 true</li><li><code>copy</code> 允许你创建一个 data 对象的新拷贝，主要用于改变一些属性（属性定义使用 val），源对象保持不变</li><li><code>componentN</code> 允许你解构 data 对象的属性，component1 表示按照在构造函数定义属性的顺序，依次类推 component2</li><li>编译器只识别在 data 对象构造函数中定义的属性，类体中定义的属性会被忽略</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 定义一个 data 类，它有两个属性，属性必须定义为 val</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Recipe</span><span class="token punctuation">(</span><span class="token keyword">val</span> title<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> isVegetarian<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果没有类体，则可以忽略花括号</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建 data class 对象</span><span class="token keyword">val</span> r<span class="token operator">=</span> <span class="token function">Recipe</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 使用 componentN 解构属性, component1 是 title, component2 是 isVegetarian</span><span class="token keyword">val</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> isVegetarian<span class="token punctuation">)</span> <span class="token operator">=</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ol><li>构造函数和函数允许参数带有默认值，传参时可以把形参名字带上</li><li>类可以有次构造函数</li><li>函数重载，若函数名称一样，一个重载函数必须有不同的参数（参数类型或数量不同），但或许有不同的返回值</li></ol><h2 id="data-class-规则">data class 规则</h2><ol><li>必须有主构造函数</li><li>主构造函数必须定义一个或多个参数</li><li>每个参数必须是加 val 或 var</li><li>data class 不能 open 或 abstract</li></ol><h1>nullable 和 exceptions</h1><h2 id="nullable">nullable</h2><ol><li>若将 null 赋值给一个变量，那么那个变量将不会引用任何对象，即变量虽然存在，但不会指向任何</li><li>除了基本（base）类型外，可空（nullable）类型可保持一个 null 值。定义可空变量时只需在定义变量时在它的类型后面加 <code>?</code>，之间不能有空格</li><li>若要访问可空类型变量的属性或方法，必须先检查变量是否为空</li><li>若编译器不能保证在检查变量是否为空到使用变量之间变量的值不会改变，你必须使用 safe call 操作符 <code>?.</code> 来访问属性和方法</li><li>可以串联使用 <code>?.</code></li><li>若变量不为空，则可以使用 <code>?.let &#123;&#125;</code> 操作执行变量不为空时语句，在 let 代码块内，可使用 <code>it</code> 替换变量</li><li>若变量为空，可使用 Elvis operator <code>?:</code> 或 <code>?:let &#123;&#125;</code> 执行变量为空时的语句，在 let 代码块内，可使用 <code>it</code> 替换变量</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 定义一个可空类型变量，串联使用 ?.</span><span class="token keyword">class</span> MyWolf <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> w<span class="token operator">:</span> Wolf<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可空属性 w，假设 Wolf() 有 hunger 属性</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myWolf<span class="token operator">:</span> MyWolf<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">MyWolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 可空变量 myWolf</span>myWolf<span class="token operator">?</span><span class="token punctuation">.</span>w<span class="token operator">?</span><span class="token punctuation">.</span>hunger   <span class="token comment">// 串联使用 ?. 访问 hunger 属性</span><span class="token comment">// 可空类型版的 if-else</span>myWolf<span class="token operator">?</span><span class="token punctuation">.</span>w<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span> <span class="token comment">// if w != null true</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hunger is <span class="token interpolation variable">$hunger</span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">?:</span>let <span class="token punctuation">&#123;</span>   <span class="token comment">// if w != null false</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w is null"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exceptions">exceptions</h2><p>try … catch 主要目的是把本来程序指针跳转到出问题的地方转移到自定义的 catch 语句块中。</p><ol><li>当一些可预期出错发生，系统会抛出异常。异常类型为 <code>Exception</code></li><li>若断言对象是 null 时，可使用 not-null 断言操作符 <code>!!</code> 抛出异常 <code>NullPointerException</code></li><li>可以使用 throw 抛出一个异常</li><li>使用 <code>try/catch/finally</code> 捕捉异常。若 try 语句块执行失败，则抛出异常，然后执行 catch 语句块，最后执行 finally。finally 总会被执行，可以吧 try 和 catch 共同执行的代码放在其中。即使在 try 或 catch 中执行了 return 语句，也会在返回前执行 finally。</li><li><code>try</code> 和 <code>throw</code> 是表达式</li><li>可以使用 safe cast <code>as?</code> 避免异常 <code>ClassCastException</code></li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// try/catch/finally</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Do risky thing</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 此函数打印出问题原因堆栈</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 可以是一些 try/catch 共同会执行的代码</span>  <span class="token comment">// 可以是善后工作</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义异常</span><span class="token keyword">class</span> AnimalException <span class="token operator">:</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 作为表达式的 try/catch</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> str<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作为表达式的 catch</span><span class="token keyword">val</span> h <span class="token operator">=</span> w<span class="token operator">?</span><span class="token punctuation">.</span>hunger <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">AnimalException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>lambda</h1><p>lambda 函数一般精简和匿名的(short &amp; anonymous)，可以赋值给一个变量也可以作为函数的参数和返回值。</p><h2 id="lambda-定义和变量">lambda 定义和变量</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**  * lambda 函数定义  */</span><span class="token comment">// 一个入参 x</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token comment">// 两个入参 x, y</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token comment">// 无参数</span><span class="token punctuation">&#123;</span><span class="token string">"lambda"</span><span class="token punctuation">&#125;</span><span class="token comment">/**  * lambda 赋值给一个变量  */</span><span class="token keyword">var</span> addX <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">/**  * 调用 lambda 函数  */</span><span class="token keyword">var</span> result <span class="token operator">=</span> addX<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">addX</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">/**  * lambda 类型  */</span><span class="token comment">// msg 的类型为 (Int) -> String</span><span class="token keyword">val</span> msg <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> Int <span class="token operator">-></span> <span class="token string">"x is <span class="token interpolation variable">$x</span>"</span><span class="token punctuation">&#125;</span><span class="token comment">// 显式声明类型</span><span class="token keyword">val</span> add<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-></span> Intadd <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> y <span class="token punctuation">&#125;</span><span class="token comment">// 如果 lambda 只有一个入参，则可以使用 it 代替</span><span class="token keyword">val</span> add<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Int <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token comment">// 可替换为</span><span class="token keyword">val</span> add<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> <span class="token punctuation">&#123;</span>it <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token comment">// 不能替换为如下，没有显式声明入参类型，编译器无法推断 it 类型</span><span class="token keyword">val</span> add <span class="token operator">=</span> <span class="token punctuation">&#123;</span>it <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果 lambda 不需要返回值可使用 Unit 声明返回值类型</span><span class="token keyword">val</span> myLambda<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>lambda 也是一种 object，它也有类型和值，只不过值是函数，类型是 <code>(入参类型) -&gt; 返回值类型</code></li><li>当 lambda 赋值给一个变量时，编译器会自动推断变量类型</li><li>若没有显式声明 lambda 参数类型，编译器也会自动推断</li><li>当将 lambda 赋值给变量 x 时，并非将 lambda 函数执行结果赋值给变量 x，只在 lambda 执行时才会赋值。（惰性求值）</li><li>若 lambda 函数有多行，则返回值默认为最后一行的值</li><li>确保 lambda 入参类型和显式声明一致</li></ol><h2 id="lambda-和函数">lambda 和函数</h2><ol><li>lambda 作为参数</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token operator">/</span> 入参 coverter 是 lambda，将 coverter 需要的参数和 coverter 一同作为入参<span class="token keyword">fun</span> <span class="token function">covert</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Double<span class="token punctuation">,</span> coverter<span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> <span class="token operator">-></span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体内调用 lambda</span>  <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">coverter</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">// 调用定义的函数 covert</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">covert</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> Double <span class="token operator">-></span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">2.2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 如果函数最后一个参数是 lambda，则可以把 lambda 放在右括号外</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">covert</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span> Double <span class="token operator">-></span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">2.2</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果函数只有一个入参，且它是 lambda，则可以彻底忽略括号</span><span class="token keyword">fun</span> <span class="token function">convert</span><span class="token punctuation">(</span>converter<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Double<span class="token punctuation">)</span> <span class="token operator">:</span> Double <span class="token punctuation">&#123;</span>   <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">converter</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span>convertFive <span class="token punctuation">&#123;</span>it <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>lambda 作为返回值</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// combine function 所有的入参及返回值都是 lambda 类型</span><span class="token keyword">fun</span> <span class="token function">combine</span><span class="token punctuation">(</span>lambda1<span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> <span class="token operator">-></span> Double<span class="token punctuation">,</span> lambda2<span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> <span class="token operator">-></span> Double<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> <span class="token operator">-></span> Double <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Double <span class="token operator">-></span> <span class="token function">lambda2</span><span class="token punctuation">(</span><span class="token function">lambda1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义 lambda1</span><span class="token keyword">val</span> kgsToPounds <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Double <span class="token operator">-></span> x <span class="token operator">*</span> <span class="token number">2.204623</span> <span class="token punctuation">&#125;</span><span class="token comment">// 定义 lambda2</span><span class="token keyword">val</span> poundsToUSTons <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> Double <span class="token operator">-></span> x <span class="token operator">/</span> <span class="token number">2000.0</span> <span class="token punctuation">&#125;</span><span class="token comment">// 调用函数 combine，可知 kgsToUSTons 也是 lambda</span><span class="token keyword">val</span> kgsToUSTons <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span>kgsToPounds<span class="token punctuation">,</span> poundsToUSTons<span class="token punctuation">)</span><span class="token comment">// 这里传入参数，得到最终值</span><span class="token keyword">val</span> usTons <span class="token operator">=</span> <span class="token function">kgsToUSTons</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>lambda 编程是函数式思维，前面所有的过程都是函数式的推演（参与运算的都是函数），最后求值。惰性求值。</li></ol><h2 id="注意">注意</h2><ol><li>若想要忽略掉 lambda 入参，可以使用 “_” 替代</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> lambda<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">&#123;</span> _<span class="token punctuation">,</span> thingToGreet <span class="token operator">-></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello <span class="token interpolation variable">$thingToGreet</span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>collections</h1><p>参考 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/">kotlin stdlib collections</a></p><p>Array, List, Set, Map</p><h2 id="Array">Array</h2><ol><li>创建初始值为 null 的数组，使用 <code>arrayOfNulls</code> 函数</li><li>array 有用的函数有：<code>sort</code>, <code>reverse</code>, <code>contains</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>average</code></li></ol><h2 id="List">List</h2><ol><li>list 是有序列表，可以包含重复的值</li><li>List 元素不可增删修改，但 MutableList 可以</li><li><code>listOf</code> 创建 List，<code>mutableListOf</code> 创建 MutableList</li></ol><h2 id="Set">Set</h2><ol><li>Set 中不允许有重复元素，它是无序的</li><li>Set 元素不可增删修改，但 MutableSet 可以</li><li>Set 如何确定两个元素相同？首先通过判断 hash 值，其次通过 <code>===</code> 判断底层对象，通过 <code>==</code> 判断对象，若以上三者都判断不相等则表示两个元素不同。</li><li><code>setOf</code> 创建 Set，<code>mutableSetOf</code> 创建 MutableSet</li><li>可以使用 <code>==</code> 比较两个 set 是否相同</li></ol><h2 id="Map">Map</h2><p>键值对，键必须唯一，一般键是字符串</p><ol><li><code>mapOf</code> 创建 Map，<code>mutableMapOf</code> 创建 MutableMap</li><li>Map 不可增删修改，但 MutableMap 可以</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// map 一般形式 Map&lt;key_type, value_type>，创建 map</span><span class="token keyword">val</span> recipeMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Recipe<span class="token operator">></span>recipeMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"Recipe1"</span> <span class="token keyword">to</span> r1<span class="token punctuation">,</span> <span class="token string">"Recipe2"</span> <span class="token keyword">to</span> r2<span class="token punctuation">)</span><span class="token comment">// 判断 recipeMap 是否有键是 Recipe1，containsValue 判断是否有值</span>recipeMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"Recipe1"</span><span class="token punctuation">)</span><span class="token comment">// 获取键 Recipe1 的 value</span><span class="token keyword">val</span> recipe <span class="token operator">=</span> recipeMap<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"Recipe1"</span><span class="token punctuation">)</span><span class="token comment">// 遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> recipeMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key is <span class="token interpolation variable">$key</span>, value is <span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>List, Set, Map 都可以调用 <code>toList()</code>, <code>toSet()</code>, <code>toMap()</code>, <code>toMutableList()</code>, <code>toMutableSet()</code>, <code>toMutableMap()</code> 转换</p><h1>high_order functions</h1><ol><li>使用 <code>minBy</code> 和 <code>maxBy</code> 在 collection 中查找最小和最大值。它们接收一个 lambda 参数，在 lambda 中可指定查找最大最小值得依据，返回值类型和 collection 一致</li><li>使用 <code>sumBy</code> 或 <code>sumByDouble</code> 返回 collection 所有项的和，入参只有一个 lambda，可在 lambda 中指定你想求和的项</li><li>使用 <code>filter</code> 搜索或过滤 collection，入参只有一个 lambda，可在 lambda 中指定搜索或过滤的条件，lambda 函数体必须返回一个布尔值。<code>filter</code> 通常返回一个 List，若用于 Map，则它返回一个 Map</li><li><code>map</code> 入参只有一个 lambda，用于转换 collection 中满足 lambda 指定条件的 items。返回一个 List</li><li><code>forEach</code> 像 for 循环，允许你为 collection 中每个 item 执行一条或多条操作</li><li>使用 <code>groupBy</code> 将 collection 分成不同组，分组依据它的入参 lambda 指定。此函数返回一个 Map，key 是 lambda 分组时的依据，value 是分组内容，是一个 List</li><li><code>fold</code> 接收两个参数，第一个参数是初始值，第二参数是 lambda，指定在 collection 的每个 item 上执行一些操作。</li></ol><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Grocery</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> category<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> unit<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> unitPrice<span class="token operator">:</span> Double<span class="token punctuation">,</span> <span class="token keyword">val</span> quantity<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token keyword">val</span> groceries <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">Grocery</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"Vegetable"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token operator">..</span><span class="token punctuation">.</span>                       <span class="token punctuation">)</span><span class="token comment">// sumBy 接收一个 lambda 参数，在 lambda 函数体内可使用 it 替代 groceries</span><span class="token comment">// sumBy 按照 lambda 给出的标准将所有的 groceries 列表所有元素的 quantity 数量相加返回给变量 sumQuantity</span><span class="token keyword">val</span> sumQuantity <span class="token operator">=</span> groceries<span class="token punctuation">.</span><span class="token function">sumBy</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>quantity <span class="token punctuation">&#125;</span><span class="token comment">// 返回 groceries 列表中元素的 unitPrice 最小值</span><span class="token keyword">val</span> groceries<span class="token punctuation">.</span><span class="token function">maxBy</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>unitPrice <span class="token punctuation">&#125;</span><span class="token comment">// 使用 filter 搜索或过滤，lambda 必须返回一个 Boolean，默认返回 List，若操作 Map，返回就是 Map</span><span class="token comment">// 将 groceris 中所有 Vegetable 组成一个新 List，由新变量 vegetables 引用</span><span class="token keyword">val</span> vegetables <span class="token operator">=</span> groceries<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>category <span class="token operator">==</span> <span class="token string">"Vegetable"</span> <span class="token punctuation">&#125;</span><span class="token comment">// 价格大于 3.0 的组成新列表返回</span><span class="token keyword">val</span> unitPriceOver3 <span class="token operator">=</span> groceries<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>unitPrice <span class="token operator">></span> <span class="token number">3.0</span> <span class="token punctuation">&#125;</span><span class="token comment">// 创建一个新 List，将 groceries 中每个 item 的 name 放在新 List 中返回</span><span class="token keyword">val</span> groceryNames <span class="token operator">=</span> groceries<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token comment">// 使用了闭包 closure，在 lambda 函数体内访问了作用域外的自由变量 itemnames</span><span class="token keyword">var</span> itemNames <span class="token operator">=</span> <span class="token string">""</span>groceries<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span> itemNames <span class="token operator">+=</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>it<span class="token punctuation">.</span>name<span class="token delimiter variable">&#125;</span></span> "</span> <span class="token punctuation">&#125;</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"itemNames: <span class="token interpolation variable">$itemNames</span>"</span><span class="token punctuation">)</span><span class="token comment">// groupBy 返回一个 Map，Map 的 key 是 it.category，value 是 categroy 相同的 items 组成的 List</span>groceries<span class="token punctuation">.</span><span class="token function">groupBy</span> <span class="token punctuation">&#123;</span> it<span class="token punctuation">.</span>category <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 50.0 是初始值，lambda 参数 change = 50.0，参数 item 是指 groceries 中的每个 item</span>groceries<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token number">50.0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> change<span class="token punctuation">,</span> item <span class="token operator">-></span>                       change <span class="token operator">-</span> item<span class="token punctuation">.</span>unitPrice <span class="token operator">*</span> item<span class="token punctuation">.</span>quantity <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>generics</h1><ol><li>泛型定义在尖括号内 <code>class Contest&lt;T&gt;</code></li><li>可以限定泛型，指定具体超类类型 <code>class Contest&lt;T: Pet&gt;</code></li><li>使用泛型实例化需要在尖括号内指定具体的存在的类型 <code>Contest&lt;Cat&gt;</code></li><li>如有可能，编译器会推断泛型类型</li><li>在类外也可以定义函数的泛型，或使用不同的泛型 <code>fun &lt;T&gt; listPet(): List&lt;T&gt; &#123;&#125;</code></li><li>泛型不可改变(invariant)指的是泛型只接受指定类型，默认泛型是不可改变的</li><li>泛型协变(covariant)指的是泛型可以使用子类型代替超类型，使用关键字 <code>out</code>，此时泛型只能用于返回值或 val 定义的变量</li><li>泛型逆变(contravariant)指的是泛型可以使用超类型代替子类型，使用关键字 <code>in</code>，此时泛型只能用于函数参数</li></ol>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 插件整理</title>
      <link href="2021/emacs-cha-jian-zheng-li/"/>
      <url>2021/emacs-cha-jian-zheng-li/</url>
      
        <content type="html"><![CDATA[<p>日常使用 Emacs 插件整理。插件安装命令 <code>M-x package-install RET xxx RET</code>。</p><h1>use-package</h1><p><a href="https://github.com/jwiegley/use-package">use-package</a> 不是包管理工具，默认是emacs 内建的 package.el。主要目的是使 package 配置更加独立，既不影响性能又优雅整洁。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; install use-package</span><span class="token punctuation">(</span><span class="token keyword">unless</span> <span class="token punctuation">(</span><span class="token car">package-installed-p</span> <span class="token quoted-symbol variable symbol">'use-package</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token car">package-install</span> <span class="token quoted-symbol variable symbol">'use-package</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'use-package</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">setq</span> use-package-always-ensure <span class="token boolean">t</span><span class="token punctuation">)</span>    <span class="token comment">; ':ensure t' can be ignored when configuring the package</span><span class="token comment">;; :init 在 package 加载之前执行</span><span class="token comment">;; :config 在 package 加载之后配置</span><span class="token comment">;; :bind 按键绑定</span><span class="token comment">;; :custom 可自定义 package custom variables</span><span class="token comment">;; :hook 为 package hooks 添加函数</span><span class="token comment">;; :ensure t 若未安装 package，则自动安装</span><span class="token comment">;; :diminish 不在 mode-line 显示 minor-mode</span><span class="token comment">;; :demand 覆盖包的延迟加载，强制立即加载</span><span class="token comment">;; :disabled 禁用模块</span><span class="token comment">;; :map 局部键绑定，只有 package 加载后生效</span><span class="token comment">;; :defer 延迟加载（:commands,:bind, :bind*, :mode 都有延迟加载效果)</span><span class="token comment">;; :commands 创建自动加载，参数为 symbol 或 symbol 列表</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> which-key  <span class="token lisp-property property">:init</span> <span class="token punctuation">(</span><span class="token car">which-key-mode</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:diminish</span> which-key-mode  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> which-key-idle-delay <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>straight.el</h1><p>emacs 自带包管理 package.el 的可替代包管理工具，可配合 use-package。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/raxod502/straight.el</span><span class="token comment">;; 不能设置默认的仓库源，只能一个一个指定。</span><span class="token comment">;; 不使用 emacs 内建 package.el。</span><span class="token comment">;; Bootstrap straight.el</span><span class="token punctuation">(</span><span class="token defvar"><span class="token keyword">defvar</span> <span class="token variable">bootstrap-version</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">bootstrap-file</span>      <span class="token punctuation">(</span><span class="token car">expand-file-name</span> <span class="token string">"straight/repos/straight.el/bootstrap.el"</span> user-emacs-directory<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token car">bootstrap-version</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">unless</span> <span class="token punctuation">(</span><span class="token car">file-exists-p</span> bootstrap-file<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token car">with-current-buffer</span>        <span class="token punctuation">(</span><span class="token car">url-retrieve-synchronously</span>        <span class="token string">"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"</span>        <span class="token quoted-symbol variable symbol">'silent</span> <span class="token quoted-symbol variable symbol">'inhibit-cookies</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token car">goto-char</span> <span class="token punctuation">(</span><span class="token car">point-max</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token car">eval-print-last-sexp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">load</span> bootstrap-file <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'nomessage</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">setq</span> straight-use-package-by-default <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; Use straight.el for use-package expressions</span><span class="token punctuation">(</span><span class="token car">straight-use-package</span> <span class="token quoted-symbol variable symbol">'use-package</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>org-roam</h1><p>以网状结构来关联笔记、并以 backlink 的形式来展现笔记上下文的工具。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/org-roam/org-roam</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> org-roam  <span class="token lisp-property property">:init</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> org-roam-v2-ack <span class="token boolean">t</span><span class="token punctuation">)</span>    <span class="token comment">; 必须在 :init 中设置，否则警告版本问题</span>  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">org-roam-directory</span> <span class="token string">"F:/Notes/org-notes"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">org-dilies-directory</span> <span class="token string">"f:/Notes/org-notes/daily"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">org-roam-graph-executable</span> <span class="token string">"D:/Graphviz/bin/dot.exe"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">org-roam-completion-everywhere</span> <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">org-roam-db-autosync-mode</span><span class="token punctuation">)</span>  <span class="token comment">;; If using org-roam-protocol</span>  <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'org-roam-protocol</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>org-roam-ui</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 需要 org-roam v2</span><span class="token comment">;; https://github.com/org-roam/org-roam-ui</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> org-roam-ui  <span class="token lisp-property property">:straight</span>  <span class="token punctuation">(</span><span class="token lisp-property property">:host</span> github <span class="token lisp-property property">:repo</span> <span class="token string">"org-roam/org-roam-ui"</span> <span class="token lisp-property property">:branch</span> <span class="token string">"main"</span> <span class="token lisp-property property">:files</span> <span class="token punctuation">(</span><span class="token string">"*.el"</span> <span class="token string">"out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:after</span> org-roam  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> org-roam-ui-sync-theme <span class="token boolean">t</span>        org-roam-ui-follow <span class="token boolean">t</span>        org-roam-ui-update-on-save <span class="token boolean">t</span>        org-roam-ui-open-on-start <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>command-log-mode</h1><p>显示部分或所有 buffer 的事件或命令历史。</p><ul><li><code>M-x command-log-mode</code> 监听当前 buffer 命令，并显示。</li><li><code>M-x global-command-log-mode</code> 监听所有 buffer 命令，并显示。</li><li><code>M-x clm/open-command-log-buffer</code> 打开显示 buffer。</li></ul><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token punctuation">(</span><span class="token keyword">use-package</span> command-log-mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>ivy/counsel/swiper</h1><p><a href="https://github.com/abo-abo/swiper">swiper</a> 这个仓库包含 ivy, counsel, swiper 三个 packages。是 minibuffer 补全工具。</p><ul><li><code>Ivy</code> emacs 通用补全机制。</li><li><code>Counsel</code> emacs 常用命令集合的 Ivy 增强版。</li><li><code>Swiper</code> 是 Isearch 的替代品，它使用 Ivy 来显示所有匹配项的预览。</li></ul><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token punctuation">(</span><span class="token keyword">use-package</span> ivy  <span class="token lisp-property property">:diminish</span> ivy-mode  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">after-init</span> <span class="token punctuation">.</span> ivy-mode<span class="token punctuation">)</span>  <span class="token lisp-property property">:bind</span> <span class="token punctuation">(</span>         <span class="token punctuation">(</span><span class="token string">"C-s"</span> <span class="token punctuation">.</span> swiper-isearch<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"M-x"</span> <span class="token punctuation">.</span> counsel-M-x<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"C-x C-f"</span> <span class="token punctuation">.</span> counsel-find-file<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"C-x b"</span> <span class="token punctuation">.</span> ivy-switch-buffer<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"M-y"</span> <span class="token punctuation">.</span> counsel-yank-pop<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"C-x l"</span> <span class="token punctuation">.</span> counsel-locate<span class="token punctuation">)</span>         <span class="token lisp-property property">:map</span> ivy-minibuffer-map         <span class="token punctuation">(</span><span class="token string">"TAB"</span> <span class="token punctuation">.</span> ivy-alt-done<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"C-j"</span> <span class="token punctuation">.</span> ivy-next-line<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token string">"C-k"</span> <span class="token punctuation">.</span> ivy-previous-line<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> ivy-initial-inputs-alist <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; Don't start searches with ^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ivy-rich</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; ivy 显示更丰富的内容</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> ivy-rich  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">ivy-mode</span> <span class="token punctuation">.</span> ivy-rich-mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>doom-modeline</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 先安装 all-the-icons 包</span><span class="token comment">;; 执行 M-x all-the-icons-install-fonts 安装字体。windows 需要手动安装。</span><span class="token comment">;; 国内可能无法访问相关网址，修改 hosts 文件。</span><span class="token comment">;; 在 hosts 最后添加 199.232.68.133 raw.githubusercontent.com</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> all-the-icons<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> doom-modeline  <span class="token lisp-property property">:init</span> <span class="token punctuation">(</span><span class="token car">doom-modeline-mode</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:custom</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">doom-modeline-height</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>doom-themes</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/hlissner/emacs-doom-themes</span><span class="token comment">;; 提供丰富的 themes</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> doom-themes  <span class="token lisp-property property">:init</span> <span class="token punctuation">(</span><span class="token car">load-theme</span> <span class="token quoted-symbol variable symbol">'doom-solarized-light</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>rainbow-delimiters</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 不同颜色显示不同深度的分隔符对，如, (, [, &#123;</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> rainbow-delimiters  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">prog-mode</span> <span class="token punctuation">.</span> rainbow-delimiters-mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>which-key</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 显示当前键入未完成命令的所有补全命令列表</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> which-key  <span class="token lisp-property property">:init</span> <span class="token punctuation">(</span><span class="token car">which-key-mode</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:diminish</span> which-key-mode  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> which-key-idle-delay <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>helpful</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/Wilfred/helpful</span><span class="token comment">;; emacs 内置 help 的替代选择，能够显示更丰富的内容</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> helpful  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span>  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">counsel-describe-function-function</span> <span class="token quoted-symbol variable symbol">#'helpful-callable</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">counsel-describe-variable-function</span> <span class="token quoted-symbol variable symbol">#'helpful-variable</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:bind</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span>remap describe-function<span class="token punctuation">]</span> <span class="token punctuation">.</span> counsel-describe-function<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span>remap describe-command<span class="token punctuation">]</span> <span class="token punctuation">.</span> helpful-command<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span>remap describe-variable<span class="token punctuation">]</span> <span class="token punctuation">.</span> counsel-describe-variable<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">[</span>remap describe-key<span class="token punctuation">]</span> <span class="token punctuation">.</span> helpful-key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>general</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; general 用于批量绑定按键</span><span class="token comment">;; 相当于批量的 define-key 和 global-set-key</span><span class="token comment">;; 定义一个函数，可在函数里面批量绑定按键</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> general  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">general-create-definer</span> rune/leader-keys    <span class="token lisp-property property">:keymaps</span> <span class="token punctuation">'(</span><span class="token car">normal</span> insert visual emacs<span class="token punctuation">)</span>    <span class="token lisp-property property">:prefix</span> <span class="token string">"SPC"</span>    <span class="token lisp-property property">:global-prefix</span> <span class="token string">"C-SPC"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">rune/leader-keys</span>    <span class="token string">"t"</span>  <span class="token punctuation">'(</span><span class="token lisp-property property">:ignore</span> <span class="token boolean">t</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"toggles"</span><span class="token punctuation">)</span>    <span class="token string">"tt"</span> <span class="token punctuation">'(</span><span class="token car">counsel-load-theme</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"choose theme"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>hydra</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 将命令绑定到一系列具有公共前缀的短绑定。和 general 结合使用，这两个是神器。</span><span class="token comment">;; https://github.com/abo-abo/hydra</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> hydra<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">defhydra</span> hydra-text-scale <span class="token punctuation">(</span><span class="token lisp-property property">:timeout</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token string">"scale text"</span>  <span class="token punctuation">(</span><span class="token string">"j"</span> text-scale-increase <span class="token string">"in"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token string">"k"</span> text-scale-decrease <span class="token string">"out"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token string">"f"</span> <span class="token boolean">nil</span> <span class="token string">"finished"</span> <span class="token lisp-property property">:exit</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">rune/leader-keys</span>  <span class="token string">"ts"</span> <span class="token punctuation">'(</span><span class="token car">hydra-text-scale/body</span> <span class="token lisp-property property">:which-key</span> <span class="token string">"scale text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>magit</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token punctuation">(</span><span class="token keyword">use-package</span> magit  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">magit-display-buffer-function</span> <span class="token quoted-symbol variable symbol">#'magit-display-buffer-same-window-except-diff-v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 屏蔽找不到 magit-version 错误</span><span class="token punctuation">(</span><span class="token car">advice-add</span> <span class="token quoted-symbol variable symbol">#'magit-version</span> <span class="token lisp-property property">:override</span> <span class="token quoted-symbol variable symbol">#'ignore</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 所有操作可在 magit-status 窗口中使用 ? 指令查看。</span><span class="token comment">;; 克隆</span>M-x magit-clone<span class="token comment">;; 查看 status</span>M-x magit-status<span class="token comment">;; 进入 magit-status 窗口</span>s    <span class="token comment">;; 跟踪当前文件</span>S    <span class="token comment">;; 跟踪所有文件。</span><span class="token comment">;; commit 暂存文件</span>M-x magit-commit    <span class="token comment">;; 选择参数</span>c<span class="token comment">;; 或在 magit-status 窗口</span>c c<span class="token comment">;; 提交 commit</span>C-c C-c<span class="token comment">;; push 到远程仓库</span>M-x magit-push    <span class="token comment">;; 选择参数</span>p<span class="token comment">;; 或在 magit-status 窗口</span>P    <span class="token comment">;; 选择参数，然后 p</span>p<span class="token comment">;; 查看进度，进入 magit-status 窗口</span>$    <span class="token comment">;; 打开 magit-process 查看进度</span><span class="token comment">;; pull 更新</span>M-x magit-pull    <span class="token comment">;; 选择参数</span>p<span class="token comment">;; 或在 magit-status 窗口</span>F    <span class="token comment">;; 选择参数</span>p<span class="token comment">;; log 查看</span>M-x magit-log-all    <span class="token comment">;; 可查看所有分支 log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>forge</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 在 magit 环境使用，用于显示 github, gitlab 的 Issues, pr 等。</span><span class="token comment">;; NOTE: Make sure to configure a GitHub token before using this package!</span><span class="token comment">;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation</span><span class="token comment">;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> forge<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>evil</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 必备。C-z 在 emacs 和 vim 模式切换</span><span class="token comment">;; https://github.com/emacs-evil/evil</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> evil  <span class="token lisp-property property">:init</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> evil-want-integration <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> evil-want-keybinding <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> evil-want-C-u-scroll <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> evil-want-C-i-jump <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">evil-mode</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">define-key</span> evil-insert-state-map <span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"C-g"</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'evil-normal-state</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">define-key</span> evil-insert-state-map <span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"C-h"</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'evil-delete-backward-char-and-join</span><span class="token punctuation">)</span>  <span class="token comment">;; Use visual line motions even outside of visual-line-mode buffers</span>  <span class="token punctuation">(</span><span class="token car">evil-global-set-key</span> <span class="token quoted-symbol variable symbol">'motion</span> <span class="token string">"j"</span> <span class="token quoted-symbol variable symbol">'evil-next-visual-line</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">evil-global-set-key</span> <span class="token quoted-symbol variable symbol">'motion</span> <span class="token string">"k"</span> <span class="token quoted-symbol variable symbol">'evil-previous-visual-line</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">evil-set-initial-state</span> <span class="token quoted-symbol variable symbol">'messages-buffer-mode</span> <span class="token quoted-symbol variable symbol">'normal</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">evil-set-initial-state</span> <span class="token quoted-symbol variable symbol">'dashboard-mode</span> <span class="token quoted-symbol variable symbol">'normal</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>evil-surround</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/emacs-evil/evil-surround</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> evil-surround  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">global-evil-surround-mode</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>evil-lion</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; http://github.com/edkolev/evil-lion</span><span class="token comment">;; 根据空格或其它符号进行对齐操作。左对齐: gl MOTION CHAR 右对齐: gL MOTION CHAR</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> evil-lion  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">evil-lion-mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>evil-nerd-commenter</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/redguardtoo/evil-nerd-commenter</span><span class="token comment">;; 注释</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> evil-nerd-commenter  <span class="token lisp-property property">:bind</span> <span class="token punctuation">(</span><span class="token string">"M-/"</span> <span class="token punctuation">.</span> evilnc-comment-or-uncomment-lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>sis</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; evil 不同模式中英文自动切换。</span><span class="token comment">;; https://github.com/laishulu/emacs-smart-input-source</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> sis<span class="token comment">;; :hook</span><span class="token comment">;; enable the /follow context/ and /inline region/ mode for specific buffers</span><span class="token comment">;; (((text-mode prog-mode) . sis-context-mode)</span><span class="token comment">;;  ((text-mode prog-mode) . sis-inline-mode))</span><span class="token lisp-property property">:config</span><span class="token comment">;; 需要安装 im-select 工具，https://github.com/daipeihust/im-select</span><span class="token comment">;; (sis-ism-lazyman-config "1033" "2052" 'im-select)</span><span class="token punctuation">(</span><span class="token car">sis-ism-lazyman-config</span> <span class="token boolean">nil</span> <span class="token string">"2052"</span> <span class="token quoted-symbol variable symbol">'im-select</span><span class="token punctuation">)</span><span class="token comment">;; enable the /cursor color/ mode</span><span class="token punctuation">(</span><span class="token car">sis-global-cursor-color-mode</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; enable the /respect/ mode</span><span class="token punctuation">(</span><span class="token car">sis-global-respect-mode</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; enable the /context/ mode for all buffers</span><span class="token punctuation">(</span><span class="token car">sis-global-context-mode</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; enable the /inline english/ mode for all buffers</span><span class="token punctuation">(</span><span class="token car">sis-global-inline-mode</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>markdown</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/jrblevin/markdown-mode</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> markdown-mode  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span>  <span class="token lisp-property property">:mode</span> <span class="token punctuation">(</span><span class="token string">"README\\.md\\'"</span> <span class="token punctuation">.</span> gfm-mode<span class="token punctuation">)</span>  <span class="token lisp-property property">:init</span> <span class="token punctuation">(</span><span class="token keyword">setq</span> markdown-command <span class="token string">"multimarkdown"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>pangu-spacing</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/coldnew/pangu-spacing</span><span class="token comment">;; 在中英文之间增加空格</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> pangu-spacing<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>yasnippet</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 为编程语言提供代码片段，或为其他提供模板。</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> yasnippet  <span class="token lisp-property property">:ensure</span> <span class="token boolean">t</span>  <span class="token lisp-property property">:init</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> yas-snippet-dirs <span class="token punctuation">'(</span><span class="token string">"~/mySnippets"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> yas-indent-line <span class="token punctuation">(</span><span class="token car">quote</span> none<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">yas-global-mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="snippet">snippet</h2><ol><li><p>创建 snippet</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-c &amp; C-n <span class="token punctuation">(</span><span class="token car">M-x</span> yas-new-snippet<span class="token punctuation">)</span> <span class="token comment">;; 创建新 snippet</span>C-c C-c                         <span class="token comment">;; 保存 snippet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>典型例子</p><pre class="line-numbers language-snippet" data-language="snippet"><code class="language-snippet"># contributor: test &lt;test@qq.com&gt;# name: __---__# --__$&#123;init&#125;__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code># --</code> 以上内容均为注释，这些注释可能为指令或者元数据。</p><ul><li>指令格式类似 <code># property: value</code>。</li><li>若没有 <code># --</code> 则，所有的内容均被当做 snippet 内容。</li></ul></li><li><p>指令</p><ul><li><p><code># key</code> ：snippet abbrev，这是最重要的指令，若不指定该指令，则无法触发展开指令。</p></li><li><p><code># name</code> ：snippet name，用一行描述 snippet。好的描述可以让你方便的区别相似的 snippets。</p></li><li><p><code># condition</code> ：snippet condition，若 snippet 有条件，当条件非 nil 时snippet 会被展开。</p></li><li><p><code># group</code> ：snippet menu grouping，一个模式若有许多 snippets，则可以把他们组织在一个 group 中，方便菜单栏中成组的显示，防止菜单栏变得太长。</p></li><li><p><code># expand-env</code> ：expand environment，为变量赋值的列表（类似于 let 的变量赋值），在展开代码段时，它可用于覆盖变量值。</p><pre class="line-numbers language-none"><code class="language-none"># note: 从官网说明获取，方便举例# name: ASCII home# expand-env: ((yas-indent-line &#39;fixed) (yas-wrap-around-region &#39;nil))# --welcome to myX      humble&#x2F; \      home,&#x2F;   \      $0&#x2F;     \&#x2F;-------\|       ||  +-+  ||  | |  |+--+-+--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code># binding</code> ：direct keybinding，你可以直接将展开 snippet 的指令绑定到普通的 emacs 按键。</p></li><li><p><code># type</code> ：snippet or command，若 type 指令被设置成了 command，那么 snippet的内容会以 lisp 代码的方式执行。若设置为 snippet（默认为 snippet），snippet内容会以其模板语法解释执行。</p></li><li><p><code># uuid</code> ：unique identifier，独立于 name 的唯一标识，若第二次加载的 uuid和前次 一样，则会以第二次为准。</p></li><li><p><code># contributor</code> ：snippet author。</p></li></ul></li><li><p>模板语法</p><ul><li><p>纯文本</p><p>任意文本都可以作为模板的内容，除了美元符 <code>$</code> 和反引号 ` 外，通常它们被认为是纯文本。若需要可以用反斜杠 <code>\</code> 转义美元符和反引号，若要使用双反斜杠 <code>\\</code>，则每个反斜杠需要一个反斜杠转义，即 <code>\\\\</code>。</p></li><li><p>嵌入 elisp 代码</p><p>使用反引号 ` 将 elisp 代码嵌入到模板中，代码会在 snippet 展开时执行。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*c-mode example，示例取自官网*&#x2F;#ifndef $&#123;1:_&#96;(upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name))))&#96;_H_&#125;#define $1$0#endif &#x2F;* $1 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>TAB 位字段</p><p>该字段可以让你使用 TAB 和 S-TAB 跳转。该字段格式为美元符 $ 后面跟一个数字，$0 有着 exit point 的特殊意义，表示退出 snippet</p></li><li><p>占位符字段</p><p>制表位可以设置默认值，即占位符，语法： <code>$&#123;N:default value&#125;</code>。</p></li><li><p>Mirrors</p><p>将带有占位符的制表位称为 field，一个 field 可以有许多 mirrors。</p><p>当更新一个 field，相应 field 所有的 mirrors 都会更新</p><pre class="line-numbers language-snippet" data-language="snippet"><code class="language-snippet">begin &#123;$&#123;1:test&#125;&#125;$0end&#123;$1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>snippet 实践</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> mode<span class="token operator">:</span> snippet <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">name</span><span class="token expression"><span class="token operator">:</span> main</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">key</span><span class="token expression"><span class="token operator">:</span> c_main</span></span># <span class="token operator">--</span><span class="token comment">/*$&#123;1: test&#125; begin*/</span><span class="token comment">/*C 语言 main 函数 snippet，输入 c_main 然后 C-c k 即可*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">int</span> args<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> $<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token operator">:</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*$1 end*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：若光标被导航到了 <code>$0</code>，无法使用 <code>S-TAB</code> 向后导航了。</p></li></ol><h1>projectile</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/bbatsov/projectile</span><span class="token comment">;; 用于管理 project</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> projectile  <span class="token lisp-property property">:diminish</span> projectile-mode  <span class="token lisp-property property">:config</span> <span class="token punctuation">(</span><span class="token car">projectile-mode</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:custom</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">projectile-completion-system</span> <span class="token quoted-symbol variable symbol">'ivy</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:bind-keymap</span>  <span class="token punctuation">(</span><span class="token string">"C-c p"</span> <span class="token punctuation">.</span> projectile-command-map<span class="token punctuation">)</span>  <span class="token lisp-property property">:init</span>  <span class="token comment">;; NOTE: Set this to the folder where you keep your Git repos!</span>  <span class="token punctuation">(</span><span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token car">file-directory-p</span> <span class="token string">"f:/github"</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">setq</span> projectile-project-search-path <span class="token punctuation">'(</span><span class="token string">"f:/github"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> projectile-switch-project-action <span class="token quoted-symbol variable symbol">#'projectile-dired</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>counsel-projectile</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://github.com/ericdanan/counsel-projectile</span><span class="token comment">;; projectile 可使用 ivy 作为补全，counsel-projectile 用于增强 ivy</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> counsel-projectile  <span class="token lisp-property property">:after</span> projectile  <span class="token lisp-property property">:config</span> <span class="token punctuation">(</span><span class="token car">counsel-projectile-mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>org-bullets</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 美化标题 stars</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> org-bullets  <span class="token lisp-property property">:after</span> org  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">org-mode</span> <span class="token punctuation">.</span> org-bullets-mode<span class="token punctuation">)</span>  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">org-bullets-bullet-list</span> <span class="token punctuation">'(</span><span class="token string">"◉"</span> <span class="token string">"○"</span> <span class="token string">"●"</span> <span class="token string">"○"</span> <span class="token string">"●"</span> <span class="token string">"○"</span> <span class="token string">"●"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>visual-fill-column</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 使用 org 文件内容在 buffer 居中显示，就像编辑一篇文档一样</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">efs/org-mode-visual-fill</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> visual-fill-column-width <span class="token number">100</span>        visual-fill-column-center-text <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">visual-fill-column-mode</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> visual-fill-column  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">org-mode</span> <span class="token punctuation">.</span> efs/org-mode-visual-fill<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>org-tempo</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 快速插入代码块。在 &lt; 后面添加模板，按 &lt;TAB> 展开模板内容</span><span class="token comment">;; This is needed as of Org 9.2</span><span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'org-tempo</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">add-to-list</span> <span class="token quoted-symbol variable symbol">'org-structure-template-alist</span> <span class="token punctuation">'(</span><span class="token string">"sh"</span> <span class="token punctuation">.</span> <span class="token string">"src shell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">add-to-list</span> <span class="token quoted-symbol variable symbol">'org-structure-template-alist</span> <span class="token punctuation">'(</span><span class="token string">"el"</span> <span class="token punctuation">.</span> <span class="token string">"src emacs-lisp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">add-to-list</span> <span class="token quoted-symbol variable symbol">'org-structure-template-alist</span> <span class="token punctuation">'(</span><span class="token string">"py"</span> <span class="token punctuation">.</span> <span class="token string">"src python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>lsp-mode</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; https://emacs-lsp.github.io/lsp-mode/</span><span class="token comment">;; Language Server Protocol 用于集成 emacs packages 提供 IDE 体验。</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">efs/lsp-mode-setup</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> lsp-headerline-breadcrumb-segments <span class="token punctuation">'(</span><span class="token car">path-up-to-project</span> file symbols<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">lsp-headerline-breadcrumb-mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> lsp-mode  <span class="token lisp-property property">:commands</span> <span class="token punctuation">(</span><span class="token car">lsp</span> lsp-deferred<span class="token punctuation">)</span>  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">lsp-mode</span> <span class="token punctuation">.</span> efs/lsp-mode-setup<span class="token punctuation">)</span>  <span class="token lisp-property property">:init</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> lsp-keymap-prefix <span class="token string">"C-c l"</span><span class="token punctuation">)</span>  <span class="token comment">;; Or 'C-l', 's-l'</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">lsp-enable-which-key-integration</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>lsp-ui</h1><pre class="line-numbers language-emacs-lsp" data-language="emacs-lsp"><code class="language-emacs-lsp">;; 提供弹出窗口以显示光标所在相关内容(use-package lsp-ui  :after lsp    ; 必须，否则报错：The connected server(s) does not support method textDocument&#x2F;hover  :hook (lsp-mode . lsp-ui-mode)  :config  (setq lsp-ui-sideline-enable t)  (setq lsp-ui-sideline-show-hover nil)  (setq lsp-ui-doc-position &#39;bottom)  (lsp-ui-doc-show))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>lsp-treemacs</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; M-x treemacs，提供项目目录树</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> lsp-treemacs  <span class="token lisp-property property">:after</span> lsp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>company/company-box</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 在 buffer 中提供美化的补全界面</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> company  <span class="token lisp-property property">:after</span> lsp-mode  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">lsp-mode</span> <span class="token punctuation">.</span> company-mode<span class="token punctuation">)</span>  <span class="token lisp-property property">:bind</span> <span class="token punctuation">(</span><span class="token lisp-property property">:map</span> company-active-map         <span class="token punctuation">(</span><span class="token string">"&lt;tab>"</span> <span class="token punctuation">.</span> company-complete-selection<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token lisp-property property">:map</span> lsp-mode-map         <span class="token punctuation">(</span><span class="token string">"&lt;tab>"</span> <span class="token punctuation">.</span> company-indent-or-complete-common<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">company-minimum-prefix-length</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">company-idle-delay</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 进一步美化 company 补全</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> company-box  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token car">company-mode</span> <span class="token punctuation">.</span> company-box-mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>auto-package-update</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 自动更新 package，或可用 M-x auto-package-update-now 立刻更新</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> auto-package-update  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">auto-package-update-interval</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">auto-package-update-prompt-before-update</span> <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">auto-package-update-hide-results</span> <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">auto-package-update-maybe</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">auto-package-update-at-time</span> <span class="token string">"09:00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>super-save</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 自动保存</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> super-save  <span class="token lisp-property property">:defer</span> <span class="token number">1</span>  <span class="token lisp-property property">:diminish</span> super-save-mode  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">super-save-mode</span> <span class="token number">+1</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> super-save-auto-save-when-idle <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ws-butler</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 自动清除 whitespace</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> ws-butler  <span class="token lisp-property property">:hook</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">text-mode</span> <span class="token punctuation">.</span> ws-butler-mode<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token car">prog-mode</span> <span class="token punctuation">.</span> ws-butler-mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>ace-window</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; window 之间快速切换</span><span class="token punctuation">(</span><span class="token keyword">use-package</span> ace-window  <span class="token lisp-property property">:bind</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"C-x o"</span> <span class="token punctuation">.</span> ace-window<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">aw-scope</span> <span class="token quoted-symbol variable symbol">'frame</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">aw-keys</span> <span class="token punctuation">'(</span>?a ?s ?d ?f ?g ?h ?j ?k ?l<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">aw-minibuffer-flag</span> <span class="token boolean">t</span><span class="token punctuation">)</span>  <span class="token lisp-property property">:config</span>  <span class="token punctuation">(</span><span class="token car">ace-window-display-mode</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>erc</h1><h2 id="登陆-emacs-ERC">登陆 emacs ERC</h2><p>emacs 自带 IRC 客户端，启动指令 <code>M-x erc</code>。</p><p>minibuffer 会提示操作步骤：</p><ol><li>IRC server : <a href="http://irc.freenode.net">irc.freenode.net</a></li><li>IRC port :   6667</li><li>Nickname :   “your name”</li><li>Password :   “your passwd”</li></ol><p>注：步骤 1-2 可按默认配置，步骤 3-4 需自定义。</p><h2 id="注册账号">注册账号</h2><ol><li><p>确认 Nickname</p><p>可使用指令 <code>/nick</code> 修改 Nickname 至满意为止，尽量避免使用社区、商标名。</p></li><li><p>注册 nick</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;msg NickServ REGISTER password youremail@example.com （注意大小写）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>freenode 会向注册邮箱发送确认注册的信息的邮件，按操作执行即可。</p><h2 id="登陆账号">登陆账号</h2><ol><li><p>账号</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;nick &quot;your name&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>密码</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;msg NickServ identify &quot;your passwd&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>org2blog</h1><p>org2blog 插件可将 emacs 中写的 org 博客推送到网站，发布博客。</p><ol><li><p>安装</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x package-install org2blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>org2blog 配置</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">  <span class="token punctuation">(</span><span class="token car">maybe-require-package</span> <span class="token quoted-symbol variable symbol">'org2blog</span><span class="token punctuation">)</span> <span class="token comment">;; 寻找 org2blog 插件的位置，若不存在则安装</span>  <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'org2blog-autoloads</span><span class="token punctuation">)</span>  <span class="token comment">;; ===============================================================</span>  <span class="token comment">;; blog 自动登录及默认参数设置</span>  <span class="token comment">;; 自动登录配置文件：~/.netrc  内容：machine myblog login myusername password mypassword</span>  <span class="token comment">;; 默认参数设置 config</span>  <span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'auth-source</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">let*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">credentials</span> <span class="token punctuation">(</span><span class="token car">auth-source-user-and-password</span> <span class="token string">"myblog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">username</span> <span class="token punctuation">(</span><span class="token car">nth</span> <span class="token number">0</span> credentials<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">password</span> <span class="token punctuation">(</span><span class="token car">nth</span> <span class="token number">1</span> credentials<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">config</span> <span class="token punctuation">`(</span><span class="token punctuation">(</span><span class="token string">"blog"</span><span class="token comment">;; url 你的博客中 xmlrpc.php 所在位置</span>   <span class="token lisp-property property">:url</span> <span class="token string">"http://yourWebServer/xmlrpc.php"</span>   <span class="token lisp-property property">:username</span> <span class="token splice symbol variable">,username</span>   <span class="token lisp-property property">:password</span> <span class="token splice symbol variable">,password</span>   <span class="token comment">;; 默认发布的博客属于“未分类”</span>   <span class="token lisp-property property">:default-categories</span> <span class="token punctuation">(</span><span class="token string">"未分类"</span><span class="token punctuation">)</span>   <span class="token lisp-property property">:keep-new-lines</span> <span class="token boolean">t</span>   <span class="token lisp-property property">:confirm</span> <span class="token boolean">t</span>   <span class="token lisp-property property">:wp-code</span> <span class="token boolean">nil</span>   <span class="token lisp-property property">:tags-as-categories</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">setq</span> org2blog/wp-blog-alist config<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">;; blog meta 设置，会使用上面 config 变量中设置的值</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> org2blog/wp-buffer-template  <span class="token string">"#+TITLE:    %s  #+AUTHOR:   %s  #+DATE:     %s  ;; “目录”用中文显示  #+LANGUAGE: zh<span class="token argument">-CN</span>  #+OPTIONS:  toc:t num:t todo:nil pri:nil tags:nil ^:nil  #+CATEGORY: %s  #+TAGS:  #+DESCRIPTION:  \n"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">o2b-format-function</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">format-string</span></span><span class="token punctuation">)</span></span><span class="token punctuation">(</span><span class="token car">format</span> format-string<span class="token comment">;; TITLE，如果 config 中有设置 default-title 选项，则使用设置的值</span><span class="token comment">;; 否则，需要从 minibuffer 读入用户输入的 title</span><span class="token punctuation">(</span><span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token car">plist-get</span> <span class="token punctuation">(</span><span class="token car">cdr</span> org2blog/wp-blog<span class="token punctuation">)</span> <span class="token lisp-property property">:default-title</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">read-string</span> <span class="token string">"title: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; AUTHOR</span>user-login-name<span class="token comment">;; DATE</span><span class="token punctuation">(</span><span class="token car">format-time-string</span> <span class="token string">"[%Y-%m-%d %a %H:%M]"</span> <span class="token punctuation">(</span><span class="token car">current-time</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; CATEGORY</span><span class="token punctuation">(</span><span class="token car">mapconcat</span> <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">cat</span></span><span class="token punctuation">)</span></span> cat<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token car">plist-get</span> <span class="token punctuation">(</span><span class="token car">cdr</span> org2blog/wp-blog<span class="token punctuation">)</span> <span class="token lisp-property property">:default-categories</span><span class="token punctuation">)</span> org2blog/wp-default-categories<span class="token punctuation">)</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> org2blog/wp-buffer-format-function <span class="token quoted-symbol variable symbol">'o2b-format-function</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">provide</span> <span class="token quoted-symbol variable symbol">'init-org2blog</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>init.el 配置</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'init-org2blog</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>.netrc 自动登录配置文件</p><ul><li><p>位置： emacs 家目录下，即~/.netrc。</p></li><li><p>文件内容：</p><pre class="line-numbers language-none"><code class="language-none">machine mybloglogin yournamepassword yourpassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>操作</p><ul><li><p>登录 blog</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/wp-login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建 blog</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/wp-new-entry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登出 blog</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/logout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换 org2blog 模式</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/wp-mode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>存为网站草稿</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/wp-post-buffer或C-c M-p d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>发布文章</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">M-x org2blog/wp-post-buffer-and-publish或C-c M-p p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1>参考</h1><ol><li><a href="http://freenode.net/kb/all">http://freenode.net/kb/all</a></li><li><a href="https://github.com/org2blog/org2blog/wiki/Usage">https://github.com/org2blog/org2blog/wiki/Usage</a></li><li><a href="https://github.com/daviwil/emacs-from-scratch">https://github.com/daviwil/emacs-from-scratch</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具集合</title>
      <link href="2021/gong-ju-lie-biao/"/>
      <url>2021/gong-ju-lie-biao/</url>
      
        <content type="html"><![CDATA[<h1>Windows 工具</h1><p>很多 windows 收费的工具都能被免费 gnu 软件替代。</p><p>gnu 软件 <code>https://www.gnu.org/software/software.html</code>。</p><h2 id="浏览器">浏览器</h2><pre><code>1. [chrome](https://www.google.cn/chrome/)</code></pre><ol start="2"><li><a href="https://www.qutebrowser.org/">qutebrowser</a> vim 风格浏览器</li></ol><p><strong>Chrome 浏览器插件</strong></p><ol><li><a href="https://github.com/FelisCatus/SwitchyOmega/releases">SwitchyOmega</a></li><li><a href="https://www.tampermonkey.net/">Tampermonkey</a></li></ol><p><strong>脚本网站</strong></p><ul><li><a href="https://www.userscript.zone/">userscript</a></li><li><a href="https://greasyfork.org/zh-CN">GreasyFork</a></li><li><a href="https://openuserjs.org/">OpenUserJS</a></li><li><a href="https://gist.github.com/search?l=JavaScript&amp;o=desc&amp;q=%22%3D%3DUserScript%3D%3D%22&amp;s=updated">github/gist</a></li></ul><h2 id="阅读器">阅读器</h2><ol><li><a href="https://calibre-ebook.com/">calibre</a></li><li><a href="https://www.amazon.cn/gp/digital/fiona/kcp-landing-page?ie=UTF8&amp;ref_=sa_menu_kindle_fanxin_2">KindleForPC</a></li></ol><h2 id="文本编辑器">文本编辑器</h2><ol><li><a href="http://www.notepad-plus-plus.org/">notepad++</a></li><li><a href="https://github.com/neovim/neovim/releases">neovim</a></li><li><a href="https://github.com/vim/vim-win32-installer/releases">Gvim</a></li><li><a href="http://www.gnu.org/software/emacs/">emacs</a></li><li><a href="https://atom.io/">Atom</a></li></ol><h2 id="画图工具">画图工具</h2><ol><li><a href="http://www.graphviz.org/">graphviz</a></li></ol><h2 id="Latex">Latex</h2><ol><li><a href="http://tug.org/texlive/acquire-netinstall.html">texlive</a></li><li><a href="https://www.texstudio.org/">texstudio</a> 或 <a href="https://github.com/texstudio-org/texstudio/releases">这里</a></li></ol><h2 id="搜索查找">搜索查找</h2><ol><li><a href="https://www.voidtools.com/zh-cn/">everything</a></li><li><a href="https://github.com/BurntSushi/ripgrep/releases">ripgrep</a></li></ol><h2 id="解压缩">解压缩</h2><ol><li><a href="https://www.7-zip.org/">7-zip</a></li></ol><h2 id="文件比较">文件比较</h2><ol><li><a href="https://winmerge.org/downloads/">WinMerge</a></li></ol><h2 id="文件传输">文件传输</h2><ol><li><a href="https://filezilla-project.org/">filezilla</a></li><li><a href="https://winscp.net/eng/index.php">WinSCP</a></li><li><a href="https://cyberduck.io/">cyberduck</a></li></ol><h2 id="远程登录">远程登录</h2><ol><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/">putty</a><ul><li>既可以远程登录，也可以远程拷贝和文件传输</li></ul></li><li><a href="https://ttssh2.osdn.jp/index.html.en">Tera Term</a><ul><li>日本网站，需要 VPN</li></ul></li></ol><h2 id="下载">下载</h2><ol><li><a href="https://github.com/aria2/aria2/releases">aria2/aria2NG</a><ul><li>支持 HTTP(S)/FTP/SFTP/BitTorrent</li></ul></li><li><a href="https://you-get.org/">you-get</a><ul><li>支持从 web 下载各种视频、图片和音频，比如从 youtube 下载视频</li></ul></li></ol><h2 id="GIT">GIT</h2><ol><li><a href="https://gitforwindows.org/">git for windows</a></li></ol><h2 id="UML">UML</h2><ol><li><a href="https://github.com/jgraph/drawio-desktop/releases">drawio</a></li><li><a href="https://www.bouml.fr/">Bouml</a></li></ol><h2 id="虚拟机">虚拟机</h2><ol><li><a href="https://www.virtualbox.org/wiki/Downloads">virtualBox</a></li></ol><h2 id="VPN">VPN</h2><ol><li><a href="https://github.com/v2fly/v2ray-core/releases">v2ray</a></li><li><a href="https://github.com/XTLS/Xray-core/releases">xray-core</a></li></ol><h2 id="播放器">播放器</h2><ol><li><a href="https://daumpotplayer.com/download/">potplayer</a></li><li><a href="https://mpv.io/">mpv</a></li><li><a href="https://mplayer.org/">mplayer</a></li></ol><h2 id="天文">天文</h2><ol><li><a href="https://stellarium.org/">Stellaruim</a></li><li><a href="https://github.com/CelestiaProject/Celestia/releases">Celestia</a></li></ol><h2 id="音乐">音乐</h2><ol><li><a href="https://github.com/LMMS/lmms/releases">LMMS 电子乐排序器</a></li><li><a href="https://qtractor.org/qtractor-index.html">Qtractor 电子乐排序器</a></li><li><a href="http://ardour.org/">ardour 电子乐排序器</a></li><li><a href="https://lilypond.org/">LilyPond 编写乐谱</a></li><li><a href="https://github.com/gillesdegottex/fmit/releases">fmit 乐器调音</a></li><li><a href="http://www.lenmus.org/en/phonascus/downloads">Phonascus 学习音乐理论</a></li></ol><h2 id="图像视频音频工具">图像视频音频工具</h2><ol><li><a href="https://www.gimp.org/">gimp</a> 类似 PS 图形（像素）处理工具。</li><li><a href="https://audacity.onl/">audacity</a> 音频处理工具。</li><li><a href="https://inkscape.org/">Inkscape</a> 类似 Illustrator 矢量图形编辑工具。</li></ol><h2 id="编程">编程</h2><ol><li><a href="https://www.arduino.cc/en/Main/Software">arduino</a></li><li><a href="https://github.com/fritzing/fritzing-app/releases">fritzing</a></li><li><a href="https://developer.android.com/studio">AndroidStduio</a></li><li>Keil</li><li>SourceInsight</li><li>multsim</li></ol><h2 id="其它">其它</h2><ol><li><a href="https://www.cpuid.com/softwares/cpu-z.html">CPU-Z</a></li></ol><h1>Linux 工具</h1><h2 id="文本编辑器-2">文本编辑器</h2><ol><li>vim</li><li>emacs</li><li>Atom</li><li>Gedit</li><li>nano</li><li>KWrite</li><li><a href="https://github.com/messageformat/Jed">JED</a></li></ol><h1>Android 工具</h1><h2 id="阅读器-2">阅读器</h2><ol><li><p><a href="https://github.com/gedoor/legado">阅读</a></p><ul><li>功能强大的开源阅读器，可看小说、听音乐和广播。</li></ul></li><li><p>静读天下专业版</p><ul><li><a href="https://pan.baidu.com/s/1if8iXfAjDqrHao-l-BSWWQ">https://pan.baidu.com/s/1if8iXfAjDqrHao-l-BSWWQ</a> 提取码 <code>4iiv</code></li></ul></li><li><p><a href="https://github.com/inorichi/tachiyomi">tachiyomi</a></p><ul><li>源不够丰富</li><li>挂 VPN 才能正常搜索漫画</li></ul></li><li><p><a href="https://github.com/feilongfl/Cimoc">cimoc</a></p></li></ol><h2 id="编辑器">编辑器</h2><ol><li><a href="https://github.com/shiftrot/droidvim/releases">DroidVim</a><ul><li>支持 Android 的 Vim 编辑器。</li></ul></li></ol><h2 id="新闻">新闻</h2><ol><li><a href="https://github.com/lovejjfg/Readhub">readhub</a></li></ol><h2 id="任务、计划、GDT-管理">任务、计划、GDT 管理</h2><ol><li><a href="https://github.com/orgzly/orgzly-android">orgzly</a></li></ol><h2 id="github">github</h2><ol><li>fasthub</li></ol><h2 id="下载-2">下载</h2><ol><li><p>videoder</p><ul><li>可下载 youtube 视频，以及其它很多网站的视频。</li></ul></li><li><p>iTubeGo</p><ul><li>有免费（每天只能下载一次）和付费版本，可下载很多网站视频，比 videoder 支持更多。</li></ul></li><li><p>dvd - youtubedl-android</p><ul><li><a href="https://github.com/yausername/dvd">https://github.com/yausername/dvd</a></li><li>安卓版本需要在 F-Droid 中下载。</li><li>免费下载视频工具，支持很多网站。</li></ul></li></ol><h2 id="VPN-2">VPN</h2><ol><li><a href="https://github.com/2dust/v2rayNG">v2rayNG</a></li></ol><h2 id="其它-2">其它</h2><ol><li><p>Authy</p><ul><li>2FA 工具</li></ul></li><li><p>全历史</p><ul><li>丰富的国内外历史</li></ul></li></ol><h1>电子书网站</h1><ol><li><p>jiumo Search（鸠摩搜索） <code>https://www.jiumodiary.com/</code></p></li><li><p>lorefree <code>https://ebook2.lorefree.com/</code></p></li><li><p>书格 <code>https://new.shuge.org/</code> （古籍）</p></li><li><p>sobooks <code>https://sobooks.cc/</code> （需要微信关注才能免费下载，也做有偿找书）</p></li><li><p>aibooks <code>https://www.aibooks.cc/</code></p></li><li><p>淘链客 <code>http://www.toplinks.cc</code></p><p>主要收集文档类资源下载链接的聚合型搜索引擎网站，资源类型主要包括：学习教程、讲义、电子书、试卷、习题、答案、课件、学习 / 研究素材，以及一些学习 / 学术类的公开课视频链接（注：不收录电影 / 电视剧 / 音乐等资源）。</p></li><li><p>读书小站 <code>https://ibooks.org.cn/</code></p></li><li><p>熊猫搜书 <code>https://ebook.huzerui.com/</code> （集合很多电子书网站）</p></li><li><p>全国图书馆参考咨询联盟 <code>http://www.ucdrs.superlib.net/</code></p><p>免费是因为注册后，可以通过 <code>文献传递</code> 方式下载，但这种方式限制比较严格，每个月下载页数有限定。</p><p>可以在 Chrome 浏览器上安装脚本管理插件油猴 <code>tampermonkey</code>，然后在 <a href="https://greasyfork.org/zh-CN"><code>Greasy  Fork</code></a> 搜索并安装<code>红太狼的平底锅</code> 脚本。</p><p><code>红太狼的平底锅</code> 提供一次性下载电子书的服务，每本电子书三元。</p><p><strong>下载 油猴插件 和 红太狼的平底锅脚本 可能需要 VPN。</strong></p><p><em>读秀</em> 和 <em>中国国家数字图书馆</em> 类似。</p></li><li><p>读秀 <code>https://www.duxiu.com/?lsu=shr#</code></p></li><li><p>中国国家数字图书馆 <code>http://www.nlc.cn/</code></p></li><li><p>FreeComputerBooks <code>https://freecomputerbooks.com/</code></p></li><li><p>zlibrary <code>https://1lib.us/</code> (有时需要 VPN)</p></li><li><p>SCI-HUB <code>https://sci-hub.se/</code> （和学术有关）</p></li><li><p>Library Genesis <code>https://libgen.rs/</code> (VPN)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中国历代官僚体系</title>
      <link href="2021/zhong-guo-li-dai-guan-liao-ti-xi/"/>
      <url>2021/zhong-guo-li-dai-guan-liao-ti-xi/</url>
      
        <content type="html"><![CDATA[<p>中国历朝历代官制不同，但总体框架仅有三类：三公九卿制、三省六部制和内阁六部制。</p><h1>夏朝</h1><p><img src="/2021/zhong-guo-li-dai-guan-liao-ti-xi/%E5%A4%8F%E6%9C%9D%E5%AE%98%E5%88%B6.png" alt="夏朝官制"></p><p>最高统治者称为“后”。</p><h2 id="中央官制">中央官制</h2><ul><li><p>四辅：亦称“四邻”，是夏后的重要谋臣和顾问官。前曰疑，后曰丞，左曰辅，右曰弼。地位相当于六卿。</p></li><li><p>六卿：亦称“六事之人”，是统帅军队的六军将领。既管军事又管政事。</p></li><li><p>瞽：乐官。乐师多由盲人充当，故称瞽。</p></li><li><p>羲和：掌管历法。</p></li><li><p>史：类似于后世的钦天监，负责观测星象并记录。</p></li><li><p>共工：掌管百工营建。</p></li><li><p>士或大理：掌管刑狱。</p></li><li><p>秩宗：掌管礼仪。</p></li><li><p>司徒：掌管文化教育。</p></li><li><p>后稷：掌管农业。</p></li><li><p>司空：掌管百官。</p></li><li><p>虞人：掌管山泽畜牧。</p></li><li><p>庖正：掌管膳食。</p></li><li><p>车正：掌管车辆。</p></li><li><p>牧正：掌管放牧。</p></li><li><p>水正：掌管水利。</p></li><li><p>啬人或啬夫：掌管贡赋。</p></li></ul><h2 id="地方官制">地方官制</h2><p>一曰州师，二曰侯国，三曰五服。</p><p>州师，就是在中心统治区，按山川河道的自然形式划分为九州，州下为师，师下为都，都下为里，里下为朋，朋下为邻。夏朝为了统治九州居民，在各州都设有行政长官为州牧。各州州牧，由夏后派遣王室贵族担任，或者由夏王的妻妾亲属统任。</p><p>侯国，就是在夏后中心统治区以外，被夏王征服而臣服的氏族，部落和方国，改建为侯国。五个侯国为一个州级行政区，设方伯一人为五国之长。这些侯国中的“方伯”，或由夏后派遣贵族担任，或指定被征服的部落中的原有首领担任。</p><p>五服，王室千里之外，或侯国之外，夏朝势力所及的边远地区。</p><p>禹贡九州：大禹对九州任土作贡。九州指冀、兖、青、徐、扬、荆、豫、梁和雍。</p><h1>商朝</h1><p><img src="/2021/zhong-guo-li-dai-guan-liao-ti-xi/%E5%95%86%E6%9C%9D%E5%AE%98%E5%88%B6.png" alt="商朝官制"></p><h2 id="中央官制-2">中央官制</h2><p>设有二相、六宰、五官。</p><ul><li><p>二相，尹和宰。</p><ul><li>尹，史称庶尹，后称之为相，是中央的最高政务官。百官之长，不仅有辅佐商王之责，还有立君和废君之权。</li><li>宰，又称冢宰，是最高的事务官，与尹相当。常参与政事，甚至在商王没有委任主管政事尹辅佐时执掌国政。</li></ul></li><li><p>六太，即太宰、太宗、太祝、太士、太卜等。</p><ul><li>太宰，辅佐殷商诸王的官员，类似后世的宰相之职。下设多尹，协助太宰分管各部门的事务，掌管农田开垦，负责王田耕作，管理王宫建筑等事务。多尹是尹的属臣。</li><li>太宗，主管全国宗庙祭祀的最高长官。</li><li>太祝，主持国家礼仪和文教事业的高级官员。</li><li>太士和太卜是负责国王敬神和占卜事务的官员。太士管祷告，太卜管占卜。</li></ul></li><li><p>五官，也称五司，即司徒、司马、司空、司土、司寇，分别掌管群臣，管理全国的各项政务和事务。</p><ul><li>司徒，主要负责考核、任用群臣和管理全国人口与户籍。</li><li>司马，掌管军政和军赋的官吏，同时兼人口和户籍的统计和管理。</li><li>司空，主管全国各类工程建筑和宫廷营造。</li><li>司土，主管全国土地垦辞和农业生产的官员。</li><li>司寇，全国最高的司法长官。</li></ul></li></ul><h1>周朝</h1><p>西周时代的政治思想以及官职制度对后世都产生了深远的影响。西周严格的施行宗法制度和嫡长子继承制，建立了周天子－卿士－诸侯－卿大夫－士－国人的统治序列。就官制而言，大体上有卿士－诸侯－卿大夫三等。卿士辅佐周天子执政，诸侯世守其国，卿大夫辅佐诸侯治理国家、并且从诸侯手里领受世袭采邑。</p><h2 id="官制">官制</h2><p><img src="/2021/zhong-guo-li-dai-guan-liao-ti-xi/%E5%91%A8%E6%9C%9D%E5%AE%98%E5%88%B6.png" alt="周朝官制"></p><p>辅佐周王的为太师、太傅、太保，合称三公。</p><p>三公之下有三事官（政务官、事务官和地方官）、四方（诸侯和方国、部族）和卿事寮（处理四方诸侯以及戎狄部族的各种事务）。</p><p>总揽朝政的太宰、掌祭祠礼仪的太宗、掌历法记事的太史、掌祈祷的太祝、掌神事的太士、掌占卜的太卜，合称六卿，六卿的僚属，总称为卿事寮。</p><p>掌土地和农人的司徒、掌百工职事的司空、掌军赋军政的司马、掌版籍爵禄的司士、掌刑罚的司寇，合称五官。</p><p>为王室服务的内廷事务官，有三公之佐的三少（少师、少傅、少保），有道、辅、弼、承四辅，有膳夫、缀衣、小臣、寺人、内竖、阍者、门尹、司王宥、火师、水师、大酋、太仆、御、右、萃车、趣马、师氏、虎资、舆人、医、艺人、隶人、太子宫尹等。</p><p>在王畿外服的封国，称为四方，包括侯、甸、男等诸侯。王朝有时派使臣到诸侯国任监国。诸侯在自己的封国内仿照王室设置百官有司，成为相对独立的政权，主要有三事官，即司徒、司马、司空，分掌政务、司法和民事。</p><p>周的各级主要官吏，都是在宗法制度基础上世袭，而且文武不分，平时治民，战时就是各级将领。</p><p>周朝的地方制度，有国、都、邑、野、鄙。周王和诸侯的都城为国，诸侯国中的大城为都，小城为邑，此外的地方称为野或鄙。</p>]]></content>
      
      
      <categories>
          
          <category> Culture </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阴符经</title>
      <link href="2021/yin-fu-jing/"/>
      <url>2021/yin-fu-jing/</url>
      
        <content type="html"><![CDATA[<h1>神仙抱一演道章</h1><p>观天之道，执天之行，尽矣。故天有五贼，见之者昌。五贼在心，施行于天。宇宙在乎手，万化生乎身。天性，人也；人心，机也。立天之道，以定人也。天发杀机，移星易宿；地发杀机，龙蛇起陆；人发杀机，天地反覆；天人合发，万化定基。性有巧拙，可以伏藏。九窍之邪，在乎三要，可以动静。火生于木，祸发必克；奸生于国，时动必溃。知之修炼，谓之圣人。</p><h1>国富安民演法章</h1><p>天生天杀，道之理也。天地，万物之盗；万物，人之盗；人，万物之盗。三盗既宜，三才既安。故曰：“食其时，百骸理；动其机，万化安。”人知其神之神，不知不神之所以神也。日月有数，大小有定，圣功生焉，神明出焉。其盗，机也。天下莫能见，莫能知。君子得之，固躬；小人得之，轻命。</p><h1>强兵战胜演术章</h1><p>瞽者善听，聋者善视。绝利一源，用师十倍。三反昼夜，用师万倍。心生于物，死于物，机在目。天之无恩，而大恩生。迅雷烈风，莫不蠢然。至乐性余，至静性廉。天之至私，用之至公，禽之制在气。生者，死之根；死者，生之根。恩生于害，害生于恩。愚人以天地文理圣，我以时物文理哲；人以愚虞圣，我以不愚虞圣；人以其奇期圣，我以不奇期圣。故曰：“沉水入火，自取灭亡，自然之道静，故天地万物生。天地之道浸，故阴阳胜。阴阳相推，而变化顺矣。”是故圣人知自然之道不可违，因而制之。至静之道，律历所不能契。爰有奇器，是生万象，八卦（入封）甲子，神机鬼藏。阴阳相胜之术，昭昭乎进于象矣。</p>]]></content>
      
      
      <categories>
          
          <category> Culture </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD 安装配置</title>
      <link href="2021/freebsd-an-zhuang-pei-zhi/"/>
      <url>2021/freebsd-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>FreeBSD 安装配置。</p><h1>FreeBSD 资源</h1><ul><li>官网镜像在 <a href="https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/">这里</a>。</li><li>国内中科大镜像在 <a href="https://mirrors.ustc.edu.cn/freebsd/releases/amd64/amd64/ISO-IMAGES/">这里</a>。</li><li>FreeBSD handbook 在 <a href="https://download.freebsd.org/ftp/doc/en/books/handbook/">这里</a>。</li></ul><h1>安装 FreeBSD</h1><p>可以在虚拟机 VirtualBox 中安装或制作 U 盘启动盘在物理机上安装。从 FreeBSD 9.0 开始，bsdinstall 代替了 sysinstall，具体教程查阅对应版本的 FreeBSD handbook。</p><p>本文是在 VirtualBox 中安装 FreeBSD。</p><h1>VirtualBox 设置</h1><p>VirtualBox 用户手册在 <a href="https://www.virtualbox.org/manual/">这里</a>。</p><ol><li><p>系统</p><ul><li>内存大小： 4096 MB</li><li>处理器： 4</li><li>启动顺序： 硬盘，光驱</li><li>EFI： 已启用</li><li>硬件加速： VT-x/AMD-V，嵌套分页，KVM 半虚拟化</li></ul></li><li><p>显示</p><ul><li>显存大小： 128 MB</li><li>显卡控制器： VBoxSVGA（桌面显示不能设置为 VMSVGA ）</li></ul></li><li><p>勾选 <strong>启用 EFI （只针对某些操作系统）</strong> 和 <strong>硬件时钟使用国际标准时间（UTC）</strong></p></li></ol><h2 id="问题">问题</h2><ol><li><p>开机进入 UEFI shell</p><p>启用 VirtualBox EFI，加载 ISO 文件后，直接进入了 UEFI shell。</p><p>在 shell 中输入 <code>FS0:</code> 或 <code>FS1:</code> 找到并执行 <code>bootx64.efi</code>，即可进入安装界面。</p></li><li><p>Xorg 安装完成后启动报错： cannot run in framebuffer mode</p><p>检查显卡控制器，确保不能设置为 VMSVGA 模式。</p></li></ol><h1>从 ISO 中安装软件</h1><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 以 root 登录，挂载 ISO 到 dist 目录。mkdir -p &#x2F;distmount -t cd9660 &#x2F;dev&#x2F;cd0 &#x2F;dist# 导入环境变量同时安装，如安装 sudo。env REPOS_DIR&#x3D;&#x2F;dist&#x2F;packages&#x2F;repos pkg install sudo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>配置超级用户</h1><p>FreeBSD 安装时创建的用户不具备超级用户权限，无法使用指令 <code>su</code> 切换到 root。假设创建的用户为 <code>naruto</code>，将该用户加入到超级用户组中。</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 以 root 登录，修改配置文件 &#x2F;etc&#x2F;group# 在 wheel 行添加 naruto 用户，wheel 组的用户成员可以使用 su 成为 root。如下：# wheel:*:0:root,naruto# 或使用指令pw groupmod wheel -m naruto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用指令 <code>sudo</code> 临时将 <code>naruto</code> 用户权限提升到 <code>root</code>。</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 使用 root 登录，或 su 切换到 root。pkg install sudo# 配置 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;sudoers 文件# 将 %wheel ALL&#x3D;(ALL)ALL 这一行的注释取消。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>换源</h1><ol><li><p>pkg 源</p><ul><li><p>禁用系统级 pkg 源</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">mv &#x2F;etc&#x2F;pkg&#x2F;FreeBSD.conf &#x2F;etc&#x2F;pkg&#x2F;FreeBSD.conf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建用户级 pkg 源</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 创建 repos 目录，增加 taiwan 和 ustc 两个源。mkdir -p &#x2F;usr&#x2F;local&#x2F;etc&#x2F;pkg&#x2F;reposvi &#x2F;usr&#x2F;local&#x2F;etc&#x2F;pkg&#x2F;repos&#x2F;taiwan.confvi &#x2F;usr&#x2F;local&#x2F;etc&#x2F;pkg&#x2F;repos&#x2F;ustc.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// taiwan.conf，latest 表示最新，quarterly 表示稳定。</span>taiwan<span class="token operator">:</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span> <span class="token string">"pkg+http://pkg0.twn.freebsd.org/$&#123;ABI&#125;/quarterly"</span><span class="token punctuation">,</span>  mirror_type<span class="token operator">:</span> <span class="token string">"srv"</span><span class="token punctuation">,</span>  signature_type<span class="token operator">:</span> <span class="token string">"fingerprints"</span><span class="token punctuation">,</span>  fingerprints<span class="token operator">:</span> <span class="token string">"/usr/share/keys/pkg"</span><span class="token punctuation">,</span>  enabled<span class="token operator">:</span> yes<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// ustc.conf 中科大源，可将 signature_type 置为 "none"。</span>ustc<span class="token operator">:</span><span class="token punctuation">&#123;</span>  url<span class="token operator">:</span> <span class="token string">"pkg+http://mirrors.ustc.edu.cn/freebsd-pkg/$&#123;ABI&#125;/quarterly"</span><span class="token punctuation">,</span>  mirror_type<span class="token operator">:</span> <span class="token string">"srv"</span><span class="token punctuation">,</span>  signature_type<span class="token operator">:</span> <span class="token string">"fingerprints"</span><span class="token punctuation">,</span>  fingerprints<span class="token operator">:</span> <span class="token string">"/usr/share/keys/pkg"</span><span class="token punctuation">,</span>  enabled<span class="token operator">:</span> yes<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新索引以生效</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">pkg udpate -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>portsnap 源</p><pre class="line-numbers language-none"><code class="language-none"># 配置文件 &#x2F;etc&#x2F;portsnap.conf，修改SERVERNAME&#x3D;portsnap.cn.freebsd.org# 其它源：portsnap.freebsd.cn, hshh.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>ports 源</p><pre class="line-numbers language-none"><code class="language-none"># 配置文件 &#x2F;etc&#x2F;make.conf，若不存在则创建，增加FETCH_CMD&#x3D;axelFETCH_BEFORE_ARGS&#x3D; -n10DISABLE_SIZE&#x3D;yesMASTER_SITE_OVERRIDE?&#x3D;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;freebsd-ports&#x2F;distfiles&#x2F;$&#123;DIST_SUBDIR&#125;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>配置桌面</h1><p>参考 <a href="https://community.kde.org/FreeBSD/Setup#Setup">这里</a>。</p><ol><li><p>安装 xorg</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 安装 xorgpkg install xorg# 或通过 ISO 安装env REPOS_DIR&#x3D;&#x2F;dist&#x2F;packages&#x2F;repos pkg install xorg# 将使用 xorg 的用户加入到 video 或 wheel 组pw groupmod video -m &#39;user&#39; || pw groupmod wheel -m &#39;user&#39;# 在配置文件 &#x2F;boot&#x2F;loader.conf 中，增加# kern.vty&#x3D;vt# 并没有在 &#x2F;etc&#x2F;X11 和 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d 中生成 xorg.conf 配置文件# 以下为手动配置方案。虽然没有自动生成配置文件，但我也没有手动配置。Xorg -configuremv &#x2F;root&#x2F;xorg.conf.new &#x2F;usr&#x2F;local&#x2F;etc&#x2F;X11&#x2F;xorg.conf.d&#x2F;xorg.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 KDE5 桌面环境</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 最小安装 plasma5-plasma，基本安装 kde-baseapps，全安装 kde5pkg install x11&#x2F;kde5# 或env REPOS_DIR&#x3D;&#x2F;dist&#x2F;packages&#x2F;repos pkg install x11&#x2F;kde5# KDE 依赖于 procfs，在 &#x2F;etc&#x2F;fstab 中添加一行# proc    &#x2F;proc     procfs    rw    0     0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装图形驱动</p><pre class="line-numbers language-none"><code class="language-none">pkg install xf86-video-intel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 sddm 登录界面</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">pkg install sddm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 VirtualBox ose additions 增强功能</p><p>参考 <a href="https://docs.freebsd.org/en_US.ISO8859-1/books/handbook/virtualization-guest-virtualbox.html">这里</a>。</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">pkg install virtualbox-ose-additions virtualbox-ose-kmod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改配置文件 /etc/rc.conf</p><pre class="line-numbers language-none"><code class="language-none">dbus_enable&#x3D;&quot;YES&quot;hald_enable&#x3D;&quot;YES&quot;vboxguest_enable&#x3D;&quot;YES&quot;vboxservice_enable&#x3D;&quot;YES&quot;vboxservice_flags&#x3D;&quot;--disable-timesync&quot;   # 若使能 ntpd 服务，则配置此项。sddm_enable&#x3D;&quot;YES&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分辨率配置</p><p>这块挺麻烦的，我是通过重装系统侥幸没有问题，到最后也没搞明白。遇到的主要解决方案是指令 <code>gtf</code> 和 <code>xrandr</code>，以及确保显卡控制器不能是 VMSVGA。</p></li><li><p>加速开机</p><p>关闭 sendmail 服务。在 /etc/rc.conf 中加入 sendmail_enable=“NONE”。</p></li></ol><h1>本地化</h1><p>FreeBSD 本地化通过用户的配置文件 <code>~/.login_conf</code> 或用户 shell 的启动文件<code>~/.profile</code>、<code>~/.bashrc</code> 或 <code>~/.cshrc</code> 设置变量 <code>LANG</code> 和 <code>MM_CHARSET</code> 实现。</p><ul><li><p><code>LANG</code> 本地化设置。格式： <code>语言代码_国家代码.编码</code>。</p></li><li><p><code>MM_CHARSET</code> 应用程序的 MIME 字符集。</p><table><thead><tr><th style="text-align:center">编码方式 charset</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">iso-8859-1</td><td style="text-align:center">西欧的编码</td></tr><tr><td style="text-align:center">gb2312</td><td style="text-align:center">中文编码</td></tr><tr><td style="text-align:center">utf-8</td><td style="text-align:center">世界通用语言编码</td></tr><tr><td style="text-align:center">big5</td><td style="text-align:center">繁体中文编码</td></tr></tbody></table></li></ul><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 查看支持本地化的类型locale -a# 查看当前配置locale<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 .login_conf 文件：</p><pre class="line-numbers language-none"><code class="language-none">me:\  :charset&#x3D;utf-8:\  :lang&#x3D;zh_CN.UTF-8:\  :setenv&#x3D;LC_ALL&#x3D;zh_CN.UTF-8,LC_MESSAGES&#x3D;zh_CN.UTF-8,LC_MONETARY&#x3D;zh_CN.UTF-8,LC_NUMERIC&#x3D;zh_CN.UTF-8,LC_TIME&#x3D;zh_CN.UTF-8,LC_COLLATE&#x3D;zh_CN.UTF-8,LC_CTYPE&#x3D;zh_CN.UTF-8:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字体">字体</h2><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 安装字体pkg install wqy-fonts# 设置字体xset fp+ &#x2F;usr&#x2F;local&#x2F;share&#x2F;fonts&#x2F;wqyxset fp rehash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中文输入法">中文输入法</h2><p>这里有不同的输入法框架 scim、fcitx 和 ibus，选择 fcitx 安装。</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">pkg install zh-fcitx zh-fcitx-configtool fcitx-qt5 fcitx-m17n zh-fcitx-libpinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于使用 tcsh ，故在配置文件 .cshrc 中添加：</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">setenv GTK_IM_MODULE fcitxsetenv GTK3_IM_MODULE fcitxsetenv XMODIFIERS @im&#x3D;fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若想输入法随桌面启动，则执行：</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">cp &#x2F;usr&#x2F;local&#x2F;share&#x2F;applications&#x2F;fcitx.desktop ~&#x2F;.config&#x2F;autostart&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决终端无法输入中文和显示中文：</p><pre class="line-numbers language-none"><code class="language-none"># 编辑 .cshrcsetenv LANG zh_CN.UTF-8setenv MM_CHARSET zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>FreeBSD fcitx 中文输入法很麻烦，安装好后没法正常使用，打开输入法配置乱配置了很久才能正常输入。</p><h1>兼容 Linux 二进制文件</h1><p>默认情况下，FreeBSD 并不开启 Linux 二进制兼容支持。开启需要加载 Linux 内核模块。</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh"># 32 位兼容kldload linux# 64 位兼容kldload linux64# 确认 kernel 和 linux.ko 模块加载kldstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想在启动时自动启用 Linux 兼容支持，可在配置文件 <code>/etc/rc.conf</code> 添加：</p><pre class="line-numbers language-none"><code class="language-none">linux_enable&#x3D;&quot;YES&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 linux_base-c7：</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">pkg install emulators&#x2F;linux_base-c7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置文件 <code>/etc/fstab</code> 中添加：</p><pre class="line-numbers language-none"><code class="language-none">linprocfs   &#x2F;compat&#x2F;linux&#x2F;proc  linprocfs       rw      0       0linsysfs    &#x2F;compat&#x2F;linux&#x2F;sys   linsysfs        rw      0       0tmpfs    &#x2F;compat&#x2F;linux&#x2F;dev&#x2F;shm  tmpfs   rw,mode&#x3D;1777    0       0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-tcsh" data-language="tcsh"><code class="language-tcsh">mount &#x2F;compat&#x2F;linux&#x2F;procmount &#x2F;compat&#x2F;linux&#x2F;sysmount &#x2F;compat&#x2F;linux&#x2F;dev&#x2F;shm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>待做清单</h1><ol><li>美化启动界面</li><li>开机和加载桌面时间很长</li></ol><h1>修订记录</h1><ul><li><p>2021-02-02</p><p>创建。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FreeBSD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作 U 盘启动盘</title>
      <link href="2021/you-pan-qi-dong-pan/"/>
      <url>2021/you-pan-qi-dong-pan/</url>
      
        <content type="html"><![CDATA[<p>以制作 win10 U 盘启动盘为例。</p><ol><li>获取 win10 镜像<ul><li>从 <a href="http://www.msdn1.cn/index.html">MSDN 我告诉你</a> 使用 ed2k 下载 ISO 镜像。</li><li>从 <a href="https://msdn.sjjzm.com/">这里</a> 使用百度网盘下载 ISO 镜像。</li></ul></li><li>在 Windows 中可以使用工具软碟通 <code>Ultraiso</code>、<code>rufus</code> 等制作 U 盘启动盘。</li><li>在 Linux 中可以使用 dd 指令制作 U 盘启动盘。</li></ol><h1>Windows 制作 U 盘启动盘</h1><p>网上多以 <code>Ultraiso</code> 为制作启动盘工具。比较烦的一点就是要下载 <code>Ultraiso</code>，用完后就长期吃灰了，且软碟通不是开源工具。</p><p>网上资料很多，不赘述。</p><h1>Linux 制作 U 盘启动盘</h1><p>使用 Linux 指令 <code>dd</code> 实现。</p><h2 id="镜像是-Linux">镜像是 Linux</h2><p>基本流程是：确定 U 盘设备号、umount U 盘、格式化 U 盘、使用 <code>dd</code> 指令烧录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 确定 U 盘的设备号，假设为 sdc</span><span class="token function">sudo</span> <span class="token function">fdisk</span> -l<span class="token comment"># 2. 若 U 盘被自动挂载，则先 umount</span><span class="token function">sudo</span> <span class="token function">umount</span> /dev/sdc*<span class="token comment"># 3. 格式化 U 盘</span><span class="token function">sudo</span> mkfs.vfat /dev/sdc<span class="token comment"># 4. 准备好 Linux ISO 文件</span><span class="token comment">#    if= 后面要跟刻录到 U 盘的 ISO 文件路径</span><span class="token comment">#    of= 后面是 U 盘设备号（不需要带分区号，直接用 sdc）</span><span class="token comment">#    写入过程是没有任何显示</span><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>~/fedora.iso <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdc <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dd 命令直接将 iso 文件数据写入 U 盘，所以 U 盘不包含一个标准的分区表，导致系统无法正常的识别其大小，也无法正常使用。</p><h2 id="镜像是-Windows">镜像是 Windows</h2><p>Linux 命令 <code>dd</code> 可直接将 Linux 的 iso 写入 U 盘就能开机引导，是因为 Linux 的 iso自带了引导文件。但 Windows 的 iso 不行，<code>dd</code> 指令失效。</p><p>制作一个 grub 多功能启动 U 盘，Widows 和 Linux 流程基本差不多。到 Grub2 官网下载 <a href="ftp://ftp.gnu.org/gnu/grub/">grub-2.xx-for-windows</a>。</p><p>可以将 U 盘分为两个分区，一个装 grub，一个装 ISO。本文不分区，且以 BIOS 方式为旧主板安装。</p><p>参考 <a href="https://www.aioboot.com/en/install-grub2-from-windows/">这里</a> 和<a href="http://www.jinbuguo.com/linux/grub.cfg.html">这里</a>。</p><ol><li><p>以管理员权限查看磁盘情况</p><ul><li>windows<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">wmic diskdrive list brief<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>linux<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>安装 grub2</p><ul><li><p>windows</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">cd F:\grub-2.xx-for-windowsgrub-install.exe --target&#x3D;i386-pc --boot-directory&#x3D;G: --recheck \\.\PHYSICALDRIVE2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>G:</code> U 盘盘符。</li><li><code>\\.\PHYSICALDRIVE2</code> U 盘 DeviceID。</li><li><code>target</code> 有许多选项：<ul><li><code>i386-pc</code> 用于传统 BIOS 启动 grub2。</li><li><code>x86_64-efi</code> 用于 UEFI 启动。</li><li><code>i386-efi</code> 用于 UEFI 32 位启动。</li></ul></li></ul></li><li><p>linux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sdc /mntgrub-install --target<span class="token operator">=</span>i386-pc --boot-directory<span class="token operator">=</span>/mnt --recheck /dev/sdc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h1>安装操作系统</h1><ol><li>开机进入 BIOS 中（一般是 F2），设置以 U 盘启动。</li><li>按步骤安装操作系统。注意选择合适的硬盘作为系统盘，确保系统盘空间要大，且无重要数据。win10 的 boot 区至少保留 600M。</li><li>重启电脑，恢复硬盘启动。</li></ol><h1>修订记录</h1><ul><li><p>2021-01-22</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> U 盘启动盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 实用操作</title>
      <link href="2021/hexo-shi-yong-cao-zuo/"/>
      <url>2021/hexo-shi-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1>hexo 站内文章引用</h1><p><code>&#123;% post_link '文章文件名（不要后缀）' '文章标题（可选）' %&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox 安装 fedora</title>
      <link href="2021/virtualbox-an-zhuang-fedora/"/>
      <url>2021/virtualbox-an-zhuang-fedora/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载 VirtualBox</p><ul><li>下载 <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>。</li><li>选择 <strong>Windows hosts</strong>。</li></ul></li><li><p>下载 Fedora</p><ul><li>下载 <a href="https://getfedora.org/zh_CN/workstation/download/">Fedora</a>。</li></ul></li></ol><h1>VirtualBox 安装</h1><ol><li>按步骤操作，点击下一步至完成。</li><li>管理 -&gt; 全局设定 -&gt; 常规 -&gt; 设置默认虚拟电脑位置。本例中位置 <code>E:\Vbox</code>。</li></ol><h1>fedora 安装</h1><ol><li>打开 <strong>VirtualBox</strong> ，点击工具栏 <strong>新建</strong> 选项，并处于 <strong>专家模式</strong>。</li><li>设置基本参数<ul><li>名称： <strong>fedora</strong></li><li>类型： <strong>Linux</strong></li><li>版本： <strong>Fedora (64-bit)</strong><em>注</em> ：若此选项无 64-bit 版本，则需要注意：<ul><li>CPU 是否是 64 位（至少 12 年之后的电脑应该没问题，可以用 CPU-Z 查看）。</li><li>CPU 是否允许硬件虚拟化（可在 BIOS 设置，不同系统不同，一般会有 virtualization 选项，Enable 使能即可）。</li></ul></li><li>内存大小：4096 MB<ul><li>本例中为物理内存的一半（不能独占所有物理内存）。</li></ul></li><li>其它选项默认。</li><li>点击 <strong>创建</strong>。</li></ul></li><li>创建虚拟硬盘<ul><li>文件位置本例文件位置在 <code>E:\Vbox\fedora</code> 目录下。</li><li>文件大小根据需求设置，本例设置为 100G。</li><li>其它选项默认</li><li>点击 <em>创建</em></li></ul></li><li>详细配置<ul><li>选中刚刚创建的 Fedora，点击工具栏 “设置” 选项按需详细配置。</li><li>设置 -&gt;系统 -&gt;处理器根据我电脑配置分配一半的 CPU 数量。</li><li>设置 -&gt;显示 -&gt;屏幕分配显存大小为 128M。</li></ul></li><li>安装镜像<ul><li>启动刚刚创建的 fedora。</li><li>选择启动盘选择下载的 Fedora 镜像文件，点击 <strong>启动</strong>。</li><li>待镜像文件载入，选择 <strong>Start Fedora-Workstation-Live xx</strong>。</li><li>等待一会，选择 <strong>Install to Hard Drive</strong>。</li><li>语言选项默认即可，点击 <strong>继续</strong>。</li><li>点击 <strong>系统</strong> 选项，默认设置，继续点击 <strong>完成</strong>。</li><li>点击 <strong>开始安装</strong>。</li><li>等待一段时间，系统安装完成，点击 <strong>退出</strong> ，退出安装界面，关闭 Fedora 系统（power off）。</li></ul></li><li>后续工作<ul><li>选中 fedora 右键设置<strong>设置 -&gt;系统 -&gt;启动顺序</strong> ，将硬盘选项移至顶部，作为第一个启动项。</li><li>其它选项根据需求配置</li><li>启动 Fedora</li></ul></li></ol><h1>快捷键定义</h1><ol><li>点击 <strong>徽键</strong> （Windows 图标），搜索 <strong>设置</strong> 。</li><li>打开 <strong>设置 -&gt;设备 -&gt;Keyboard</strong>。</li><li>在 Keyboard 底部， <strong>自定义快捷键区</strong> ，点击 <strong>+</strong>。</li><li>配置名称 ： <strong>终端</strong>。命令 ： <strong>/usr/bin/gnome-terminal</strong>。快捷键： <strong>Ctrl + Alt + T</strong>。</li></ol><h1>修订记录</h1><ul><li><p>2021-01-22</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vbox </tag>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox 安装 Arch(UFEI 和 LVM)</title>
      <link href="2021/virtualbox-an-zhuang-arch/"/>
      <url>2021/virtualbox-an-zhuang-arch/</url>
      
        <content type="html"><![CDATA[<p>使用 VirtualBox 安装 ArchLinux。</p><ol><li>安装过程中确保网络畅通。</li><li><a href="https://www.archlinux.org/download/">Arch Linux ISO</a> 镜像。</li></ol><h1>VirtualBox 设置</h1><ol><li><p>勾选 <code>设置 -&gt; 系统 -&gt; 启用 EFI（只针对某些操作系统）</code></p><p>请确保你的系统支持此选项。</p></li><li><p>取消勾选 <code>设置 -&gt;系统 -&gt;硬件时钟使用国际标准时间（UTC）</code></p><p>保持 VirtualBox 和本地 win10 系统时间一致。</p></li></ol><h1>准备工作</h1><ul><li>当 VirtualBox 加载 ArchLinux 镜像后，若以 EFI 启动则显示 <code>Arch Linux archiso x86_64 UEFI USB</code>。</li><li>直接回车确认，等待片刻后，我们以 root 身份登录虚拟控制台。</li></ul><h2 id="基础">基础</h2><ol><li><p>键盘布局</p><p>默认为 US 美式键盘映射。</p></li><li><p>验证启动模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /sys/firmware/efi/efivars<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若该目录存在则启用了 UEFI 模式。</p></li><li><p>连接到网络</p><p>守护进程 dhcpcd 已被默认启用来探测有线网络设备，并会尝试连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新系统时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="分区">分区</h2><p>参考 <a href="https://wiki.archlinux.org/index.php/Partitioning">这里</a>。</p><ol><li><p>分区工具</p><p>fdisk 最大支持 2.2T，想尝试新工具，本例使用 parted 分区。</p><p><img src="/2021/virtualbox-an-zhuang-arch/%E5%88%86%E5%8C%BA%E5%B7%A5%E5%85%B7.png" alt="分区工具"></p></li><li><p>分区布局</p><p>和 BIOS 分区不同，UEFI 分区必须有 EFI 系统分区，即 ESP，文件系统为 fat32。</p><p><img src="/2021/virtualbox-an-zhuang-arch/%E5%88%86%E5%8C%BA%E5%B8%83%E5%B1%80.png" alt="分区布局"></p></li><li><p>分区方案</p><ul><li><p>首先给 /boot 分区，余下空间以 LVM 方式分区。</p></li><li><p>整个空间以 LVM 方式分区。</p></li><li><p>100G 空间分区布局。</p><table><thead><tr><th style="text-align:center">分区</th><th style="text-align:center">大小</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">/boot</td><td style="text-align:center">548M</td><td style="text-align:center">FAT32</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">32G</td><td style="text-align:center">ext4</td></tr><tr><td style="text-align:center">swap</td><td style="text-align:center">4G</td><td style="text-align:center">swap</td></tr><tr><td style="text-align:center">/home</td><td style="text-align:center">rest</td><td style="text-align:center">ext4</td></tr></tbody></table></li></ul></li><li><p>初次分区操作</p><ul><li><p>使用 parted 指令如表。</p><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">功能</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">parted /dev/sdX</td><td style="text-align:center">操作 sdX 磁盘</td><td style="text-align:center">X 表示磁盘编号 a、b、…</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">查看分区相关信息</td><td style="text-align:center">print 指令缩写</td></tr><tr><td style="text-align:center">rm number</td><td style="text-align:center">删除分区编号</td><td style="text-align:center">number 分区编号</td></tr><tr><td style="text-align:center">mklabel gpt</td><td style="text-align:center">创建 gpt 分区表</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">mkpart primary 1 548</td><td style="text-align:center">创建 500M 的主分区</td><td style="text-align:center">单位为 MB</td></tr><tr><td style="text-align:center">set 1 boot on</td><td style="text-align:center">将编号 1 分区设置为 boot 分区</td><td style="text-align:center"></td></tr></tbody></table></li><li><p>使用 gpt 分区表。</p><p>此处 parted 可以指定 /dev/sda</p><pre class="line-numbers language-none"><code class="language-none">partedpmklabel gptp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/GPT%E5%88%86%E5%8C%BA.png" alt="GPT 分区"></p></li><li><p>分区</p><p>分成两个分区，其中一个将作为 boot 分区，另一个进一步以 LVM 方式分区。</p><pre class="line-numbers language-none"><code class="language-none">mkpart primary 1 548mkpart primary 548 -1p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/%E5%88%86%E5%8C%BA.png" alt="分区"></p></li><li><p>设置分区编号 1 Flags 为 ESP 或 boot 分区</p><pre class="line-numbers language-none"><code class="language-none">set 1 boot onp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/%E5%88%86%E5%8C%BA%E7%BC%96%E5%8F%B71.png" alt="分区编号1"></p></li><li><p>设置分区编号 2 Flags 为 LVM</p><p>退出 parted 使用 cfdisk 工具设置分区。</p><p><img src="/2021/virtualbox-an-zhuang-arch/%E5%88%86%E5%8C%BA%E7%BC%96%E5%8F%B72.png" alt="分区编号2"></p></li></ul></li><li><p>LVM 分区操作</p><ul><li><p>查看 blk</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建物理卷</p><p>由于初次分区只有两个分区，只有编号 2 分区采用 LVM 分区方案，故在 /dev/sda2建立物理卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pvcreate /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立卷组</p><p>将物理卷 sda2 加入到新建卷组 arch 中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vgcreate arch /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立逻辑卷</p><p>在 arch 卷组中建立 root、home 和 swap 逻辑卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvcreate -L 32G arch -n rootlvcreate -L 4G arch -n swaplvcreate -l +100%FREE arch -n home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/%E9%80%BB%E8%BE%91%E5%8D%B7.png" alt="逻辑卷"></p></li></ul></li></ol><h2 id="格式化">格式化</h2><ol><li><p>esp 格式化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.vfat -F32 /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>lvm 分区的格式化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.ext4 /dev/mapper/arch-rootmkfs.ext4 /dev/mapper/arch-home<span class="token function">mkswap</span> /dev/mapper/arch-swap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="格式化"></p><p>用&quot;fdisk -l&quot;指令查看分区情况。</p></li></ol><h2 id="挂载">挂载</h2><ol><li><p>lvm 分区挂载</p><ul><li><p>首先必须挂载根分区，然后才能挂载其它分区（包括 boot 分区）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/mapper/arch-root /mnt<span class="token function">mkdir</span> /mnt/home<span class="token function">mount</span> /dev/mapper/arch-home /mnt/home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>swap 交换分区无需挂载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">swapon</span> /dev/mapper/arch-swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>找不到 /dev/mapper/arch-? 逻辑卷</strong> ，可试一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">modprobe dm_modvgscanvgchange -ay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>esp 分区挂载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mnt/boot/efi<span class="token function">mount</span> /dev/sda1 /mnt/boot/efi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/virtualbox-an-zhuang-arch/%E6%8C%82%E8%BD%BDesp%E5%88%86%E5%8C%BA.png" alt="挂载esp分区"></p></li><li><p>确认是否已挂载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>安装</h1><h2 id="选择镜像">选择镜像</h2><ol><li><p>将 china 相关放在前面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>确保网络正常</p></li></ol><h2 id="安装基本系统">安装基本系统</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap -i /mnt base base-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可按需选择安装程序，等待一会即可完成。</p><h1>配置</h1><h2 id="fstab">fstab</h2><ol><li><p>建立 fstab</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">genfstab -U /mnt <span class="token operator">>></span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查 /mnt/etc/fstab 是否正确</p><p>主要检查 blkid 命令显示分区 UUID 是否和 fstab 文件一致。</p></li></ol><h2 id="chroot">chroot</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入刚刚安装的系统。</span>arch-chroot /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="基础配置">基础配置</h2><ol><li><p>时区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调整时间漂移：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hwclock --systohc --utc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地化</p><ul><li>由于新系统只安装了 vi，故<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/locale.gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>取消注释<pre class="line-numbers language-none"><code class="language-none">en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>生成本地化文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>设置主机名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> naruto <span class="token operator">></span> /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>root 密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="lvm2">lvm2</h2><ol><li><p>由于使用了 LVM，故需要在系统启动时中增加 lvm2 模块。编辑<code>/etc/mkinitcpio.conf</code>， 找到类似：</p><pre class="line-numbers language-none"><code class="language-none">HOOKS&#x3D;&quot;base udev autodetect modconf block filesystems keyboard fsck&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-none"><code class="language-none">HOOKS&#x3D;&quot;base udev autodetect modconf block lvm2 filesystems keyboard fsck&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 mkinitcpio.conf 文件后需要重新生成 archlinux 镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkinitcpio -p linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若 WARNING 所示模块未安装，则可忽略 WARNING。</p></li></ol><h2 id="网络配置">网络配置</h2><p>开启有线网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> dhcpcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>系统引导</h1><ol><li><p>安装引导程序 grub 和 efi 管理工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S grub efibootmgr --noconfirm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装引导</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>会有问题，必须解决，否则无法生成引导文件，期待下个版本解决</p><pre class="line-numbers language-none"><code class="language-none">WARNING: Failed to connect to lvmetad. Falling back to device scanning.WARNING: Device &#x2F;dev&#x2F;loop0 not initialized in udev database even after         waiting 10000000 microseconds...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决方案</p><ul><li><p>ctrl+D 退出 chroot 环境</p></li><li><p>操作如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mnt/hostlvm<span class="token function">mount</span> --bind /run/lvm /mnt/hostlvmarch-chroot /mnt<span class="token function">ln</span> -s /hostlvm /run/lvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>生成引导配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>整理新系统</h1><ol><li>退出 chroot 环境</li><li>卸载被挂载的分区<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> -R /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重启系统<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>增加新账户<ul><li>增加普通账户<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m -g <span class="token function">users</span> -s /bin/bash naruto<span class="token function">passwd</span> naruto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>增加 sudo 用户属性<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+w /etc/sudoers<span class="token builtin class-name">echo</span> <span class="token string">'naruto ALL=（ALL) ALL'</span> <span class="token operator">>></span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>删除 ISO 文件<ul><li>关机<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> -h now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除 <strong>设置 -&gt;存储 -&gt;控制器：IDE</strong></li></ul></li></ol><h1>引导界面</h1><ol><li>开机界面为 <strong>UEFI Interactive Shell</strong></li><li>三种解决方案<ul><li><p>每次开机从 shell 中手动启动 bootloader</p><pre class="line-numbers language-grub" data-language="grub"><code class="language-grub">\EFI\grub\grubx64.efi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把 bootloader 移到默认的路径 /EFI/BOOT/BOOTX64.EFI</p><p>实际上可以把 <code>EFI/grub/grubx64.efi</code> 按照默认的方式拷贝，推荐。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在 EFI 目录中</span><span class="token function">sudo</span> <span class="token function">mkdir</span> BOOT<span class="token function">sudo</span> <span class="token function">cp</span> grub/grubx64.efi BOOT/BOOTX64.EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 ESP 根目录创建一个 startup.nsh 脚本，添加内容为</p><pre class="line-numbers language-none"><code class="language-none">\EFI\grub\grubx64.efi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h1>网络管理</h1><ol><li><p>安装过程确认网络保持畅通</p></li><li><p>安装网络管理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -Syu networkmanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>图形界面安装</h1><ol><li><p>需要支持 X</p><ul><li>查看显卡类型<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lspci <span class="token operator">|</span> <span class="token function">grep</span> -e VGA -e 3D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看开源驱动<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -Ss xf86-video<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>通用显卡<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S xf86-video-vesa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><p><strong>然而以上都不需要</strong></p><ul><li>虚拟机的显卡需要虚拟机支持<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S virtualbox-guest-utils<span class="token comment">#选择默认 Linux 内核</span><span class="token comment">#  2)virtualbox-guest-modules-arch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>或者从 virtualBox 选项 <strong>设备 -&gt;安装增强功能</strong> 添加。</li></ul></li><li><p>X 窗口管理系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S xorg-server xorg-xinit xorg-twm xorg-xclock xterm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试 xorg：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">startx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>桌面环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S lxqt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S oxygen-icons kwin   图标和 kwin 桌面，原生 openbox 不好看pacman -S xscreensaver        屏幕保护pacman -S numlockx            小键盘numlockx on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>窗口管理器</p><p>lxqt 建议使用 sddm。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S sddmsystemctl <span class="token builtin class-name">enable</span> sddm.servicesystemctl start sddm.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装字体</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S wqy-zenhei wqy-microhei ttf-dejavu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装输入法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman fcitx fcitx-im fcitx-configtool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境变量，需在 /etc/environment 添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>fcitx<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>fcitx<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span><span class="token string">"@im=fcitx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启 X 桌面。</p></li><li><p>声音</p></li><li><p>应用程序安装</p></li></ol>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 firefox</span>pacman -S firefox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>展示</h1><ul><li>只装了 Firefox 和 kwin 的效果图。</li><li>终端调整了下设置。</li><li>很多细节未调整，此外这个 lxqt 桌面自我感觉不好用。</li></ul><p><img src="/2021/virtualbox-an-zhuang-arch/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="效果图"></p><h1>参考</h1><ol><li><a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">安装指南</a></li><li><a href="https://wiki.archlinux.org/index.php/Partitioning_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">分区 </a></li><li><a href="https://wiki.archlinux.org/index.php/LVM#Configure_mkinitcpio">LVM</a></li><li><a href="https://wiki.archlinux.org/index.php/VirtualBox#Installation_in_EFI_mode">VirtualBox</a></li></ol><h1>修订记录</h1><ul><li><p>2021-01-22</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> VirtualBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vbox </tag>
            
            <tag> archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 安装配置</title>
      <link href="2021/emacs-an-zhuang-pei-zhi/"/>
      <url>2021/emacs-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1>安装</h1><h2 id="WIN10">WIN10</h2><ul><li><p>官网 <code>https://www.gnu.org/software/emacs/download.html#nonfree</code></p></li><li><p>国内镜像 <code>http://mirrors.nju.edu.cn/gnu/emacs/windows</code></p></li><li><p>安装文件 <code>emacs-27.2-x86_64.zip</code> 或 <code>emacs-27.2-x86_64-installer.exe</code></p></li><li><p>安装</p><p>解压 <code>emacs-27.2-x86_64.zip</code> 到安装位置 <code>D:\emacs-27.2</code>。或运行<code>emacs-27.2-x86_64-installer.exe</code> 安装。</p></li><li><p>配置 HOME 目录</p><ol><li>注册表添加 <code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs</code> 项。</li><li><code>Emacs</code> 项添加字符串值。名称：<code>HOME</code>；数据：<code>D:\emacs-27.2</code>。</li><li><s>增加环境变量 <code>D:\emacs-27.2</code></s></li></ol></li></ul><h1>.emacs.d</h1><p>可使用 purcell 的配置 <code>https://github.com/purcell/emacs.d</code>。在文件<code>lisp/init-local.el</code> 增加自己的配置。</p><p><code>.emacs.d</code> 配置文件目录在 <code>D:\emacs-27.2</code>，需要自己创建。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 配置文件目录结构</span>.eamcs.d/├─lisp/          <span class="token comment">;; 配置文件，命名格式为 init-xxx.el</span>├─site-lisp/     <span class="token comment">;; 不在 elpa, melpa 或其它仓库的第三方配置文件。注意添加到 load-path。</span>├─early-init.el  <span class="token comment">;; 预初始化配置文件，在 package-initialize 之前执行</span>└─init.el        <span class="token comment">;; 初始化配置文件，初始化 load-path, package-archives, 加载 lisp 配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>依赖包管理</h1><h2 id="设置仓库源">设置仓库源</h2><p>Emacs 默认仓库源是 <code>https://elpa.gnu.org/</code> 和 <code>https://melpa.org</code>。由于 FW 导致访问经常超时，所以使用国内仓库源。</p><pre class="line-numbers language-none"><code class="language-none">国内仓库源- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;elpa&#x2F;melpa&#x2F;- http:&#x2F;&#x2F;elpa.emacs-china.org&#x2F;melpa&#x2F;- http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;elpa&#x2F;org&#x2F;- http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;elpa&#x2F;gnu&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Emacs 提供了一个 <code>package-archives</code> 变量来设置仓库源，它可以解决仓库源和网络问题。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 配置仓库源</span><span class="token punctuation">(</span><span class="token keyword">setq</span> package-archives <span class="token punctuation">'(</span><span class="token punctuation">(</span><span class="token string">"melpa"</span> <span class="token punctuation">.</span> <span class="token string">"https://melpa.org/packages/"</span><span class="token punctuation">)</span>                         <span class="token punctuation">(</span><span class="token string">"melpa-stable"</span> <span class="token punctuation">.</span> <span class="token string">"https://stable.melpa.org/packages/"</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">"org"</span> <span class="token punctuation">.</span> <span class="token string">"https://orgmode.org/elpa/"</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">"elpa"</span> <span class="token punctuation">.</span> <span class="token string">"https://elpa.gnu.org/packages/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件包列表">软件包列表</h2><p>Emacs 默认使用 list-packages 浏览官方的仓库列表，可使用的包比较少，主要是因为LICENSE 不是 GPL 自由软件授权，都不会加入该仓库。</p><p>使用 <code>M-x list-packages RET</code>，会打开一个 <code>*Packages*</code> 的 buffer 显示软件包列表。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 快捷键管理 *Packages*</span>i     <span class="token comment">; 标记需要安装的包</span>d     <span class="token comment">; 标记需要删除的包</span>u     <span class="token comment">; 取消标记的安装包</span>x     <span class="token comment">; 安装已标记的安装包</span>U     <span class="token comment">; 更新安装包</span>g     <span class="token comment">; 刷新列表</span>n     <span class="token comment">; 下一个包</span>p     <span class="token comment">; 上一个包</span>H     <span class="token comment">; 正则过滤包并隐藏</span>/     <span class="token comment">; 过滤</span>    / <span class="token comment">; 清除过滤</span>    k <span class="token comment">; 基于关键字过滤</span>    n <span class="token comment">; 基于名字过滤</span>h     <span class="token comment">; 帮助文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装软件包">安装软件包</h2><p>命令 <code>M-x package-install RET &lt;package_name&gt;</code> 可直接输入包名进行安装。下载的包会存放在 <code>~/.emacs.d/elpa/</code> 目录下。可以通过设置 <code>package-user-dir</code> 变量，指定软件包安装位置。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 指定软件包安装位置</span><span class="token punctuation">(</span><span class="token keyword">setq</span> package-user-dir <span class="token string">"your package dir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其它软件包命令">其它软件包命令</h2><ul><li>重新安装软件包 <code>M-x package-reinstall RET &lt;package_name&gt;</code>。</li><li>更新软件包 <code>M-x upgrade-package RET</code>。</li><li>删除软件包 <code>M-x package-delete RET &lt;package_name&gt;</code>。</li><li>刷新软件包列表 <code>M-x package-refresh-contents</code>。</li></ul><h1>字体</h1><p>可解决中文卡顿问题（27.2 无此问题）。</p><ol><li><p><a href="https://dejavu-fonts.github.io/Download.html">dejavu-fonts</a> 字体</p></li><li><p>编码设置</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token punctuation">(</span><span class="token car">set-language-environment</span> <span class="token quoted-symbol variable symbol">'UTF-8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">set-locale-environment</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">set-default-coding-systems</span> <span class="token quoted-symbol variable symbol">'utf-8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>中英文等宽设置</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"> <span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">set-font</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">english</span> <span class="token argument variable">chinese</span> <span class="token argument variable">english-size</span> <span class="token argument variable">chinese-size</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">set-face-attribute</span> <span class="token quoted-symbol variable symbol">'default</span> <span class="token boolean">nil</span> <span class="token lisp-property property">:font</span>  <span class="token punctuation">(</span><span class="token car">format</span>   <span class="token string">"%s:pixelsize=%d"</span>  english english-size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">charset</span> <span class="token punctuation">'(</span><span class="token car">kana</span> han symbol cjk-misc bopomofo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">set-fontset-font</span> <span class="token punctuation">(</span><span class="token car">frame-parameter</span> <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'font</span><span class="token punctuation">)</span> charset  <span class="token punctuation">(</span><span class="token car">font-spec</span> <span class="token lisp-property property">:family</span> chinese <span class="token lisp-property property">:size</span> chinese-size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; 英文字体比中文字体小四号才会中英文等宽设置</span> <span class="token punctuation">(</span><span class="token car">set-font</span>   <span class="token string">"Dejavu Sans Mono"</span> <span class="token string">"WenQuanYi Zen Hei Mono"</span> <span class="token number">16</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>配置</h1><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token comment">;; 禁止启动画面</span><span class="token punctuation">(</span><span class="token keyword">setq</span> inhibit-startup-message <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; 禁止滚动条</span><span class="token punctuation">(</span><span class="token car">scroll-bar-mode</span> <span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment">;; 禁止工具栏</span><span class="token punctuation">(</span><span class="token car">tool-bar-mode</span> <span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment">;; 禁止小窗提示</span><span class="token punctuation">(</span><span class="token car">tooltip-mode</span> <span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment">;; 禁止菜单栏</span><span class="token punctuation">(</span><span class="token car">menu-bar-mode</span> <span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment">;; 设置侧边空白大小</span><span class="token punctuation">(</span><span class="token car">set-fringe-mode</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">;; 关闭出错时蜂鸣提示</span><span class="token punctuation">(</span><span class="token keyword">setq</span> visible-bell <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; 不需要备份文件</span><span class="token punctuation">(</span><span class="token keyword">setq</span> make-backup-files <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">;; 初始化 package 源</span><span class="token punctuation">(</span><span class="token keyword">require</span> <span class="token quoted-symbol variable symbol">'package</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">setq</span> package-archives <span class="token punctuation">'(</span><span class="token punctuation">(</span><span class="token string">"melpa"</span> <span class="token punctuation">.</span> <span class="token string">"https://melpa.org/packages/"</span><span class="token punctuation">)</span>                         <span class="token punctuation">(</span><span class="token string">"org"</span> <span class="token punctuation">.</span> <span class="token string">"https://orgmode.org/elpa/"</span><span class="token punctuation">)</span>                         <span class="token punctuation">(</span><span class="token string">"elpa"</span> <span class="token punctuation">.</span> <span class="token string">"https://elpa.gnu.org/packages/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">package-initialize</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unless</span> package-archive-contents  <span class="token punctuation">(</span><span class="token car">package-refresh-contents</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 显示行号</span><span class="token punctuation">(</span><span class="token car">column-number-mode</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">global-display-line-numbers-mode</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; 一些 mode 不需要显示行号</span><span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">mode</span> <span class="token punctuation">'(</span><span class="token car">org-mode-hook</span>                term-mode-hookshell-mode-hook                eshell-mode-hook<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">add-hook</span> mode <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">display-line-numbers-mode</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>FAQ</h1><ul><li>gpg 路径错误，导致 <code>no public key</code>。</li></ul><p>执行 <code>package-refresh-package</code> 时报错 <code>gpg: keyblock resource '/d/emacs-27.2/d:/emacs-27.2/.emacs.d/elpa/gnupg/pubring.kbx': No such file or directory</code></p><p>可观察到 pubring.kbx 路径有错。是由 gpg 和 package.el 路径解析不统一造成。公钥路径由变量 <code>package-gnupghome-dir</code> 决定，路径由 d:/ 开始，而gpg 只识别以 /d/ 开始的路径，额外在公钥路径前面添加了 /d/，导致公钥路径错误。手动指定路径。</p><pre class="line-numbers language-emacs-lisp" data-language="emacs-lisp"><code class="language-emacs-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> package-gnupghome-dir <span class="token string">"/d/emacs-27.2/.emacs.d/elpa/gnupg"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs 基本操作</title>
      <link href="2021/emacs-ji-ben-cao-zuo/"/>
      <url>2021/emacs-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1>约定</h1><p><code>C</code> 表示 <code>Ctrl</code> ，<code>M</code> 表示 <code>Alt</code> ，<code>S</code> 表示 <code>Shift</code>，<code>DEL</code> 表示 <code>Backspace</code>，<code>RET</code> 表示 <code>Enter</code>。</p><p><code>Ctrl-x</code> 或 <code>C-x</code> 表示 <code>Ctrl+x</code>，<code>M-x</code> 表示 <code>Alt+x</code>。</p><p><code>Ctrl-x Ctrl-f</code> 表示先按 <code>Ctrl-x</code> 再按 <code>Ctrl-f</code>。实际操作时按住 <code>Ctrl</code> 然后依次按 <code>x</code> 和 <code>f</code>。</p><p><code>ESC</code> 由 <code>C-[</code> 替代。</p><p><code>C-g</code> 取消之前的按键。</p><p><code>[操作内容]</code> 指令的操作内容。具体操作内容用文字描述。</p><h1>Help</h1><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; help 帮助指令</span>C-h ?    <span class="token comment">;; 查看帮助的帮助</span>C-h m    <span class="token comment">;; 查看当前模式</span>C-h c    <span class="token comment">;; 显示快捷键绑定的命令</span>C-h k    <span class="token comment">;; 显示快捷键绑定的命令和它的作用</span>C-h f    <span class="token comment">;; 显示函数的功能</span>C-h b    <span class="token comment">;; 显示当前缓冲区所有可用的快捷键</span>C-h <span class="token boolean">t</span>    <span class="token comment">;; 打开emacs教程</span>C-h v    <span class="token comment">;; 查看变量值</span>C-h o    <span class="token comment">;; 查看符号</span>C-h w    <span class="token comment">;; 查看某个函数绑定的快捷键</span>C-h r    <span class="token comment">;; 查看使用手册</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>File 管理</h1><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x C-f    <span class="token comment">;; 打开文件，若不存在则创建</span>C-x C-s    <span class="token comment">;; 保存文件</span>C-x C-w    <span class="token comment">;; 另存文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其它 File 操作</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x r    <span class="token comment">;; 以只读方式打开文件</span>C-x C-q  <span class="token comment">;; 改变窗口只读属性</span>C-x i    <span class="token comment">;; 插入其他文件内容到当前 buffer</span>C-x s    <span class="token comment">;; 保存所有文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Buffer 管理</h1><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x b    <span class="token comment">;; 切换 buffer，若不存在则创建</span>C-x C-b  <span class="token comment">;; 查看 buffer</span>C-x C-s  <span class="token comment">;; 保存 buffer</span>C-x k    <span class="token comment">;; 关闭 buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>批量管理 buffer</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x C-b  <span class="token comment">;; 进入 Buffer 列表</span>d        <span class="token comment">;; 标记删除</span>u        <span class="token comment">;; 取消当前行标记</span>U        <span class="token comment">;; 取消全部标记</span>x        <span class="token comment">;; 执行操作</span>?        <span class="token comment">;; 查看按键帮助</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Window 管理</h1><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x <span class="token number">0</span>    <span class="token comment">;; 关闭当前 window</span>C-x <span class="token number">1</span>    <span class="token comment">;; 关闭其它 window</span>C-x <span class="token number">2</span>    <span class="token comment">;; 水平分割 window</span>C-x <span class="token number">3</span>    <span class="token comment">;; 垂直分割 window</span>C-x o    <span class="token comment">;; 切换 window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在另一个 window 操作 buffer</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x <span class="token number">4</span> b    <span class="token comment">;; 在另一个 window 打开 buffer</span>C-x <span class="token number">4</span> C-o  <span class="token comment">;; 在另一个 window 打开 buffer 但不选中</span>C-x <span class="token number">4</span> f    <span class="token comment">;; 在另外一个 window 打开文件</span>C-x <span class="token number">4</span> d    <span class="token comment">;; 在另外一个 window 打开文件夹</span>C-x <span class="token number">4</span> <span class="token number">0</span>    <span class="token comment">;; 关闭当前 window 和 buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一行不能显示所有内容时，该行左右两边会有一个箭头表示前后还有内容</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x &lt;    <span class="token comment">;; 看右边的东西</span>C-x >    <span class="token comment">;; 看左边的东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Tab 标签管理</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x <span class="token boolean">t</span> <span class="token number">2</span>    <span class="token comment">;; 新建 Tab</span>      <span class="token number">1</span>    <span class="token comment">;; 关闭其它 Tab</span>      <span class="token number">0</span>    <span class="token comment">;; 关闭当前 Tab</span>      b    <span class="token comment">;; 在新 Tab 中打开 Buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>Frame 管理</h1><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">C-x <span class="token number">5</span> <span class="token number">2</span>    <span class="token comment">;; 创建 frame</span>C-x <span class="token number">5</span> b    <span class="token comment">;; 在新 frame 中打开 buffer</span>C-x <span class="token number">5</span> o    <span class="token comment">;; 切换 frame</span>C-x <span class="token number">5</span> <span class="token number">0</span>    <span class="token comment">;; 删除 frame</span>C-x <span class="token number">5</span> f    <span class="token comment">;; 在新 frame 中打开或创建文件</span>C-x <span class="token number">5</span> b    <span class="token comment">;; 在新 frame 中打开或创建 buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Dired 管理</h1><p>打开文件管理 <code>C-x d</code> 或 <code>M-x dired-jump</code> 或 <code>C-x C-f</code>。</p><p>导航</p><ul><li><code>RET</code> 打开目录或文件</li><li><code>S-RET</code> 在另外一个 window 中打开文件</li><li><code>M-RET</code> 在另外一个 window 中预览文件</li><li><code>g o</code> 以预览方式打开一个文件，<code>q</code> 关闭</li><li><code>n</code> 下一项</li><li><code>p</code> 上一项</li><li><code>j</code> 在 buffer 中跳转文件</li><li><code>^</code> 返回父级目录</li><li><code>q</code> 退出 Dired buffer</li></ul><p>标记文件</p><ul><li><code>m</code> 标记光标指定文件</li><li><code>u</code> 取消标记的文件</li><li><code>U</code> 取消所有标记的文件</li><li><code>* t</code> 反选 buffer 中未标记文件</li><li><code>*</code> 其它自动标记函数</li><li><code>% m</code> 使用正则表达式标记文件</li><li><code>k</code> 删除所有 mark 标记，需使用 <code>g</code> 刷新</li></ul><p>复制和重命名文件</p><ul><li><code>C</code> 复制文件</li><li><code>R</code> 重命名文件</li><li><code>% R</code> 使用正则表达式重命名</li></ul><p>删除文件</p><ul><li><code>D</code> 删除文件</li><li><code>d</code> 标记待删除文件</li><li><code>x</code> 确认并执行删除已标识删除的文件</li></ul><p>压缩和解压文件</p><ul><li><code>Z</code> 压缩或解压格式为 .tar.gz 的文件或目录</li><li><code>c</code> 选择压缩指定文件</li></ul><p>属性和权限</p><ul><li><code>O</code> 变更文件 owner</li><li><code>G</code> 变更文件所属组</li><li><code>M</code> 变更文件权限</li></ul><p>其它</p><ul><li><code>g</code> 刷新，重新加载已修改文件</li><li><code>T</code> 修改时间戳</li><li><code>+</code> 创建新目录</li><li><code>S</code> 创建符号链接文件</li><li><code>L</code> 加载 emacs lisp 文件到 emacs</li><li><code>~</code> 给所有的 <code>backup</code> 文件设置标识</li><li><code>=</code> 比较文件</li></ul><h1>剪切复制粘贴</h1><ol><li><p><code>C-w</code> 剪切</p></li><li><p><code>M-w</code> 复制</p></li><li><p><code>C-y</code> 粘贴</p></li><li><p>切换粘贴内容 <code>M-y</code>，在按下 <code>C-y</code> 后执行</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">按键</th></tr></thead><tbody><tr><td style="text-align:center">剪切</td><td style="text-align:center">C-w</td></tr><tr><td style="text-align:center">复制</td><td style="text-align:center">M-w</td></tr><tr><td style="text-align:center">粘贴</td><td style="text-align:center">C-y</td></tr><tr><td style="text-align:center">切换粘贴内容</td><td style="text-align:center">M-y</td></tr></tbody></table></li><li><p><code>M-&lt;DEL&gt;</code> 剪切当前光标前的一个字符到剪贴板</p></li><li><p><code>M-d</code> 剪切当前光标后的一个字符到剪贴板</p></li><li><p><code>C-k</code> 剪切从光标到行尾的字符到剪贴板</p></li><li><p><code>C-a C-k</code> 剪切一整行到剪贴板中，其实也可以用于删除一整行</p></li></ol><hr><ol start="9"><li>使用 <code>Ctrl c, Ctrl v, Ctrl x</code> 标准快捷键<ul><li>方法一 <code>M-x cua-mode</code></li><li>方法二修改配置文件，增加 (cua-mode 1)</li></ul></li></ol><h1>历史命令</h1><ul><li><code>M-p</code> 上翻历史命令</li><li><code>M-n</code> 下翻历史命令</li></ul><h1>书签</h1><ul><li><code>C-x r m</code> 在当前光标设置书签(<code>M-x bookmark-set</code>)</li><li><code>C-x r b</code> 跳转到某个书签(<code>M-x bookmark-jump</code>)</li><li><code>C-x r l</code> 列出当前所有标签(<code>M-x bookmark-bmenu-list</code>)</li></ul><hr><p>在列表书签中</p><ul><li><code>RET</code> 打开书签标识的区域</li><li><code>s</code> 将当前书签列表保存至文件中</li><li><code>r</code> 修改书签名称</li><li><code>d</code> 设置删除标识</li><li><code>x</code> 删除标识书签</li><li><code>u</code> 取消标识书签</li></ul><h1>文本操作</h1><h2 id="移动">移动</h2><ol><li><code>C-n</code> 将光标向下移动一行</li><li><code>C-p</code> 将光标向上移动一行</li></ol><hr><ol start="3"><li><code>C-b</code> 将光标左移一个字符</li><li><code>C-f</code> 将光标右移一个字符</li></ol><hr><ol start="5"><li><code>M-f</code> 将光标右移一个单词</li><li><code>M-b</code> 将光标左移一个单词</li></ol><hr><ol start="7"><li><code>C-v</code> 向下移动一屏</li><li><code>M-v</code> 向上移动一屏</li><li><code>C-l</code> 将当前光标所在行移动到屏幕中央（注意：这里是字母L）</li></ol><hr><ol start="10"><li><code>C-a</code> 将光标移到行首</li><li><code>C-e</code> 将光标移到行尾</li><li><code>M-m</code> 将光标移动到行首的第一个非空白字符</li></ol><hr><ol start="13"><li><code>M-S-&lt;</code> 将光标移动到文件开头</li><li><code>M-S-&gt;</code> 将光标移动到文件末尾</li></ol><h2 id="文本选择">文本选择</h2><ol><li><code>C-S-e</code> 选中从当前位置到行尾的文本</li></ol><hr><ol start="2"><li><code>C-S-n</code> 从当前位置开始往下选中一行文本</li><li><code>C-S-p</code> 从当前位置开始往上选中一行文本</li></ol><hr><ol start="4"><li><code>C-S-f</code> 从当前位置开始往后选中一个字符</li><li><code>C-S-b</code> 从当前位置开始往前选中一个字符</li></ol><hr><ol start="6"><li><code>M-S-f</code> 从当前位置开始往后选中一个单词</li><li><code>M-S-b</code> 从当前位置开始往前选中一个单词</li></ol><hr><ol start="8"><li><code>M-S-e</code> 选中从当前位置开始到当前句尾的文本</li><li><code>M-S-a</code> 选中从当前位置开始到当前句首的文本</li></ol><hr><ol start="10"><li><code>C-S-v</code> 向下选择一屏</li><li><code>M-S-v</code> 向上选择一屏</li></ol><hr><ol start="12"><li><code>C-S-l</code> 让当前光标所在行居中</li><li><code>C-x h</code> 全选</li><li><code>C-S-@ [其他移动操作]</code> 选中从光标起始位置到移动后位置中间的文本</li></ol><h2 id="文本编辑">文本编辑</h2><ul><li><code>C-u [N] [操作序列]</code> 重复执行一个操作序列 N 次</li></ul><hr><ul><li><code>C-/ 或 C-x u</code> 撤销（undo）上次操作，多次按可以撤销之前的多次操作</li><li><code>C-g C-/</code> 重做（redo），用于重做上次的撤销动作（撤销之后后悔了，想恢复重做）</li></ul><hr><ul><li><code>C-k</code> 删除光标到行尾的所有字符</li><li><code>&lt;DEL&gt;</code> 删除当前光标前的一个字符</li><li><code>C-&lt;DEL&gt;</code> 删除当前光标前的一个单词</li><li><code>C-d 或 &lt;Delete&gt;</code> 删除当前光标后的一个字符</li></ul><hr><ul><li><code>C-e &lt;RET&gt;</code> 在当前行下方插入一空行</li><li><code>C-x C-q</code> 让当前buffer在“只读”和“读写”两种编辑模式之间切换</li></ul><hr><ul><li><code>M-\</code> 删除光标处所有空格和 TAB。</li><li><code>M-SPC</code> 删除光标处所有空格和 TAB，但保留一个空格。</li><li><code>C-x C-o</code> 删除光标周围的空白行，保留当前行。</li></ul><hr><ul><li><code>C-t</code> 交换两个字符的位置。</li><li><code>M-t</code> 交换两个 word 的位置。</li><li><code>C-x C-t</code> 交换两行的位置。</li></ul><hr><ul><li><code>M-/</code> 匹配这个首字母的单词。</li><li><code>M-c</code> 将下一个单词开头大写，后面小写。</li></ul><hr><p>文本字数统计</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 整个 buffer 字数统计</span>M-=<span class="token comment">;; 或者</span>M-x count-words-region<span class="token comment">;; 选中区域统计</span>M-x count-words<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找与替换">查找与替换</h2><ul><li><code>C-s [查找的内容]</code> 向下/右查找</li><li><code>C-r [查找的内容]</code> 反向查找</li></ul><hr><ul><li><code>C-M-s [查找的内容]</code> 向下/右正则查找</li><li><code>C-M-r [查找的内容]</code> 反向正则查找</li></ul><hr><ul><li><code>M-%</code> 查找并替换。输入 y 替换并跳到下一个，输入 n 忽略并跳到下一个，输入 q 结束，输入 ！ 替换剩下的全部。</li></ul><hr><ul><li><code>M-s o</code> 正则匹配查找，并显示匹配列表。</li><li><code>M-s h .</code> 查找光标所在 word，并高亮显示。</li></ul><h2 id="文本编码">文本编码</h2><ol><li><code>M-x describe-coding-system &lt;RET&gt;</code> 查看当前缓冲区的编码格式</li><li><code>C-x &lt;RET&gt; r &lt;TAB&gt;</code> 列出当前的所有编码</li><li><code>C-x &lt;RET&gt; f utf-8 &lt;RET&gt;</code> 改变当前缓冲区的编码为 utf-8</li></ol><h2 id="杂项">杂项</h2><ul><li><code>C-q Tab</code> 输入 TAB</li><li><code>M-g M-g [行号]</code> 跳转到指定行数</li><li><code>M-x untabify</code> 转换 TAB 为空格。先选中转换范围，然后执行，如选中整篇文档 <code>C-x h</code>。</li><li><code>C-M-\</code> 自动缩进</li><li><code>C-x f</code> 指定填充列，可设置为 80 换行。</li></ul><h1>编程</h1><ul><li><code>C-c .</code> 程序缩进风格</li><li><code>C-M-\</code> 自动缩进</li></ul><h1>游戏</h1><ul><li><code>M-x hanoi</code> 汉诺塔，默认 3 个碟子。<code>M-x hanoi-unix</code> 和 <code>M-x hanoi-unix-64</code> 使用 unix 时间戳的位数作为默认碟子个数，并且每秒钟自动移动一次。</li><li><code>M-x 5x5</code> 5x5 逻辑解密游戏，你有一个 5x5 的网格，中间的十字被填满；你的目标是通过按正确的顺序切换它们的空满状态来填充所有的单元格，从而获得胜利。</li><li><code>M-x animation-birthday-present</code> 文本动画。</li><li><code>M-x butterfly</code> 面向 XKCD 漫画致敬。</li><li><code>M-x blackbox</code> 黑箱。游戏的目标是通过向黑盒子发射光线来找到四个隐藏的球。有四种可能：1) 射线将通过盒子不受干扰；2) 它将击中一个球并被吸收；3) 它将偏转并退出盒子，或 4) 立即偏转，甚至不能进入盒子。</li><li><code>M-x bubble</code> 泡泡。你必须用尽可能少移动清除尽可能多的“泡泡”。当你移除气泡时，其他气泡会掉落并粘在一起。</li><li><code>M-x doctor</code> 心理医生。</li><li><code>M-x dunnet</code> 文字冒险游戏。</li><li><code>M-x gomoku</code> 五子棋。</li><li><code>M-x life</code> 生命游戏。</li><li><code>M-x tetris</code> 俄罗斯方块。</li><li><code>M-x pong</code> 乒乓。</li><li><code>M-x snake</code> 贪吃蛇。</li><li><code>M-x solitire</code> 一个基于“钉子”的游戏，你可以选择一块石头（o）并“跳过”相邻的石头进入洞中（.），并在这个过程中去掉你跳过的石头，最终只能在棋盘上留下一块石头，重复该过程直到棋盘被请空（只保留一个石头）</li><li><code>M-x zone</code> 屏幕保护程序。<code>M-x zone-leave-me-alone</code> 关闭，<code>M-x zone-when-idle</code> 配置屏幕保护程序的空闲时间。</li><li><code>M-x mpuz</code> 乘法解谜题。<code>M-x mpuz-show-solution</code> 查看答案。</li><li><code>M-x morse-region</code> 和 <code>M-x morse-region</code> 将一个区域（英文）翻译成摩尔斯电码。</li></ul><h1>其它</h1><h2 id="ctrl-space-设置-mark"><code>ctrl space</code> 设置 mark</h2><p>由于 <code>ctrl space</code> 被输入法占用，emacs 每次 mark 时得 <code>ctrl @</code>很麻烦，所以想关闭win10 输入法热键。但是试了多种方法，没有好的解决方法。只能先将输入法切换到微软自带的 ENG 模式，<code>ctrl + 空格</code> 才有效。</p><h2 id="同时在选中的各行行首添加相同内容">同时在选中的各行行首添加相同内容</h2><ol><li>将光标置于第一行行首。</li><li><code>ctrl space</code> (set-mark-command) 设置标记。</li><li>将光标置于最后一行行首。</li><li>执行 <code>C-x r t</code> (M-x string-rectangle)。</li><li>输入任何想输入内容，然后回车。</li></ol><h2 id="寄存器">寄存器</h2><ol><li><p>存储到寄存器</p><p>选择文本，执行<code>C-x r s</code> (M-x copy-to-register)，输入 <code>1</code>，可将文本保存在了名为 <code>1</code> 的寄存器。</p></li><li><p>从寄存器粘贴</p><p>执行 <code>C-x r i</code> (M-x insert-register)，输入 <code>1</code>，可将名为 <code>1</code> 的寄存器内容粘贴到光标所在位置。</p></li><li><p>寄存器名</p><p>单数字 0-9，或单字符 a-z。</p></li></ol><h2 id="色号">色号</h2><p>色号 <code>M-x list-colors-display</code>。</p><h2 id="emacs-自带输入法">emacs 自带输入法</h2><p>自带输入法 <code>C-\</code>。</p><h2 id="shell-命令">shell 命令</h2><p><code>M-!</code> 输入 shell 命令。</p>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs Server 配置</title>
      <link href="2021/emacs-server-pei-zhi/"/>
      <url>2021/emacs-server-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>阅览 C 代码的神器非 souce insight 莫属，但是写代码就略显不足了。之前我使用 SI 看代码，VIM 写代码的组合，效果非常好。但现在切换到 emacs 之后就没有做过类似组合。</p><h1>SI 搭配 emacs</h1><ol><li><p>SI 搭配 VIM</p><ul><li><p>SI -&gt; Tools -&gt; Custom Commands -&gt; Run。</p></li><li><p>在 Run 输入框写入指令：</p><pre class="line-numbers language-none"><code class="language-none"># 假设你的 vim 在 D 盘的位置# %l 表示行号，%f 表示当前 SI 的打开的文件完整路径D:\vim82\gvim.exe&quot; --remote-silent +%l %f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>点击右上角的 “Add”，然后输入新添加指令的名字 “Eidt with VIM”。</p></li><li><p>然后点击右下角 “Keys… -&gt; Assign New Key…”，在键盘输入确认的快捷键，完成配置。</p></li></ul></li><li><p>SI 搭配 emacs</p><ul><li><p>和添加 VIM 一样，不过要在 Run 输入框写入如下指令：</p><pre class="line-numbers language-none"><code class="language-none"># 1. 需要启动一个 emacs daemon。# 2. 使用 emacs 的 client 图形界面启动的，速度快。# 3. 以 client 模式打开当前光标所在 SI 文件且定位到光标所在的行。# 4. -n 表示不等待 server 响应，若不加会导致 SI 卡一会体验不好。D:\emacs-27.1\bin\emacsclientw.exe -n +%l %f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1>emacs server</h1><p>既然使用到了 emacs client 那必须得有一个 emacs server。</p><h2 id="方法一">方法一</h2><ol><li><p>在桌面创建 runemacs.exe 的快捷方式，每次运行都会打开一个 emacs 框架，而且启动速度都很慢。若以 emacsclientw.exe 方式打开文件会直接报错：connect:句柄无效。</p></li><li><p>若在 emacs 中输入 <code>M-x server-start</code>，emacsclientw.exe 便不会报错了。</p></li><li><p>所以在配置文件 init.el 中添加代码便可</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">server-start</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作为 server 的 emacs 不是以服务方式运行。当 emacsclientw 打开文件，server 的框架就会跳到屏幕最前面。通过 <code>C-x #</code> 虽然可以退出 emacsclientw，但是 server 的框架还是留在了前面，只能手动缩小，不小心关了 emacs 就得重启，很麻烦。</p></li></ol><h2 id="方法二">方法二</h2><ol><li><p>在桌面创建 runemacs.exe 快捷方式，右键 -&gt; 属性 -&gt; 目标 (T)，添加如下内容</p><pre class="line-numbers language-none"><code class="language-none">D:\emacs-27.1\bin\runemacs.exe --daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不需要在 init.el 中添加 <code>(server-start)</code> 代码。</p></li><li><p>由于启动的 emacs server 是以服务的方式运行，没有框架窗口，所以加载字体配置时失败（因为它没法设置），导致后续的初始化失败。我的字体初始化在开始位置，所以只有配色初始化了。解决方法：</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">set-font</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">english</span> <span class="token argument variable">chinese</span> <span class="token argument variable">english-size</span> <span class="token argument variable">chinese-size</span></span><span class="token punctuation">)</span></span><span class="token punctuation">(</span><span class="token car">set-face-attribute</span> <span class="token quoted-symbol variable symbol">'default</span> <span class="token boolean">nil</span> <span class="token lisp-property property">:font</span>                   <span class="token punctuation">(</span><span class="token car">format</span>   <span class="token string">"%s:pixelsize=%d"</span>  english english-size<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">charset</span> <span class="token punctuation">'(</span><span class="token car">kana</span> han symbol cjk-misc bopomofo<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">(</span><span class="token car">set-fontset-font</span> <span class="token punctuation">(</span><span class="token car">frame-parameter</span> <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'font</span><span class="token punctuation">)</span> charset                   <span class="token punctuation">(</span><span class="token car">font-spec</span> <span class="token lisp-property property">:family</span> chinese <span class="token lisp-property property">:size</span> chinese-size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; 注释掉下面这行</span> <span class="token comment">;;(set-font   "Dejavu Sans Mono" "WenQuanYi Zen Hei Mono" 20 20)</span> <span class="token comment">;; 下面的代码为新增加的解决该问题的代码</span> <span class="token punctuation">(</span><span class="token car">add-to-list</span> <span class="token quoted-symbol variable symbol">'after-make-frame-functions</span>          <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">new-frame</span></span><span class="token punctuation">)</span></span>            <span class="token punctuation">(</span><span class="token car">select-frame</span> new-frame<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token keyword">if</span> window-system                <span class="token punctuation">(</span><span class="token car">set-font</span>   <span class="token string">"Dejavu Sans Mono"</span> <span class="token string">"WenQuanYi Zen Hei Mono"</span> <span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">if</span> window-system       <span class="token punctuation">(</span><span class="token car">set-font</span>   <span class="token string">"Dejavu Sans Mono"</span> <span class="token string">"WenQuanYi Zen Hei Mono"</span> <span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">provide</span> <span class="token quoted-symbol variable symbol">'init-fonts</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>由于编码设置问题，在使用 emacsclientw 打开中文文件名的文件时，它会创建一个乱码文件名文件，内容为空。毕竟乱码文件名文件并不存在，相当于新创建一个文件，也就是说并没有打开想要打开的文件。解决方法：</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 新增编码设置</span><span class="token punctuation">(</span><span class="token car">prefer-coding-system</span> <span class="token quoted-symbol variable symbol">'gb18030</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">prefer-coding-system</span> <span class="token quoted-symbol variable symbol">'utf-8</span><span class="token punctuation">)</span><span class="token comment">;; 之前的设置</span><span class="token punctuation">(</span><span class="token car">set-language-environment</span> <span class="token quoted-symbol variable symbol">'UTF-8</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">set-locale-environment</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token comment">;; 必须注释的设置</span><span class="token comment">;;(set-default-coding-systems 'utf-8)</span><span class="token comment">;; 总之编码这块乱的很</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>右键 Eidt with Emacs</h1><ol><li><p>在 <code>HKEY_CLASSES_ROOT\*\shell</code> 新建 <code>Edit with Emacs</code> 项，在该项下继续新建<code>Command</code> 项，即 <code>HKEY_CLASSES_ROOT\*\shell\Edit with Emacs\command</code>。</p></li><li><p>修改 command 项默认字符串值为</p><pre class="line-numbers language-none"><code class="language-none"># 一定要加上双引号，否则文件名有空格就打不开了，到时有的哭了&quot;D:\emacs-27.1\bin\emacsclientw.exe&quot; -n &quot;%1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即右键是以 emacsclientw 方式打开文件。也可修改为</p><pre class="line-numbers language-none"><code class="language-none"># 不建议这样&quot;D:\emacs-27.1\bin\emacsclientw.exe&quot; --no-wait --alternate-editor&#x3D;&quot;D:\emacs-27.1\bin\runemacs.exe&quot; &quot;%1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>为 Edit with Emacs 添加图标</p><ul><li><p>在 <code>HKEY_CLASSES_ROOT\*\shell\Edit with Emacs</code> 新建字符串值 <code>Icon</code>。</p></li><li><p>Icon 内容为图标地址</p><pre class="line-numbers language-none"><code class="language-none">D:\emacs-27.1\emacs.ico<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h1>总结</h1><p>目前我是手动启动 emacs server 的，也可以随开机自启，把 server 的图标放入启动文件夹即可。</p><h1>修订记录</h1><ul><li><p>2021-01-22</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emacs Lisp</title>
      <link href="2021/emacs-lisp/"/>
      <url>2021/emacs-lisp/</url>
      
        <content type="html"><![CDATA[<p>以下内容均在 emacs <em>scratch</em>中测试。</p><h1>运行 emacs lisp</h1><ol><li>运行表达式。光标（点位）置于表达式闭括号，执行 <code>M-x eval-last-sexp</code>（或 <code>C-x C-e</code>）。</li><li>运行代码块。选择代码块，执行 <code>M-x eval-region</code>。</li><li>运行光标所指函数。执行 <code>M-x eval-defun</code>（只对由 <code>defvar</code> 和 <code>defcustom</code> 定义的函数生效）。</li><li>在 minibuffer 中运行代码。执行 <code>M-x eval-expression</code>。</li><li>运行 buffer 代码。执行 <code>M-x eval-buffer</code>。</li><li>加载并运行整个文件。执行 <code>M-x load-file</code>。</li></ol><hr><ol start="7"><li>启动 emacs lisp shell 交互执行代码。执行 <code>M-x ielm</code>。</li></ol><h1>注释</h1><p>双英文分号，即 <code>;;</code>。可在任意一行的任何位置开始注释。</p><h1>基本类型</h1><h2 id="Equality">Equality</h2><ul><li><code>eq</code> 判断两个参数是否是相同的对象（object）。</li><li><code>eql</code> 判断两个参数是否是相同的对象（object）或数值。</li><li><code>equal</code> 判断两个参数的类型和值是否相同。</li><li>指定类型的 equality 断言，如 <code>string-equal</code> 判断字符串是否相等。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> test-val <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">eq</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">eq</span> <span class="token number">3.1</span> <span class="token number">3.1</span><span class="token punctuation">)</span>            <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">eq</span> <span class="token string">"thing"</span> <span class="token string">"thing"</span><span class="token punctuation">)</span>    <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">eq</span> test-val test-val<span class="token punctuation">)</span>  <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">eql</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">eql</span> <span class="token number">3.1</span> <span class="token number">3.1</span><span class="token punctuation">)</span>           <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">eql</span> <span class="token string">"thing"</span> <span class="token string">"thing"</span><span class="token punctuation">)</span>   <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">eq</span> test-val test-val<span class="token punctuation">)</span>  <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">equal</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">equal</span> <span class="token number">3.1</span> <span class="token number">3.1</span><span class="token punctuation">)</span>           <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">equal</span> <span class="token string">"thing"</span> <span class="token string">"thing"</span><span class="token punctuation">)</span>   <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">eq</span> test-val test-val<span class="token punctuation">)</span>  <span class="token comment">;; t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="t-nil">t/nil</h2><p><code>nil</code> 表示 flase。<code>()</code> 空列表也可以表示 false。<code>t</code> 表示 true。除了 nil 和空列表外都是 true。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; emacs lisp 中没有布尔值</span><span class="token punctuation">(</span><span class="token car">type-of</span> <span class="token boolean">t</span><span class="token punctuation">)</span>    <span class="token comment">;; symbol</span><span class="token punctuation">(</span><span class="token car">type-of</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token comment">;; symbol</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数值-Numbers">数值/Numbers</h2><p>主要包括两种类型的 Numbers 整数和浮点数。</p><h3 id="基本运算-Operations">基本运算/Operations</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">;; 9</span><span class="token punctuation">(</span><span class="token car">-</span> <span class="token number">9</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; 7</span><span class="token punctuation">(</span><span class="token car">*</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">;; 6</span><span class="token punctuation">(</span><span class="token car">/</span> <span class="token number">7</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; 3，取整</span><span class="token punctuation">(</span><span class="token car">/</span> <span class="token number">7</span> <span class="token number">2.0</span><span class="token punctuation">)</span>  <span class="token comment">;; 3.5，除法</span><span class="token punctuation">(</span><span class="token car">%</span> <span class="token number">7</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">;; 3，取余</span><span class="token punctuation">(</span><span class="token car">mod</span> <span class="token number">7.1</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">;; 3.099 允许浮点取余</span><span class="token punctuation">(</span><span class="token car">expt</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">;; 8 2^3</span><span class="token punctuation">(</span><span class="token car">1+</span> <span class="token number">5</span><span class="token punctuation">)</span>     <span class="token comment">;; 6</span><span class="token punctuation">(</span><span class="token car">1-</span> <span class="token number">5</span><span class="token punctuation">)</span>     <span class="token comment">;; 4</span><span class="token comment">;; 嵌套运算</span><span class="token punctuation">(</span><span class="token car">*</span> <span class="token punctuation">(</span><span class="token car">-</span> <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整数和浮点数转换">整数和浮点数转换</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 整数转换浮点</span><span class="token punctuation">(</span><span class="token car">float</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span class="token comment">;; 3.0</span><span class="token comment">;; 丢弃小数部分</span><span class="token punctuation">(</span><span class="token car">truncate</span> <span class="token number">1.2</span><span class="token punctuation">)</span>  <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">truncate</span> <span class="token number">-1.2</span><span class="token punctuation">)</span> <span class="token comment">;; -1</span><span class="token comment">;; 向下取整</span><span class="token punctuation">(</span><span class="token car">floor</span> <span class="token number">1.2</span><span class="token punctuation">)</span>     <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">floor</span> <span class="token number">-1.2</span><span class="token punctuation">)</span>    <span class="token comment">;; -2</span><span class="token comment">;; 向上取整</span><span class="token punctuation">(</span><span class="token car">ceiling</span> <span class="token number">1.2</span><span class="token punctuation">)</span>   <span class="token comment">;; 2</span><span class="token punctuation">(</span><span class="token car">ceiling</span> <span class="token number">1.0</span><span class="token punctuation">)</span>   <span class="token comment">;; 1</span><span class="token comment">;; 四舍五入</span><span class="token punctuation">(</span><span class="token car">round</span> <span class="token number">1.5</span><span class="token punctuation">)</span>     <span class="token comment">;; 2</span><span class="token punctuation">(</span><span class="token car">round</span> <span class="token number">1.4</span><span class="token punctuation">)</span>     <span class="token comment">;; 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值测试">数值测试</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 在类型后加 p 表示测试，p 表示 predicates（断言）</span><span class="token punctuation">(</span><span class="token car">integerp</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">integerp</span> <span class="token number">1.1</span><span class="token punctuation">)</span>  <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">floatp</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">floatp</span> <span class="token number">1.1</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">numberp</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">numberp</span> <span class="token number">1.1</span><span class="token punctuation">)</span>   <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">numberp</span> <span class="token string">"one"</span><span class="token punctuation">)</span> <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">zerop</span> <span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">zerop</span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment">;; t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值比较">数值比较</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">=</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">=</span> <span class="token number">1</span> <span class="token number">1.0</span><span class="token punctuation">)</span>  <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">=</span> <span class="token number">3</span> <span class="token number">3.000000000000000000001</span><span class="token punctuation">)</span> <span class="token comment">;; t，可见 elisp 将超过精度小数部分舍弃</span><span class="token punctuation">(</span><span class="token car">/=</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">;; t, 比较两数是否不相等</span><span class="token punctuation">(</span><span class="token car">&lt;</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">></span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">max</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">;; 7</span><span class="token punctuation">(</span><span class="token car">min</span> <span class="token number">1</span> <span class="token number">-1</span> <span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">;; -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符">字符</h2><p>字符是整数被解释为字符。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp">?A    <span class="token comment">;; 65</span>?a    <span class="token comment">;; 97</span>?\n   <span class="token comment">;; 10</span>?\t   <span class="token comment">;; 9</span><span class="token comment">;; Unicode</span>?\N&#123;U+E0&#125;    <span class="token comment">;; 224</span>?\u00e0      <span class="token comment">;; 224</span>?\u<span class="token comment">;; Control 和 meta 字符</span>?\C-c          <span class="token comment">;; 3</span><span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"C-c"</span><span class="token punctuation">)</span>    <span class="token comment">;; "^C"</span>?\M-x          <span class="token comment">;; 134217848</span><span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"M-x"</span><span class="token punctuation">)</span>    <span class="token comment">;; [134217848]</span><span class="token comment">;; 字符比较运算</span><span class="token punctuation">(</span><span class="token car">char-equal</span> ?A ?A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列-Sequences">序列/Sequences</h2><p>在 Emacs Lisp 中，字符串、列表和数组都被看做 sequences。</p><p>Sequence 和 Array 实际上不是 elisp 数据类型。</p><ul><li>函数文档中的 sequence 类型，表示它可能是 list、vector 或 string。</li><li>函数文档中的 array 类型，表示它可能是 vector 或 string。</li><li>list 和 vector 都是有序值序列，每个元素可以是任何类型。</li></ul><p>list 和 vector 是有区别的。</p><ol><li>vector 所有元素访问时间相同。list 元素访问时间和位置成比例，类似 C 中链表。</li><li>vector 的长度不能改变。list 的长度可以改变，通过增删 list 第一个元素实现。</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token string">"Sequence"</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token punctuation">'(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token number">22</span><span class="token punctuation">)</span>            <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>           <span class="token comment">;; t，由于 nil 可看做是一个空列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>length</code> 可以获得任何序列的长度。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">length</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span>    <span class="token comment">;; 6</span><span class="token punctuation">(</span><span class="token car">length</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; 3</span><span class="token punctuation">(</span><span class="token car">length</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> 2<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">;; 4</span><span class="token punctuation">(</span><span class="token car">length</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>         <span class="token comment">;; 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>elt</code> 依据下标（从 0 开始）获取 Sequences 元素</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">elt</span> <span class="token string">"Hello!"</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">;; ?e</span><span class="token punctuation">(</span><span class="token car">elt</span> <span class="token string">"Hello!"</span> <span class="token number">-1</span><span class="token punctuation">)</span>   <span class="token comment">;; 索引不合法，从 0 开始</span><span class="token punctuation">(</span><span class="token car">elt</span> <span class="token punctuation">'(</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">elt</span> <span class="token punctuation">'(</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">;; 索引不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串">字符串</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token string">"Hello!"</span>"Hello \ World!<span class="token string">""</span>Hello \\ World!"<span class="token punctuation">(</span><span class="token car">make-string</span> <span class="token number">5</span> ?!<span class="token punctuation">)</span>         <span class="token comment">;; !!!!!</span><span class="token punctuation">(</span><span class="token car">string</span> ?H ?e ?l ?l ?o<span class="token punctuation">)</span>    <span class="token comment">;; Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串断言">字符串断言</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">stringp</span> <span class="token string">"Test!"</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">stringp</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">stringp</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">string-or-null-p</span> <span class="token string">"Test"</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">char-or-string-p</span> ?A<span class="token punctuation">)</span>        <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">arrayp</span> <span class="token string">"Array?"</span><span class="token punctuation">)</span>            <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">sequencep</span> <span class="token string">"Sequence"</span><span class="token punctuation">)</span>       <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">listp</span> <span class="token string">"List?"</span><span class="token punctuation">)</span>              <span class="token comment">;; nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串比较">字符串比较</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; string= or string-equal</span><span class="token punctuation">(</span><span class="token car">string=</span> <span class="token string">"Hello"</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span>         <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">string-equal</span> <span class="token string">"Hello"</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token comment">;; string&lt; or string-lessp</span><span class="token punctuation">(</span><span class="token car">string&lt;</span> <span class="token string">"Hello"</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span>         <span class="token comment">;; nil</span><span class="token comment">;; string> or string-greaterp</span><span class="token punctuation">(</span><span class="token car">string></span> <span class="token string">"Hello"</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span>         <span class="token comment">;; nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串操作">字符串操作</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">substring</span> <span class="token string">"Hello!"</span> <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">;; Hell</span><span class="token punctuation">(</span><span class="token car">substring</span> <span class="token string">"Hello!"</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">;; ello</span><span class="token punctuation">(</span><span class="token keyword">concat</span> <span class="token string">"Hello "</span> <span class="token string">"World"</span><span class="token punctuation">)</span>   <span class="token comment">;; Hello World</span><span class="token punctuation">(</span><span class="token car">concat</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">split-string</span> <span class="token string">"Hello World"</span><span class="token punctuation">)</span>          <span class="token comment">;; ("Hello" "World")</span><span class="token punctuation">(</span><span class="token car">split-string</span> <span class="token string">"Hello World"</span> <span class="token string">"o"</span><span class="token punctuation">)</span>      <span class="token comment">;; ("Hell" "w" "rld")</span><span class="token comment">;; 正则表达式</span><span class="token punctuation">(</span><span class="token car">split-string</span> <span class="token string">"Hello World"</span> <span class="token string">"[ !]"</span><span class="token punctuation">)</span>   <span class="token comment">;; ("Hello" "World")</span><span class="token punctuation">(</span><span class="token car">split-string</span> <span class="token string">"Hello World"</span> <span class="token string">"[ !]"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; ("Hello" "World")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串格式化">字符串格式化</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">format</span> <span class="token string">"Hello %d %s!"</span> <span class="token number">100</span> <span class="token string">"World"</span><span class="token punctuation">)</span>    <span class="token comment">;; Hello 100 World!</span><span class="token punctuation">(</span><span class="token car">format</span> <span class="token string">"Here's a list: %s"</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">;; Here's a list: (1 2 3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Messages-buffer-打印">*Messages* buffer 打印</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 格式化参数同 format</span><span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"This is %d"</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>FORMAT-STRING 字符串格式化</p><table><thead><tr><th style="text-align:center">format</th><th style="text-align:center">explanation</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">表示字符串，类似 princ（后面介绍）</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">十进制数值（%o 八进制， %x 十六进制）</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:center">大写的十六进制</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">指数表示的数值</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">小数点表示的数值</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:center">使用指数或小数点表示数值，以字符较少为准</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">以字符方式打印数值</td></tr><tr><td style="text-align:center">%S</td><td style="text-align:center">打印任何对象的 S- 表达式，类似 prin1（后面介绍）</td></tr></tbody></table><h3 id="字符串数值转换">字符串数值转换</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">string-to-number</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">number-to-string</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="列表-List">列表/List</h2><h3 id="Cons-Cells">Cons Cells</h3><p>cons 容器可将 list 元素串联在一起。可将它看作可通过 car 和 cdr 取值的元组或一对值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; cons 仅仅操作两个对象</span><span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">;; '(1 . 2)</span><span class="token punctuation">'(</span><span class="token number">1</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">;; '(1 . 2)</span><span class="token comment">;; car 取得 cons 中第一个值，cdr 取得第二个值</span><span class="token punctuation">(</span><span class="token car">car</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">cdr</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; 2</span><span class="token punctuation">(</span><span class="token keyword">setq</span> some-cons <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">setcar</span> some-cons <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">;; '(3 . 2)</span><span class="token punctuation">(</span><span class="token car">setcdr</span> some-cons <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment">;; '(3 . 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从-cons-创建-list">从 cons 创建 list</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">4</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; '(1 2 3 4)</span><span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">1</span> <span class="token punctuation">'(</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment">;; '(1 2 3 4)</span><span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">'(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token comment">;; '((1 2 3) 4)</span><span class="token punctuation">(</span><span class="token keyword">append</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token punctuation">)</span>                        <span class="token comment">;; '(1 2 3 . 4)</span><span class="token punctuation">(</span><span class="token keyword">append</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">'(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token comment">;; '(1 2 3 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="断言">断言</h3><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">listp</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">consp</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token number">3</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">;; t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Alists">Alists</h3><p>Association lists (or “alists”) 是包含 cons pairs 的列表，保存拥有命名的值。类似字典。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> some-alist <span class="token punctuation">'(</span><span class="token punctuation">(</span><span class="token car">one</span> <span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">two</span> <span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">three</span> <span class="token punctuation">.</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">alist-get</span> <span class="token quoted-symbol variable symbol">'one</span> some-alist<span class="token punctuation">)</span>    <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">alist-get</span> <span class="token quoted-symbol variable symbol">'two</span> some-alist<span class="token punctuation">)</span>    <span class="token comment">;; 2</span><span class="token punctuation">(</span><span class="token car">alist-get</span> <span class="token quoted-symbol variable symbol">'four</span> some-alist<span class="token punctuation">)</span>   <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">assq</span>  <span class="token quoted-symbol variable symbol">'one</span> some-alist<span class="token punctuation">)</span>    <span class="token comment">;; '(one . 1)</span><span class="token punctuation">(</span><span class="token car">rassq</span> <span class="token number">1</span>    some-alist<span class="token punctuation">)</span>    <span class="token comment">;; '(one . 1)</span><span class="token comment">;; 没有 alist-set 函数，使用 setf 设置</span><span class="token punctuation">(</span><span class="token car">setf</span> <span class="token punctuation">(</span><span class="token car">alist-get</span> <span class="token quoted-symbol variable symbol">'one</span> some-alist<span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">alist-get</span> <span class="token quoted-symbol variable symbol">'one</span> some-alist<span class="token punctuation">)</span>    <span class="token comment">;; 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Plists">Plists</h3><p>Property list(or “plist”) 是另外一种设置键值对的方法。没有 cons pair 只利用列表实现。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">plist-get</span> <span class="token punctuation">'(</span><span class="token car">one</span> <span class="token number">1</span> two <span class="token number">2</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'one</span><span class="token punctuation">)</span>     <span class="token comment">;; 1</span><span class="token punctuation">(</span><span class="token car">plist-put</span> <span class="token punctuation">'(</span><span class="token car">one</span> <span class="token number">1</span> two <span class="token number">2</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'three</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">;; (one 1 two 2 three 3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="列表操作">列表操作</h3><ol><li>创建 list</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">list</span> a b ...<span class="token punctuation">)</span><span class="token comment">;; 若不想元素被执行，可写作：</span><span class="token punctuation">'(</span><span class="token car">a</span> b ...<span class="token punctuation">)</span><span class="token comment">;; 等价于</span><span class="token punctuation">(</span><span class="token car">quote</span> <span class="token punctuation">(</span><span class="token car">list</span> a b ...<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">setq</span> mylist <span class="token punctuation">'(</span><span class="token car">a</span> b c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"%S"</span> mylist<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">make-list</span> LENGTH INIT<span class="token punctuation">)</span> <span class="token comment">;; 创建长度为 LENGTH 的 list，所有元素初始化为 INIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>空 list</li></ol><p>在 elisp 中，空 list 等价于 nil。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 三者等价，均为空列表</span><span class="token punctuation">'(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">list</span><span class="token punctuation">)</span>nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>list of number</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">number-sequence</span> n m step<span class="token punctuation">)</span> <span class="token comment">;; 返回从 n 到 m，步长为 step 的 list</span><span class="token punctuation">(</span><span class="token car">number-sequence</span> n m<span class="token punctuation">)</span>      <span class="token comment">;; 默认 step 为 1</span><span class="token punctuation">(</span><span class="token car">number-sequence</span> n<span class="token punctuation">)</span>        <span class="token comment">;; 返回只有一个元素 n 的 list</span><span class="token punctuation">(</span><span class="token car">number-sequence</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">;; (0 3 6 9)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>length</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">length</span> list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>获取一个元素</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; list 索引（下标）从 0 开始</span><span class="token punctuation">(</span><span class="token car">car</span> list<span class="token punctuation">)</span>        <span class="token comment">;; 获取第一个元素</span><span class="token punctuation">(</span><span class="token car">nth</span> n list<span class="token punctuation">)</span>      <span class="token comment">;; 获取第 n 个元素</span><span class="token punctuation">(</span><span class="token car">cdr</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">;; 获取最后一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>获取子 list</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">cdr</span> list<span class="token punctuation">)</span>       <span class="token comment">;; 获取第二个元素到最后一个元素</span><span class="token punctuation">(</span><span class="token car">nthcdr</span> n list<span class="token punctuation">)</span>  <span class="token comment">;; 获取第 n 个元素到最后一个元素</span><span class="token punctuation">(</span><span class="token car">butlast</span> list n<span class="token punctuation">)</span> <span class="token comment">;; 获取除最后 n 个元素的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>前置连接 list(prepend to list)</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">cons</span> x list<span class="token punctuation">)</span>     <span class="token comment">;; 将 x 加到 list 前面，返回一个新 list</span><span class="token punctuation">(</span><span class="token keyword">cons</span> <span class="token string">"a"</span> <span class="token punctuation">(</span><span class="token car">list</span> <span class="token string">"c"</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; ("a" "c" "d")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="8"><li>连接 list</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">append</span> sequence1 sequence2 ...<span class="token punctuation">)</span> <span class="token comment">;; 连接任何类型 sequence，返回 list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>修改元素</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">push</span> list<span class="token punctuation">)</span>       <span class="token comment">;; 在变量前加一个元素，返回新 list</span><span class="token punctuation">(</span><span class="token car">pop</span> list<span class="token punctuation">)</span>        <span class="token comment">;; 移除变量第一个元素，返回移除元素</span><span class="token punctuation">(</span><span class="token car">nbutlast</span> list n<span class="token punctuation">)</span> <span class="token comment">;; 移除变量最后 n 个元素，返回变量新值</span><span class="token punctuation">(</span><span class="token car">setcar</span> list x<span class="token punctuation">)</span>   <span class="token comment">;; 用 x 替换 list 的第一个元素，返回 x</span><span class="token punctuation">(</span><span class="token car">setcdr</span> list x<span class="token punctuation">)</span>   <span class="token comment">;; 用 x 替换 list 除第一个元素外剩余元素，返回 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>list 转换为 string</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">mapconcat</span> <span class="token quoted-symbol variable symbol">'number-to-string</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">","</span><span class="token punctuation">)</span> <span class="token comment">;; "1,2,3"</span><span class="token punctuation">(</span><span class="token car">format</span> <span class="token string">"%s"</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token string">"two"</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; "(1 two 3)</span><span class="token punctuation">(</span><span class="token car">substring</span> <span class="token punctuation">(</span><span class="token car">format</span> <span class="token string">"%s"</span> <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token string">"two"</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token number">-1</span><span class="token punctuation">)</span> <span class="token comment">;; "1 two 3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vector">Vector</h2><ul><li>Vector 是有序值序列。</li><li>每个元素可以是任何类型。</li><li>元素值可修改。</li><li>元素个数不能改变。</li><li>读写元素随机访问时间相同。</li></ul><ol><li>创建 Vector</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; make-vector</span><span class="token punctuation">(</span><span class="token car">make-vector</span> <span class="token number">5</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">;; [0 0 0 0 0]，创建一个长度为 5 个元素的向量，且每个元素初始化为 0</span><span class="token comment">;; vector</span><span class="token punctuation">(</span><span class="token car">vector</span> a b ...<span class="token punctuation">)</span>   <span class="token comment">;; 创建一个包含元素 a,b,... 的向量</span><span class="token comment">;; 该方式创建的向量元素不会在创建时被执行</span><span class="token punctuation">[</span>a b ...<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>填充 Vector</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">fillarray</span> array val<span class="token punctuation">)</span> <span class="token comment">;; 使 array 中的所有值为 val，类似重新赋值</span><span class="token punctuation">(</span><span class="token keyword">setq</span> aa <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> 5<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">fillarray</span> aa <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token comment">;; [nil nil nil]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>获取 Vector 长度</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">length</span> <span class="token punctuation">(</span><span class="token car">Vector</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>获取元素</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 若已知是 vector，则使用 aref</span><span class="token punctuation">(</span><span class="token car">aref</span> array n<span class="token punctuation">)</span>   <span class="token comment">;; 返回 array 索引为 n 的元素</span><span class="token punctuation">(</span><span class="token car">elt</span> sequence n<span class="token punctuation">)</span> <span class="token comment">;; 返回 sequence 索引为 n 的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>修改元素</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 将 ARRAY 索引为 IDX 的元素值替换为 NEWELT，返回 NEWELT</span><span class="token punctuation">(</span><span class="token car">aset</span> ARRAY IDX NEWELT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>嵌套 Vector</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; Vector 可以以任何方式嵌套</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> 2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> 4<span class="token punctuation">]</span><span class="token punctuation">]</span>     <span class="token comment">;; 2 by 2 matrix</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>连接 Vectors，转换 list 为 Vector</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 连接任何 sequence 类型，返回一个 vector</span><span class="token punctuation">(</span><span class="token car">vconcat</span> sequence1 sequence2 ...<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">vconcat</span> <span class="token punctuation">[</span><span class="token number">3</span> 4<span class="token punctuation">]</span> <span class="token punctuation">'(</span><span class="token string">"a"</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; [3 4 "a" "b"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>转换 Vector 为 list</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 连接任何 sequence 类型，返回一个 list</span><span class="token punctuation">(</span><span class="token keyword">append</span> sequence1 sequence2 ...<span class="token punctuation">)</span><span class="token comment">;; 若想返回一个 proper list，最后一个元素必须是 list 或 nil.</span><span class="token punctuation">(</span><span class="token keyword">append</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> 3<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> 5<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment">;; (1 2 3 . [4 5])，improper list</span><span class="token punctuation">(</span><span class="token keyword">append</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> 3<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> 5<span class="token punctuation">]</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">;; (1 2 3 4 5)，proper list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组-Arrays">数组/Arrays</h2><p>数组可能是 vector 或 string。</p><p>可使用 <code>aset</code> 设置数组元素。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; vector</span><span class="token punctuation">(</span><span class="token keyword">setq</span> some-array <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> 4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">aset</span> some-array <span class="token number">1</span> <span class="token number">5</span><span class="token punctuation">)</span>some-array                     <span class="token comment">;; [1 5 3 4]</span><span class="token comment">;; string</span><span class="token punctuation">(</span><span class="token keyword">setq</span> some-string <span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">aset</span> some-string <span class="token number">0</span> ?M<span class="token punctuation">)</span>some-string                    <span class="token comment">;; "Mello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可使用 <code>fillarray</code> 设置数组所有的值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> some-array <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> 3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">fillarray</span> some-array <span class="token number">6</span><span class="token punctuation">)</span>some-array                <span class="token comment">;; [6 6 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>逻辑表达式</h1><p>在计算表达式时，除了 <code>nil</code> 和空列表 <code>'()</code> 其它都为 <code>t</code>。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">t</span>   <span class="token quoted-symbol variable symbol">'true</span> <span class="token quoted-symbol variable symbol">'false</span><span class="token punctuation">)</span>    <span class="token comment">;; true</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token number">5</span>   <span class="token quoted-symbol variable symbol">'true</span> <span class="token quoted-symbol variable symbol">'flase</span><span class="token punctuation">)</span>    <span class="token comment">;; true</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token string">""</span>  <span class="token quoted-symbol variable symbol">'true</span> <span class="token quoted-symbol variable symbol">'flase</span><span class="token punctuation">)</span>    <span class="token comment">;; true</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'true</span> <span class="token quoted-symbol variable symbol">'flase</span><span class="token punctuation">)</span>    <span class="token comment">;; false</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">'(</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'true</span> <span class="token quoted-symbol variable symbol">'flase</span><span class="token punctuation">)</span>    <span class="token comment">;; false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑运算">逻辑运算</h2><ul><li>not</li><li>and</li><li>or</li><li>xor</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">t</span><span class="token punctuation">)</span>    <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token keyword">and</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment">;; 4</span><span class="token punctuation">(</span><span class="token keyword">and</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token quoted-symbol variable symbol">'foo</span><span class="token punctuation">)</span>    <span class="token comment">;; foo</span><span class="token punctuation">(</span><span class="token keyword">or</span> <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'something</span><span class="token punctuation">)</span>   <span class="token comment">;; 'something</span><span class="token punctuation">(</span><span class="token keyword">or</span> <span class="token boolean">nil</span> <span class="token quoted-symbol variable symbol">'something</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; 'something</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>条件表达式</h1><h2 id="if">if</h2><p>if 表达式的 true 分支是一个表达式，false 分支可以是多个表达式。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">t</span> <span class="token number">5</span>    <span class="token comment">;; "false" branch</span>    <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"false branch"</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">2</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 <code>progn</code> 使 if 表达式 true 分支支持多个表达式。类似 C 语言代码块将多个表达式放在一个块中作为一个表达式 <code>&#123;...&#125;</code>。progn 的值为代码块最后一个表达式的值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">t</span>  <span class="token punctuation">(</span><span class="token car">progn</span>    <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"Hey, it's true!"</span><span class="token punctuation">)</span>    <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"false branch"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">3</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置变量时 if 表达式可以内嵌使用。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> tab-width <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token car">string-equal</span> <span class="token punctuation">(</span><span class="token car">format-time-string</span> <span class="token string">"%A"</span><span class="token punctuation">)</span> <span class="token string">"Monday"</span><span class="token punctuation">)</span>                   <span class="token number">3</span>                   <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="when-and-unless">when and unless</h2><ul><li>如果 if 语句中不需要 false 分支（表达式为 t），则使用 when 语句。</li><li>如果 if 语句中不需要 true 分支（表达式为 nil），则使用 unless 语句。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token car">></span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'foo</span><span class="token punctuation">)</span>    <span class="token comment">;; 'foo</span><span class="token punctuation">(</span><span class="token keyword">unless</span> <span class="token punctuation">(</span><span class="token car">></span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'foo</span><span class="token punctuation">)</span>  <span class="token comment">;; 'nil</span><span class="token punctuation">(</span><span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token car">></span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'foo</span><span class="token punctuation">)</span>    <span class="token comment">;; 'nil</span><span class="token punctuation">(</span><span class="token keyword">unless</span> <span class="token punctuation">(</span><span class="token car">></span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'foo</span><span class="token punctuation">)</span>  <span class="token comment">;; 'foo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cond">cond</h2><p>类似 C 语言 switch 语句。</p><p>cond 每个 clause 必须是 list，且 list 的 car 值是 condition，剩余部分是 body-forms。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> a <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">cond</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">eql</span> a <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Equal to 1"</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">></span> a <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Greater than 1"</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token boolean">t</span> <span class="token string">"something else!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pcase">pcase</h2><h1>循环</h1><h2 id="while">while</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> my-loop-counter <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token car">&lt;</span> my-loop-counter <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"I'm looping! %d"</span> my-loop-counter<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">setq</span> my-loop-counter <span class="token punctuation">(</span><span class="token car">1+</span> my-loop-counter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dotimes">dotimes</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">dotimes</span> <span class="token punctuation">(</span><span class="token car">VAR</span> COUNT<span class="token punctuation">)</span> BODY ...<span class="token punctuation">)</span>        <span class="token comment">;; 循环指定次数，从 0 开始计数，不包括 COUNT，返回 nil</span><span class="token punctuation">(</span><span class="token car">dotimes</span> <span class="token punctuation">(</span><span class="token car">VAR</span> COUNT RESULT<span class="token punctuation">)</span> BODY ...<span class="token punctuation">)</span> <span class="token comment">;; 返回 RESULT</span><span class="token comment">;; example</span><span class="token punctuation">(</span><span class="token car">dotimes</span> <span class="token punctuation">(</span><span class="token car">count</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"I'm looping more easily! %d"</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dolist">dolist</h2><p>遍历 list 的每个元素。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">VAR</span> LIST<span class="token punctuation">)</span> BODY<span class="token punctuation">)</span>        <span class="token comment">;; 遍历 list 返回 nil</span><span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">VAR</span> LIST RESULT<span class="token punctuation">)</span> BODY<span class="token punctuation">)</span> <span class="token comment">;; 返回 RESULT</span><span class="token comment">;; example</span><span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">item</span> <span class="token punctuation">'(</span><span class="token string">"one"</span> <span class="token string">"two"</span> <span class="token string">"three"</span> <span class="token string">"four"</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"Item %s"</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mapcar">mapcar</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">mapcar</span> FUNCTION SEQUENCE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用 FUNCTION，遍历 SEQUENCE 元素，返回一个 list。输入 SEQUENCE 可能是一个 list、vector、bool-vector 或字符串，但输出为 list，且该 list 长度和 SEQUENCE 一样。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">mapcar</span> <span class="token quoted-symbol variable symbol">'1+</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> 5<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">;; (4 5 6)，将 1 加在每个 vector 元素并返回一个 list</span><span class="token punctuation">(</span><span class="token car">mapcar</span> <span class="token quoted-symbol variable symbol">'1+</span> <span class="token punctuation">'(</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">;; (4 5 6)，将 1 加在每个 list 元素并返回一个 list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>在 mapcar 函数中使用，必须在函数名前加引用。</p></li><li><p>1+ 是一个函数，所以需要加引用，即 <code>'1+</code> 或 <code>(quote 1+)</code>。</p> <pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">mapcar</span> <span class="token quoted-symbol variable symbol">'car</span> <span class="token punctuation">'(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; (1 3 5)，取出每个元素 list 的第一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>mapcar 通常结合 lambda 使用，例如：</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">mapcar</span>    <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">elt</span> x <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> 2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> 4<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment">;; (1 3)，获取每个元素 vector 的第一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>lambda 定义一个“匿名函数“，可以使你在代码中定义一个函数，形如：</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">args</span></span><span class="token punctuation">)</span></span> body<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token argument variable">y</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">+</span> x y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; 取两个参数相加，返回他们的和</span><span class="token punctuation">(</span><span class="token car">mapcar</span>  <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">+</span> x <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">list</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">;; (2 3 4 5)，每个 list 元素加一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归-Recusion">递归/Recusion</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">efs/recursion-test</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">counter</span> <span class="token argument variable">limit</span></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token car">&lt;</span> counter limit<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"I'm looping via recursion! %d"</span> counter<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token car">efs/recursion-test</span> <span class="token punctuation">(</span><span class="token car">1+</span> counter<span class="token punctuation">)</span> limit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">efs/recursion-test</span> <span class="token number">0</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>函数</h1><h2 id="定义函数">定义函数</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">function_name</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">param1</span> <span class="token argument variable">param2</span> ...</span><span class="token punctuation">)</span></span> <span class="token string">"doc_string"</span> body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数返回值为 body 中最后一个表达式的返回值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">greeting</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">name</span></span><span class="token punctuation">)</span></span>   <span class="token string">"function testing"</span>   <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"hello %s"</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">greeting</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数参数">函数参数</h2><ol><li><p>可选参数 (&amp;optional)</p><p>如果你的函数需要可选择的参数，只需在参数列表中加 &amp;optional 选项，在该选项后的剩余参数均是可选的。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 定义一个有两个可选参数的函数，可选参数为 cc 和 dd</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">myfun</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">aa</span> <span class="token argument variable">bb</span> <span class="token other-marker-vars"><span class="token lisp-marker">&amp;optional</span> <span class="token argument variable">cc</span> <span class="token argument variable">dd</span></span></span><span class="token punctuation">)</span></span>    <span class="token string">"test optional arguments"</span>    <span class="token punctuation">(</span><span class="token car">insert</span> aa bb cc dd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">myfun</span> <span class="token string">"1"</span> <span class="token string">"2"</span> <span class="token string">"3"</span> <span class="token string">"4"</span><span class="token punctuation">)</span>             <span class="token comment">;; 当 optional parameter 没有给出，则它的值为 nil</span><span class="token punctuation">(</span><span class="token car">myfun</span> <span class="token string">"myaa"</span> <span class="token string">"mybb"</span> <span class="token boolean">nil</span> <span class="token string">"mydd"</span><span class="token punctuation">)</span>    <span class="token comment">;; 若你不关心某个可选参数，可将其置为 nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不定量参数（&amp;rest）</p><p>要指定未指定数量的参数，可在最后一个参数添加 &amp;rest name；name 的值可以是一个list，若没有给出，则是 nil</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">multiply-many</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token rest-vars"><span class="token lisp-marker">&amp;rest</span> <span class="token argument variable">operands</span></span></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token car">dolist</span> <span class="token punctuation">(</span><span class="token car">operand</span> operands<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">when</span> operand      <span class="token punctuation">(</span><span class="token keyword">setq</span> x <span class="token punctuation">(</span><span class="token car">*</span> x operand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  x<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">multiply-many</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment">;; 5</span><span class="token punctuation">(</span><span class="token car">multiply-many</span> <span class="token number">5</span> <span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment">;; 10</span><span class="token punctuation">(</span><span class="token car">multiply-many</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">;; 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="函数文档">函数文档</h2><p>用于描述函数功能，使用 <code>C-h f</code> 查看。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">do-some-math</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token argument variable">y</span></span><span class="token punctuation">)</span></span>  <span class="token comment">;; function document</span>  <span class="token string">"Muliplies the result of math expressons on arguments <span class="token argument">X</span> and <span class="token argument">Y</span>."</span>  <span class="token punctuation">(</span><span class="token car">*</span> <span class="token punctuation">(</span><span class="token car">+</span> x <span class="token number">20</span><span class="token punctuation">)</span>     <span class="token punctuation">(</span><span class="token car">-</span> y <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>惯例将函数所有参数都大写。</p><h2 id="匿名函数">匿名函数</h2><p>有时需要将一个函数作为参数传递给另外一个函数，但不想定义函数名，使用 lambda 匿名函数。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token argument variable">y</span></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">100</span> x y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 直接使用 lambda 函数</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token argument variable">y</span></span><span class="token punctuation">)</span></span>   <span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">100</span> x y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用函数">调用函数</h2><ol><li>普通函数调用。</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">+</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>函数作为参数的函数调用。</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 使用 funcall 调用函数符号</span><span class="token punctuation">(</span><span class="token car">funcall</span> <span class="token quoted-symbol variable symbol">'+</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">;; 定义一个接收函数作为参数的函数</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">gimmie-function</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">fun</span> <span class="token argument variable">x</span></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"Function: %s <span class="token argument">--</span> Result: %d"</span>           fun           <span class="token punctuation">(</span><span class="token car">funcall</span> fun x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 定义一个变量存储 lambda</span><span class="token punctuation">(</span><span class="token keyword">setq</span> function-in-variable <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">arg</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">+</span> arg <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 定义一个等价的函数</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">named-version</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">arg</span></span><span class="token punctuation">)</span></span>  <span class="token punctuation">(</span><span class="token car">+</span> arg <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 调用参数中的 lambda，lambda 作为参数</span><span class="token punctuation">(</span><span class="token car">gimmie-function</span> <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">arg</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token car">+</span> arg <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">;; 调用存储在变量中的 lambda</span><span class="token punctuation">(</span><span class="token car">gimmie-function</span> function-in-variable <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">;; 调用函数通过函数符号</span><span class="token punctuation">(</span><span class="token car">gimmie-function</span> <span class="token quoted-symbol variable symbol">'named-version</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表作为参数的函数调用，使用 <code>apply</code> 函数。</li></ol><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">apply</span> <span class="token quoted-symbol variable symbol">'+</span> <span class="token punctuation">'(</span><span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">funcall</span> <span class="token quoted-symbol variable symbol">'+</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="定义交互函数">定义交互函数</h2><ul><li>指令就是一个函数，用户可以通过调用 <code>execute-extended-command</code>（即 <code>M-x</code>) 执行。</li><li>若使一个函数可交互，在函数的 doc string 后面增加代码 <code>(interactive)</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">do-some-math</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">x</span> <span class="token argument variable">y</span></span><span class="token punctuation">)</span></span>  <span class="token string">"My first interactive function, accept <span class="token argument">X</span> and <span class="token argument">Y</span> return sum"</span>  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span> <span class="token string">"Nx: \nNy: "</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"Hello, first interactive function"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"The result is: %d"</span>  <span class="token punctuation">(</span><span class="token car">+</span> x y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">global-set-key</span> <span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"C-c z"</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">'do-some-math</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>变量</h1><h2 id="设置变量">设置变量</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> tab-width <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">;; 通过符号设置变量，很少使用</span><span class="token punctuation">(</span><span class="token car">set</span> <span class="token quoted-symbol variable symbol">'tab-width</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">;; 在一个表达式中设置多个变量</span><span class="token punctuation">(</span><span class="token keyword">setq</span> mouse-wheel-scroll-amount <span class="token punctuation">'(</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">shift</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      mouse-wheel-follow-mouse <span class="token quoted-symbol variable symbol">'t</span>      use-dialog-box <span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义变量">定义变量</h2><p><code>defvar</code> 定义一个变量并为变量分配一个文档字符串描述变量。</p><p><code>defvar</code> 设置的是变量的默认值，只有当变量从未设置时默认值才起作用。</p><p>这通常很有用：packages 可以使用 <code>defvar</code> 定义它们的变量，你可以在packages 加载前设置这些变量，不用担心 packages 加载后覆盖掉你的设置。</p><p>若想立刻应用默认值，使用 <code>eval-defun</code>。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> am-i-documented <span class="token string">"no"</span><span class="token punctuation">)</span>        <span class="token comment">;; "no"</span><span class="token punctuation">(</span><span class="token defvar"><span class="token keyword">defvar</span> <span class="token variable">am-i-documented</span></span> <span class="token string">"yes"</span>  <span class="token string">"Document string"</span><span class="token punctuation">)</span>               <span class="token comment">;; "no"，执行 eval-defun 可将变量设置为 yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer-局部变量">Buffer 局部变量</h2><p><code>setq-local</code> 设置 buffer 布局变量。任何运行在此 buffer 的代码会使用局部变量，而非全局变量。为什么需要它？因为针对不同的 buffer 需要设置不同的配置。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">setq-local</span> tab-width <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>make-variable-buffer-local</code> 可为所有新建 buffer 设置局部变量。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 定义 packages 变量，使它作为新 buffer 局部变量</span><span class="token punctuation">(</span><span class="token defvar"><span class="token keyword">defvar</span> <span class="token variable">new-buffer-local-var</span></span> <span class="token number">311</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">make-variable-buffer-local</span> <span class="token quoted-symbol variable symbol">'new-buffer-local-var</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>setq-default</code> 可为所有新建 buffer 局部变量设置默认值（不包括当前 buffer）。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> not-local-yet <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">setq-default</span> not-local-yet <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">;; 若变量不存在则创建</span><span class="token punctuation">(</span><span class="token car">setq-default</span> will-i-be-created <span class="token boolean">t</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局变量">全局变量</h2><p>setq 用于设置全局变量，且变量无需声明。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> x <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token comment">;; x = 1</span><span class="token punctuation">(</span><span class="token keyword">setq</span> a <span class="token number">3</span> b <span class="token number">2</span> c <span class="token number">7</span><span class="token punctuation">)</span>   <span class="token comment">;; a = 3, b = 2, c = 7，批量赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="局部变量">局部变量</h2><p>let 用于设置局部变量。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">var1</span> val1<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">var2</span> val2<span class="token punctuation">)</span> ...<span class="token punctuation">)</span> body<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">a</span> <span class="token number">3</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token car">b</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">+</span> a b<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">;; 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>let* 允许 let 绑定列表中使用绑定列表之前定义的变量值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 允许变量 z 使用绑定列表之前定义的变量 y</span><span class="token punctuation">(</span><span class="token keyword">let*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token car">y</span> <span class="token number">5</span><span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token car">z</span> <span class="token punctuation">(</span><span class="token car">+</span> y <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">*</span> y z<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户自定义变量">用户自定义变量</h2><p>Customizable variable 通常面向用户自定义 Emacs 和 packages 的配置。用户可通过自定义 UI 界面配置。</p><p><code>defcustom</code> 定义自定义变量。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defvar"><span class="token keyword">defcustom</span> <span class="token variable">my-custom-variable</span></span> <span class="token number">42</span>  <span class="token string">"<span class="token argument">A</span> variable that you can customize"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="设置自定义变量">设置自定义变量</h2><p>一些自定义变量被设置后会触发不同行为。</p><p><code>setq</code> 设置变量不会触发行为。</p><p><code>customize-set-variable</code> 是设置自定义变量的正确方法。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">customize-set-variable</span> tab-width <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若使用 <code>use-package</code> 可使用 <code>:custom</code> 配置。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">use-package</span> emacs  <span class="token lisp-property property">:custom</span>  <span class="token punctuation">(</span><span class="token car">tab-width</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>判断变量是否是自定义变量。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">custom-variable-p</span> <span class="token quoted-symbol variable symbol">'tab-width</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>Buffer</h1><h2 id="buffer-创建">buffer 创建</h2><ul><li>创建临时 buffer，使用 <code>with-temp-buffer</code>。大多数时候应该使用该函数创建新 buffer，可以节省创建 buffer 的代码、切换到它做些事，或关闭它，然后恢复当前缓冲区。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">with-temp-buffer</span>    <span class="token comment">;; manipulate the string here</span>    <span class="token comment">;; print whole buffer content</span>    <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建新 buffer 并返回，使用 <code>generate-new-buffer</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 设置新 buffer 名字，如果名字以空格开始，则撤销会被禁止</span><span class="token punctuation">(</span><span class="token keyword">setq</span> newBufName <span class="token string">" xyz"</span><span class="token punctuation">)</span><span class="token comment">;; 创建一个新 buffer 并保存在一个变量中，以便后续切换或关闭</span><span class="token punctuation">(</span><span class="token keyword">setq</span> newBuf <span class="token punctuation">(</span><span class="token car">generate-new-buffer</span> newBufName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 把新 buffer 设置为当前 buffer 且不可见，所有的插入等操作都适用于它</span><span class="token punctuation">(</span><span class="token car">set-buffer</span> newBuf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="buffer-获取和切换">buffer 获取和切换</h2><ul><li>获取当前 buffer，使用 <code>current-buffer</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 获取当前 buffer，"current" buffer</span><span class="token punctuation">(</span><span class="token car">current-buffer</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>通过名称获取 buffer，使用 <code>get-buffer</code> 或 <code>get-buffer-create</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 通过 buffer 名获取 buffer</span><span class="token punctuation">(</span><span class="token car">get-buffer</span> <span class="token string">"scratch"</span><span class="token punctuation">)</span><span class="token comment">;; 通过名称获取 buffer，若不存在则创建 buffer，在 buffer list 中查看创建的 buffer</span><span class="token comment">;; 返回新 buffer 但是不会切换到它</span><span class="token punctuation">(</span><span class="token car">get-buffer-create</span> <span class="token string">"buffer test"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>改变（切换）当前 buffer，使用 <code>set-buffer</code>，切换到指定 buffer，但 buffer 不可见。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 改变 current buffer</span><span class="token punctuation">(</span><span class="token car">progn</span>  <span class="token punctuation">(</span><span class="token car">set-buffer</span> <span class="token punctuation">(</span><span class="token car">get-buffer</span> <span class="token string">"*scratch*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">current-buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; 直接通过名称获取 buffer</span><span class="token punctuation">(</span><span class="token car">progn</span>  <span class="token punctuation">(</span><span class="token car">set-buffer</span> <span class="token string">"*scratch*"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">current-buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安全的改变（切换）当前 buffer，使用 <code>save-current-buffer</code> 或 <code>with-current-buffer</code>，buffer 不可见。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; save-current-buffer</span><span class="token punctuation">(</span><span class="token car">progn</span>  <span class="token punctuation">(</span><span class="token car">save-current-buffer</span>   <span class="token punctuation">(</span><span class="token car">set-buffer</span> <span class="token string">"*scratch*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">current-buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">;; with-current-buffer 创建临时 buffer，在函数执行完后会自动返回原 buffer。</span><span class="token punctuation">(</span><span class="token car">progn</span>  <span class="token punctuation">(</span><span class="token car">with-current-buffer</span> <span class="token string">"*scratch*"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">current-buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换到指定 buffer，buffer 可见，使用 <code>switch-to-buffer</code>，不用在 lisp 代码中。</li></ul><hr><ul><li>通过文件或文件路径获取 buffer，使用 <code>get-file-buffer</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 若不存在指定 buffer，返回 nil</span><span class="token punctuation">(</span><span class="token car">get-file-buffer</span> <span class="token string">"Emacs_Lisp.md"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>加载文件到 buffer 但 buffer 不可见，使用 <code>find-file-noselect</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">find-file-noselect</span> <span class="token string">"Emacs_Lisp.md"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li>获取当前 buffer 名称，使用 <code>buffer-name</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">buffer-name</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取 buffer 所显示文件的完整路径，使用 <code>buffer-file-name</code>。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 若 buffer 无关联文件，则返回 nil</span><span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="buffer-点位-point">buffer 点位/point</h2><p>point 就是光标在 buffer 中的位置。它是一个整型，从 1 开始增加。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">point</span><span class="token punctuation">)</span><span class="token comment">;; 检查 buffer 点位的范围</span><span class="token punctuation">(</span><span class="token car">point-min</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">point-max</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动点位。</p><ul><li><code>goto-char</code> - 移动点位到指定位置（整数）</li><li><code>forward-char</code> - 向前移动指定整数位置（默认为 1）</li><li><code>backward-char</code> - 向后移动指定整数位置（默认为 1）</li><li><code>beginning-of-buffer</code> - 移到 buffer 开始位置</li><li><code>end-of-buffer</code> - 移动到 buffer 末位置</li><li><code>forward-word</code> - 向前移动一个最大文本单元</li><li><code>backward-word</code> - 向后移动一个最大文本单元</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">goto-char</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">beginning-of-buffer</span><span class="token punctuation">)</span><span class="token comment">;; 对于英文就是一个单词，对于中文是以标点符号和空格为单词边界为准</span><span class="token punctuation">(</span><span class="token car">forward-word</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存点位。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">save-excursion</span>  <span class="token punctuation">(</span><span class="token car">goto-char</span> <span class="token punctuation">(</span><span class="token car">point-max</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">point</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="buffer-文本查看">buffer 文本查看</h2><p>查看文本字符。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 查看光标所在文本字符</span><span class="token punctuation">(</span><span class="token car">char-after</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">char-after</span> <span class="token punctuation">(</span><span class="token car">point</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看两个位置之间的文本字符串。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 包含文本属性</span><span class="token punctuation">(</span><span class="token car">buffer-substring</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">;; 仅仅是文本</span><span class="token punctuation">(</span><span class="token car">buffer-substring-no-properties</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看点位符合 “thing” 的文本，使用 <code>thing-at-point</code>，“things” 包括：</p><ul><li>word,sentence,line</li><li>sexp,list,defun - Lisp expressions</li><li>url,email</li><li>filename</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">thing-at-point</span> <span class="token quoted-symbol variable symbol">'word</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">thing-at-point</span> <span class="token quoted-symbol variable symbol">'sentence</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">thing-at-point</span> <span class="token quoted-symbol variable symbol">'sexp</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="buffer-文本查找">buffer 文本查找</h2><p>文本查找，使用 <code>search-forward</code> 和 <code>search-backward</code>。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; search-forward 会把点位置于匹配的文本后面</span><span class="token punctuation">(</span><span class="token car">search-forward</span> <span class="token string">"point"</span><span class="token punctuation">)</span><span class="token comment">;; search-backward 会把点位置于匹配的文本前面</span><span class="token punctuation">(</span><span class="token car">search-backward</span> <span class="token string">"sentence"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="buffer-文本插入">buffer 文本插入</h2><ul><li><code>insert</code> 在位点插入字符串列表或字符。</li><li><code>insert-char</code> 在位点插入字符及可选参数字符重复次数。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">insert</span> <span class="token string">"\n"</span> <span class="token string">"This is"</span> ?\n <span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token comment">;; 插入字符及字符重复次数</span><span class="token punctuation">(</span><span class="token car">insert-char</span> ?\- <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="buffer-文本删除">buffer 文本删除</h2><p>使用 <code>delete-region</code> 删除文本。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; delete-region 第一个参数为起始位点，第二个参数为结束位点。</span><span class="token punctuation">(</span><span class="token car">with-current-buffer</span> <span class="token string">"test"</span>  <span class="token punctuation">(</span><span class="token car">delete-region</span> <span class="token punctuation">(</span><span class="token car">point</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">point-max</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="buffer-文本保存">buffer 文本保存</h2><p>使用 <code>save-buffer</code> 保存文本。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">save-buffer</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="buffer-关闭">buffer 关闭</h2><p>使用 <code>kill-buffer</code> 关闭 buffer。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">kill-buffer</span><span class="token punctuation">)</span><span class="token comment">;; 关闭指定 buffer</span><span class="token punctuation">(</span><span class="token car">kill-buffer</span> <span class="token string">"*Help*"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>文件和目录</h1><p><code>default-directory</code> 是一个 buffer 局部变量，它表示 buffer 的当前目录，每个不同的 buffer 都不同。</p><h2 id="文件路径操作">文件路径操作</h2><p>在 Emacs 中，文件路径分为两部分：</p><ul><li>目录部分</li><li>非目录部分，如文件名及其扩展</li></ul><p>所有操作文件的函数，都有前缀 <code>file-name</code>！</p><ul><li><code>file-name-directory</code> 获取文件路径的目录部分</li><li><code>file-name-nodirectory</code> 获取文件路径中的文件名（非目录部分）</li><li><code>file-name-extension</code> 获取文件扩展（不包括 <code>.</code>）</li><li><code>file-name-sans-extension</code> 获取文件路径，不包括扩展</li><li><code>file-name-base</code> 获取文件名（不包括路径和扩展）</li><li><code>file-name-as-directory</code> 将文件名转为目录名</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">file-name-directory</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-nondirectory</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-extension</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-sans-extension</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-base</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-as-directory</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">file-name-as-directory</span> <span class="token punctuation">(</span><span class="token car">file-name-sans-extension</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件路径解析">文件路径解析</h2><ul><li><code>file-name-absolute-p</code> 判断文件路径是否是绝对路径</li><li><code>file-relative-name</code> 返回相对某个路径的相对路径</li><li><code>expand-file-name</code> 返回指定目录下文件的绝对路径</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">file-name-absolute-p</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">;; t</span><span class="token punctuation">(</span><span class="token car">file-name-absolute-p</span> <span class="token string">"Emacs_Lisp.md"</span><span class="token punctuation">)</span>         <span class="token comment">;; nil</span><span class="token punctuation">(</span><span class="token car">file-name-absolute-p</span> <span class="token string">"dir/Emacs_Lisp.md"</span><span class="token punctuation">)</span>     <span class="token comment">;; nil</span><span class="token comment">;; 返回相对父目录的相对路径</span><span class="token punctuation">(</span><span class="token car">file-relative-name</span> <span class="token punctuation">(</span><span class="token car">buffer-file-name</span><span class="token punctuation">)</span> <span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">expand-file-name</span> <span class="token string">"Emacs_Lisp.md"</span><span class="token punctuation">)</span><span class="token comment">;; 返回 D:/emacs/dir/Emacs_Lisp.md</span><span class="token punctuation">(</span><span class="token car">expand-file-name</span> <span class="token string">"Emacs_Lisp.md"</span> <span class="token string">"~/dir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析包含环境变量的路径。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 不会解析环境变量</span><span class="token punctuation">(</span><span class="token car">expand-file-name</span> <span class="token string">"$HOME/.emacs.d"</span><span class="token punctuation">)</span><span class="token comment">;; 解析环境变量</span><span class="token punctuation">(</span><span class="token car">substitute-in-file-name</span> <span class="token string">"$HOME/.emacs.d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件和目录测试">文件和目录测试</h2><ul><li><code>file-exists-p</code> 若文件或目录存在则返回 t 否则返回 nil。</li><li><code>file-readable-p</code> 判断文件是否可读</li><li><code>file-executable-p</code> 判断文件是否可执行</li><li><code>file-writable-p</code> 判断文件是否可写</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">file-exists-p</span> <span class="token string">"Emacs_Lisp.md"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建目录">创建目录</h2><ul><li><code>make-directory</code> 创建目录，第一个参数为目录路径，第二个参数为(t 或 nil) ,当第二个参数设置为 t 时，该函数会自动创建路径中不存在的目录（相当于递归创建），或创建的目录已存在时不会抛出错误。</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">make-directory</span> <span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">make-directory</span> <span class="token string">"./test"</span><span class="token punctuation">)</span>   <span class="token comment">;; test 目录已创建抛出错误</span><span class="token punctuation">(</span><span class="token car">make-directory</span> <span class="token string">"./test"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; no error!</span><span class="token punctuation">(</span><span class="token car">make-directory</span> <span class="token string">"./dir/dir1"</span><span class="token punctuation">)</span>   <span class="token comment">;; 不存在 dir，所以不能创建 dir1，抛出 error</span><span class="token punctuation">(</span><span class="token car">make-directory</span> <span class="token string">"./dir/dir1"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; 递归创建目录 success!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="显示目录文件">显示目录文件</h2><p>使用 <code>directory-files</code> 和 <code>directory-files-recursively</code> 查看目录中的文件。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">directory-files</span> <span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">directory-files</span> <span class="token string">"./"</span> <span class="token boolean">t</span><span class="token punctuation">)</span>          <span class="token comment">;; Return full file paths</span><span class="token punctuation">(</span><span class="token car">directory-files</span> <span class="token string">"./"</span> <span class="token boolean">t</span> <span class="token string">".md"</span><span class="token punctuation">)</span>    <span class="token comment">;; Get all file containing ".org"</span><span class="token punctuation">(</span><span class="token car">directory-files</span> <span class="token string">"./"</span> <span class="token boolean">t</span> <span class="token string">""</span> <span class="token boolean">t</span><span class="token punctuation">)</span>     <span class="token comment">;; Don't sort results</span><span class="token punctuation">(</span><span class="token car">directory-files</span> <span class="token string">"./"</span> <span class="token boolean">t</span> <span class="token string">""</span> <span class="token boolean">nil</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">;; Maximum 3 results</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"../"</span> <span class="token string">"\\.png$"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"../"</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"../"</span> <span class="token string">""</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token comment">;; The fourth parameter can be a function that determines whether</span><span class="token comment">;; a path can be traversed using any logic!</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"~/.emacs.d"</span> <span class="token string">""</span> <span class="token boolean">nil</span>                             <span class="token punctuation">(</span><span class="token lambda"><span class="token keyword">lambda</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">dir</span></span><span class="token punctuation">)</span></span>                               <span class="token punctuation">(</span><span class="token car">string-equal</span> dir <span class="token string">"~/.emacs.d/lisp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"../"</span> <span class="token string">"\\.md"</span> <span class="token boolean">t</span> <span class="token boolean">nil</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">;; Doesn't follow symlinks</span><span class="token punctuation">(</span><span class="token car">directory-files-recursively</span> <span class="token string">"../"</span> <span class="token string">"\\.md"</span> <span class="token boolean">t</span> <span class="token boolean">nil</span> <span class="token boolean">t</span><span class="token punctuation">)</span>   <span class="token comment">;; Follows symlinks!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件操作">文件操作</h2><ul><li><code>copy-file</code> 复制文件</li><li><code>copy_directory</code> 复制目录，包括子目录</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">copy-file</span> <span class="token string">"~/.emacs.d/init.el"</span> <span class="token string">"/tmp"</span><span class="token punctuation">)</span>  <span class="token comment">;; Must end in a slash!</span><span class="token punctuation">(</span><span class="token car">copy-file</span> <span class="token string">"~/.emacs.d/init.el"</span> <span class="token string">"/tmp/"</span><span class="token punctuation">)</span>   <span class="token comment">;; Copied to /tmp</span><span class="token punctuation">(</span><span class="token car">copy-file</span> <span class="token string">"~/.emacs.d/init.el"</span> <span class="token string">"/tmp/"</span><span class="token punctuation">)</span>   <span class="token comment">;; Error, already exists!</span><span class="token punctuation">(</span><span class="token car">copy-file</span> <span class="token string">"~/.emacs.d/init.el"</span> <span class="token string">"/tmp/"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; No error!</span><span class="token comment">;; The remaining parameters are all about preserving file metadata</span><span class="token punctuation">(</span><span class="token car">copy-directory</span> <span class="token string">"~/.emacs.d/lisp"</span> <span class="token string">"/tmp"</span><span class="token punctuation">)</span>  <span class="token comment">;; Must end in a slash!</span><span class="token punctuation">(</span><span class="token car">copy-directory</span> <span class="token string">"~/.emacs.d/lisp"</span> <span class="token string">"/tmp/"</span><span class="token punctuation">)</span> <span class="token comment">;; Copied to /tmp/lisp</span><span class="token comment">;; To copy the contents of the directory without the enclosing directory:</span><span class="token punctuation">(</span><span class="token car">copy-directory</span> <span class="token string">"~/.emacs.d/eshell"</span> <span class="token string">"/tmp/lisp"</span> <span class="token boolean">t</span> <span class="token boolean">t</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">copy-directory</span> <span class="token string">"~/.emacs.d/eshell"</span> <span class="token string">"/tmp/lisp"</span> <span class="token boolean">t</span> <span class="token boolean">t</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>rename-file</code> 重命名（移动）文件或目录</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"/tmp/init.el"</span> <span class="token string">"/tmp/init-new.el"</span><span class="token punctuation">)</span> <span class="token comment">;; Rename file in same folder</span><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"/tmp/init-new.el"</span> <span class="token string">"~/.emacs.d/"</span><span class="token punctuation">)</span>  <span class="token comment">;; Move file to different folder</span><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"~/.emacs.d/init-new.el"</span> <span class="token string">"~/.emacs.d/init.el"</span><span class="token punctuation">)</span>   <span class="token comment">;; Error!</span><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"~/.emacs.d/init-new.el"</span> <span class="token string">"~/.emacs.d/init.el"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; OK</span><span class="token comment">;; It can also rename or move directories!</span><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"/tmp/lisp"</span> <span class="token string">"/tmp/lisp-two"</span><span class="token punctuation">)</span> <span class="token comment">;; OK</span><span class="token punctuation">(</span><span class="token car">rename-file</span> <span class="token string">"/tmp/lisp-two"</span> <span class="token string">"/tmp/lisp"</span><span class="token punctuation">)</span> <span class="token comment">;; OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>delete-file</code> 删除文件，可选择删除到回收站</li><li><code>delete-directory</code> 删除目录，可选择删除文件</li></ul><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">delete-file</span> <span class="token string">"/tmp/lisp/dw-desktop.el"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">delete-file</span> <span class="token string">"~/.npmrc"</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">delete-directory</span> <span class="token string">"/tmp/lisp"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">delete-directory</span> <span class="token string">"/tmp/lisp"</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建符号链接">创建符号链接</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token comment">;; 创建符号链接，Windows 上需要调试</span><span class="token punctuation">(</span><span class="token car">make-symbolic-link</span> <span class="token string">"~/.dotfiles/.config/guix"</span> <span class="token string">"~/.config/guix"</span><span class="token punctuation">)</span>   <span class="token comment">;; Error if exists</span><span class="token punctuation">(</span><span class="token car">make-symbolic-link</span> <span class="token string">"~/.dotfiles/.config/guix"</span> <span class="token string">"~/.config/guix"</span> <span class="token boolean">t</span><span class="token punctuation">)</span> <span class="token comment">;; No error!</span><span class="token comment">;; 测试一个文件或目录是否是符号链接</span><span class="token punctuation">(</span><span class="token car">file-symlink-p</span> <span class="token string">"~/.emacs.d"</span><span class="token punctuation">)</span>         <span class="token comment">;; .dotfiles/.emacs.d</span><span class="token punctuation">(</span><span class="token car">file-symlink-p</span> <span class="token string">"~/.emacs.d/init.el"</span><span class="token punctuation">)</span> <span class="token comment">;; nil</span><span class="token comment">;; 获取文件路径（若是链接文件则返回链接指向的文件路径）</span><span class="token punctuation">(</span><span class="token car">file-truename</span> <span class="token string">"~/.emacs.d/init.el"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>print</h1><h2 id="print">print</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">print</span> OBJECT &amp;optional PRINTCHARFUN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印 lisp OBJECT（整数、浮点、字符、字符串、列表、符号等），输出可以被 read 函数读回，Optional 参数可以是一个 buffer 或函数。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> xbuff <span class="token punctuation">(</span><span class="token car">generate-new-buffer</span> <span class="token string">"*my output*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">print</span> <span class="token string">"something"</span> xbuff<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">switch-to-buffer</span> xbuff<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>with-output-to-temp-buffer</strong></p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">with-output-to-temp-buffer</span> BUFNAME &amp;rest BODY<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将标准输出绑定到缓冲区 BUFNAME，执行 BODY, 则首先会清空 BUFNAME，然后在 BUFNAME中显示结果，不会将结果显示在当前缓冲区。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token keyword">setq</span> xbuff <span class="token punctuation">(</span><span class="token car">generate-new-buffer</span> <span class="token string">"*my output*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">with-output-to-temp-buffer</span> xbuff  <span class="token comment">;; this is inserted in current buffer</span>  <span class="token punctuation">(</span><span class="token car">insert</span> <span class="token string">"xyz"</span><span class="token punctuation">)</span>  <span class="token comment">;; this is printed in buffer xbuff</span>  <span class="token punctuation">(</span><span class="token car">print</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">switch-to-buffer</span> xbuff <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prin1">prin1</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">prin1</span> OBJECT &amp;optional PRINTCHARFUN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似 print，但是不会换行。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">prin1</span> <span class="token punctuation">'(</span><span class="token string">"x"</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; ("x" "y")</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="princ">princ</h2><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">princ</span> OBJECT &amp;optional PRINTCHARFUN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>既不换行也不打印字符串中的分隔符。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">princ</span> <span class="token punctuation">'(</span><span class="token string">"x"</span> <span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">;; (x y)，未打印”引号“分割符</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>异常和错误</h1><h2 id="异常捕获-catch-throw">异常捕获 catch/throw</h2><p>catch 执行 body，返回 body 最后一个表达式的返回值。若 body 中包含 (throw …)，且被调用，则返回 throw 传递的值。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">catch</span> <span class="token quoted-symbol variable symbol">'tagname</span> body<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token car">throw</span> <span class="token quoted-symbol variable symbol">'tagname</span> value<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">test-exit-f</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span>  <span class="token string">"example. using catch/throw to exit function"</span>  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token car">catch</span> <span class="token quoted-symbol variable symbol">'tag</span>    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token car">y-or-n-p</span> <span class="token string">"exit?"</span><span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token car">progn</span>         <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"existing"</span><span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token car">throw</span> <span class="token quoted-symbol variable symbol">'tag</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment">;; 如果 yes, 立刻退出，并返回 3</span>         <span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token car">progn</span>         <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"went on"</span><span class="token punctuation">)</span>         <span class="token number">4</span> <span class="token comment">;; return 4</span>         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误退出-error-user-error">错误退出 error/user-error</h2><p>调用 error 或 user-error。</p><pre class="line-numbers language-lisp" data-language="lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">test-exit-f</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span>  <span class="token string">"example"</span>  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token car">y-or-n-p</span> <span class="token string">"invoke user-error to exit?"</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token car">user-error</span> <span class="token string">"Error, because: %s"</span> <span class="token string">"you said so!"</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"went on"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Minor Mode</h1><ul><li>major mode 是一个 buffer 的主要模式，任何时候只能有一个。</li><li>minor mode 是可为特定 buffer 或 emacs 全局提供支持功能。</li></ul><p>major mode 和 minor mode 在激活后可提供某些特定类型的功能。</p><ul><li>模式激活时，有效的键盘映射激活。</li><li>模式激活时，模式行显示 mode 激活状态。</li><li>模式激活时，执行 hook，同时激活其它功能或模式。</li><li>模式激活或停用时，可执行任意代码。</li></ul><p>任何 mode 可以通过交互方式或 Emacs Lisp 代码使用命令激活或停止。</p><h1>参考</h1><ol><li><a href="https://learnxinyminutes.com/docs/elisp/">https://learnxinyminutes.com/docs/elisp/</a></li><li><a href="http://ergoemacs.org/emacs/elisp_basics.html">http://ergoemacs.org/emacs/elisp_basics.html</a></li><li><a href="https://systemcrafters.cc/learning-emacs-lisp">https://systemcrafters.cc/learning-emacs-lisp</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lisp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS MySQL 安装配置</title>
      <link href="2021/mysql-centos/"/>
      <url>2021/mysql-centos/</url>
      
        <content type="html"><![CDATA[<p>centos 安装配置 mysql。</p><h1>安装 MySQL</h1><ol><li><p>MySQL yum 源配置及安装方法，参考 <a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/">这里</a>。</p></li><li><p>安装 MySQL 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 MySQL 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查 MySQL 服务状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看 root 初始密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地 MySQL 客户端登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重置 root 登录密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'MyNewPass4!'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1>登录 MySQL 账户</h1><ol><li><p>登录 MySQL</p><p>语法 <code>mysql -h 主机地址 -u 用户名 -p 用户密码</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>密码丢失重置</p></li></ol><ul><li><p>必须停止服务</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改配置文件</p> <pre class="line-numbers language-none"><code class="language-none"># vim &#x2F;etc&#x2F;my.cnf在最后一行添加：skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动服务</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录账户并修改密码</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># msyql -uroot -p</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> <span class="token comment"># 该步骤必须有，否则会报无法执行修改密码操作</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'New123*'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>撤销对配置文件修改，重启 mysql 服务器</p><p>在修改密码期间数据库不受保护。</p></li></ul><h1>用户权限</h1><ul><li><p>创建用户</p><ol><li>语法</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> 用户名 @主机 identified <span class="token keyword">by</span> 密码；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>允许本地 IP 访问 <code>localhost</code>, <code>127.0.0.1</code></li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>允许外网 IP 访问</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'naruto'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>刷新授权</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flush <span class="token keyword">privileges</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户</p><ol><li>语法</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> 用户名 @主机；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除用户 naruto</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看用户权限</p><ol><li>语法</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> 用户 @主机；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看 naruto 权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授权</p><ol><li>语法</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> 权限列表 <span class="token keyword">on</span> 库名<span class="token punctuation">.</span> 表名 <span class="token keyword">to</span> 用户 @主机 identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>授予在所有表上全部权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>授权在 test 库上所有表读写权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">on</span> test<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'naruto'</span><span class="token variable">@'localhosst'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>刷新权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>回收权限</p><ol><li>语法</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> 权限 <span class="token keyword">on</span> 库名<span class="token punctuation">.</span> 表名 <span class="token keyword">from</span> 用户 @主机；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>回收部分权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">select</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>回收全部权限</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'naruto'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1>数据库操作</h1><ul><li><p>显示版本</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span>\g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示数据库列表</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选择数据库</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> 《数据库名》<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示指定数据库所有表</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据库</p><ol><li>方法一</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test_db<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>方法二</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token keyword">create</span> test_db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据库</p><ol><li>方法一</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> test_db<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>方法二</li></ol>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token keyword">drop</span> test_db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1>数据表操作</h1><ul><li><p>创建数据表</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name <span class="token punctuation">(</span>column_name column_type<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看表结构</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> 《表名》<span class="token punctuation">;</span><span class="token keyword">describe</span> 《表名》<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> 《表名》<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 《表名》<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除数据表</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>插入数据</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> table_name <span class="token punctuation">(</span>field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> fieldn<span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span>    <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> valuen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询数据</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name<span class="token punctuation">,</span> column_name    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">from</span> table_name <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">where</span> Clause<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">limit</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">offset</span> M<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol><li><code>table_name</code> 可以是一个或者多个表。</li><li><code>where</code> 语句包含任何条件。</li><li><code>limit</code> 设定返回的记录数。</li><li><code>offset</code> 指定 select 语句开始查询的数据偏移量，默认为 0。</li></ol><h1>问题</h1><ol><li><p>mysql 无法登陆数据库</p><p>创建用户使用如下指令，或许可以解决</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> centos </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS LNMP 服务器搭建</title>
      <link href="2021/lnmp-centos/"/>
      <url>2021/lnmp-centos/</url>
      
        <content type="html"><![CDATA[<p>centos + nginx + mysql + php 服务器搭建。</p><h1>LNMP 安装</h1><ol><li><p>php</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm<span class="token function">rpm</span> -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpmyum <span class="token function">install</span> php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-fpm php71w-gd php71w-mbstring php71w-mysqlnd php71w-opcache php71w-pdo php71w-xmlsystemctl start php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MySQL</p><p>参考 <a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/">这里</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum localinstall https://repo.mysql.com/mysql80-community-release-el7-1.noarch.rpmyum <span class="token function">install</span> mysql-community-serversystemctl <span class="token builtin class-name">enable</span> mysqldsystemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root 初始密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpmyum <span class="token function">install</span> -y nginxsystemctl <span class="token builtin class-name">enable</span> nginx.servicesystemctl start nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>配置</h1><ol><li>php</li></ol><ul><li><p>配置 <code>/etc/php.ini</code> 文件</p><p>添加 <code>cgi.fix_pathinfo=0</code>。</p><p>原因参考 <a href="http://www.laruence.com/2010/05/20/1495.html">这里</a>。</p></li><li><p>配置 <code>/etc/php-fpm.d/www.conf</code></p> <pre class="line-numbers language-none"><code class="language-none">user  &#x3D; nginxgroup &#x3D; nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启服务</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li><p>MySQL</p><p>编辑配置文件 <code>/etc/my.cnf</code>。</p><p>若有 <code>skip-grant-tables</code>，需要将其注释掉。</p></li><li><p>Nginx</p></li></ol><ul><li><p>配置 <code>/etc/nginx/conf.d/default.conf</code></p> <pre class="line-numbers language-none"><code class="language-none">server &#123;     listen       80;     server_name  test.web.com;     charset utf8;     location &#x2F; &#123;         root   &#x2F;var&#x2F;www&#x2F;html;         index  index.php index.html index.htm;     &#125;     error_page  404              &#x2F;404.html;     error_page   500 502 503 504  &#x2F;50x.html;     location &#x3D; &#x2F;50x.html &#123;         root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;     &#125;     location ~ \.php$ &#123;         root           html;         fastcgi_pass   127.0.0.1:9000;         fastcgi_index  index.php;         fastcgi_param  SCRIPT_FILENAME  &#x2F;var&#x2F;www&#x2F;html&#x2F;$fastcgi_script_name;         include        fastcgi_params;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防火墙开放 80 端口</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanentsystemctl stop firewalld.servicesystemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1>测试 nginx 和 php</h1><ol><li><p>添加 <code>/var/www/html/index.html</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> hello, world. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>添加 <code>/var/www/html/phpinfo.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问 <code>index.html</code></p><p>在浏览器中打开 <code>http://ip/</code>， 若出现 “hello, world.” 则成功。</p></li><li><p>访问 <code>phpinfo.php</code></p><p>在浏览器中打开 <code>http://ip/phpinfo.php</code>， 若出现 php 信息则成功。</p></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> centos </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD 搭建服务器</title>
      <link href="2021/fnmp/"/>
      <url>2021/fnmp/</url>
      
        <content type="html"><![CDATA[<p>FreeBSD 12.0 安装 nginx，mysql，php 搭建 FNMP 服务器。</p><h1>FNMP 安装</h1><ol><li><p>php 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># php version 7.3.0</span><span class="token function">sudo</span> pkg <span class="token function">install</span> php73 php73-mysqli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>mysql 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mysql version 8.0.12 Source distribution</span><span class="token function">sudo</span> pkg <span class="token function">install</span> mysql80-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>nginx 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx version 1.14.2</span><span class="token function">sudo</span> pkg <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>phpMyAdmin 安装</p><p>管理 MySQL 的工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># phpMyAdmin version 4.8.4</span><span class="token function">sudo</span> pkg <span class="token function">install</span> phpMyAdmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1>FNMP 配置</h1><ol><li>php 配置</li></ol><ul><li><p>创建 php.ini</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/etc/<span class="token function">sudo</span> <span class="token function">cp</span> php.ini-production php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改 www.conf</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/etc/php-fpm.d<span class="token function">sudo</span> <span class="token function">vim</span> www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>去掉如下注释：</p> <pre class="line-numbers language-none"><code class="language-none">;listen.owner &#x3D; www;listen.group &#x3D; www;listen.mode &#x3D; 0660<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置 php_fpm 自启动</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysrc <span class="token assign-left variable">php_fpm_enable</span><span class="token operator">=</span>yes<span class="token function">sudo</span> <span class="token function">service</span> php-fpm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>mysql 配置</li></ol><ul><li><p>配置 mysql 自启动</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysrc <span class="token assign-left variable">mysql_enable</span><span class="token operator">=</span>yes<span class="token function">sudo</span> <span class="token function">service</span> mysql-server start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用脚本检测 MySQL 配置是否安全</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示自己选择是否设置，然后重启服务。</p></li></ul><ol start="3"><li>nginx 配置</li></ol><ul><li><p>修改配置文件 nginx.conf</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/etc/nginx/<span class="token function">sudo</span> <span class="token function">vim</span> nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>具体配置</p><p>把网站根目录设置在 /www/nginx。</p> <pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">events</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> kqueue<span class="token punctuation">;</span>     <span class="token comment">#add</span><span class="token punctuation">&#125;</span><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">root</span> <span class="token operator">/</span>www<span class="token operator">/</span>nginx<span class="token punctuation">;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span> <span class="token comment">#add</span><span class="token punctuation">&#125;</span><span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span>    <span class="token keyword">root</span> <span class="token operator">/</span>www<span class="token operator">/</span>nginx<span class="token punctuation">;</span>    <span class="token keyword">fastcgi_pass</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">fastcgi_index</span> SCRIPT_FILENAME <span class="token operator">/</span>www<span class="token operator">/</span>nginx<span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>modify    <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置 nginx 自启</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> sysrc <span class="token assign-left variable">nginx_enable</span><span class="token operator">=</span>yes<span class="token function">sudo</span> <span class="token function">service</span> nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>phpMyAdmin 配置</li></ol><ul><li><p>建立 phpMyAdmin 到 Nginx 服务器根目录软连接</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/www/phpMyAdmin /www/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 php.ini</p><p>取消注释</p> <pre class="line-numbers language-none"><code class="language-none">;session.save_path &#x3D; &quot;&#x2F;tmp&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 nginx.conf</p><p>增加配置</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /phpMyAdmin <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">alias</span> /www/nginx/phpMyAdmin<span class="token punctuation">;</span>    index index.php<span class="token punctuation">;</span>    location ~ ^/phpMyAdmin/.+<span class="token punctuation">\</span>.php$ <span class="token punctuation">&#123;</span>        <span class="token builtin class-name">alias</span> /www/nginx/phpMyAdmin<span class="token punctuation">;</span>        fastcgi_pass <span class="token number">127.0</span>.0.1:9000<span class="token punctuation">;</span>        fastcgi_index index.php<span class="token punctuation">;</span>        fastcgi_params SCRIPT_FILENAME /www/nginx<span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        include fastcgi_params<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若登入 phpMyAdmin，MySQL 必须如此创建用户</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'username'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSYS2 安装配置</title>
      <link href="2021/msys2-an-zhuang-pei-zhi/"/>
      <url>2021/msys2-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>win10 安装 msys2。</p><h1>安装配置</h1><ol><li><p>下载并安装 <a href="http://www.msys2.org/">MSYS2</a>。</p></li><li><p>环境变量</p><pre class="line-numbers language-none"><code class="language-none">InstallPath\mingw64\binInstallPath\usr\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改软件源</p><ul><li><p>文件 /etc/pacman.d/mirrorlist.mingw32</p><p>注释掉所有源，添加</p><pre class="line-numbers language-none"><code class="language-none">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;msys2&#x2F;mingw&#x2F;i686<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件 /etc/pacman.d/mirrorlist.mingw64</p><p>注释掉所有源，添加</p><pre class="line-numbers language-none"><code class="language-none">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;msys2&#x2F;mingw&#x2F;x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件 /etc/pacman.d/mirrorlist.msys</p><p>注释掉所有源，添加</p><pre class="line-numbers language-none"><code class="language-none">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;msys2&#x2F;msys&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>更新软件源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新软件源</span>pacman -Syu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装编译环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gdb mingw-w64-x86_64-make <span class="token function">git</span> diffutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MSYS2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msys2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 配置</title>
      <link href="2021/bash-pei-zhi/"/>
      <url>2021/bash-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>bash 环境变量 <code>PS1</code> 和配色方案。</p><h1>PS1 格式</h1><ol><li>基本格式</li></ol><ul><li><p><code>\u</code></p><p>显示当前用户名</p></li><li><p><code>\h</code></p><p>取第一个 <code>.</code> 之前的主机名</p></li><li><p><code>\W</code></p><p>当前工作目录的基本名（ <code>basename</code> 的值）</p></li><li><p><code>\$</code></p><p>root 用户为 <code>#</code> ，普通用户为 <code>$</code></p></li></ul><ol start="2"><li>其它可能的格式</li></ol><ul><li><p><code>\d</code></p><p>代表日期</p></li><li><p><code>\H</code></p><p>完整的主机名</p></li><li><p><code>\t</code></p><p>24 小时制时间</p></li><li><p><code>\T</code></p><p>12 小时制时间</p></li><li><p><code>\w</code></p><p>完整的工作目录名称</p></li></ul><h1>PS1 配色方案</h1><ol><li><p>配色格式</p><p>以 <code>\e[</code> 开始，<code>m</code> 结束 (<code>\e</code> 表示 <code>escape</code>，八进制 <code>\033</code>，下同）</p><p><code>\e[</code> X <code>m</code></p></li><li><p>X</p><p>X 可以分别由 A、B、F 或它们的组合表示，组合时由分号“;”分割</p><p>X =&gt; A（或 B 或 F）</p><p>X =&gt; A;B;F（或 B;A 或其它任意方式，甚至可以 A;B;F;A）</p><p>总之，后面的配置会影响前面的配置。如 F 会影响 A 和 B 的配置</p></li><li><p>A B F</p><p>B 为背景颜色，编号 40~47</p><p>A 为文本属性</p><p>F 为字体颜色，编号 30~37</p><p>关闭颜色输出 <code>\e[00m</code></p></li><li><p>颜色、属性</p><table><thead><tr><th style="text-align:center">背景颜色 (B)</th><th style="text-align:center">文本属性 (A)</th><th style="text-align:center">文本颜色 (F)</th></tr></thead><tbody><tr><td style="text-align:center">40：黑色</td><td style="text-align:center">00：重置文本和背景</td><td style="text-align:center">30：黑色</td></tr><tr><td style="text-align:center">41：红色</td><td style="text-align:center">01：设置高亮度</td><td style="text-align:center">31：红色</td></tr><tr><td style="text-align:center">42：绿色</td><td style="text-align:center">04：下划线</td><td style="text-align:center">32：绿色</td></tr><tr><td style="text-align:center">43：黄色</td><td style="text-align:center">05：闪烁</td><td style="text-align:center">33：黄色</td></tr><tr><td style="text-align:center">44：蓝色</td><td style="text-align:center">07：反显</td><td style="text-align:center">34：蓝色</td></tr><tr><td style="text-align:center">45：紫色</td><td style="text-align:center">08：消隐</td><td style="text-align:center">35：紫色</td></tr><tr><td style="text-align:center">46：青色</td><td style="text-align:center"></td><td style="text-align:center">36：青色</td></tr><tr><td style="text-align:center">47：白色</td><td style="text-align:center"></td><td style="text-align:center">37：白色</td></tr></tbody></table></li><li><p>说明</p><p>在一个 X 内，后面的 A、B、F 设置会影响前面的 A、B、F 设置，会直接影响此 X 的设置结果。</p><p>在不同 X 之间，如先 X1 和后 X2。X2 只能影响到 X1 在 X2 之后的显示（即 X2 之后的内容由 X1 和 X2 叠加共同作用），在 X1 到 X2 之间仍由 X1 显示，X2 无法影响</p></li></ol><h1>配置文件</h1><ol><li><p>直接修改 <code>PS1</code> 环境变量是临时方法，永久的方法是将其写入 <code>~/.bashrc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10 stack 安装配置 GTK</title>
      <link href="2021/win10-stack-an-zhuang-pei-zhi-gtk/"/>
      <url>2021/win10-stack-an-zhuang-pei-zhi-gtk/</url>
      
        <content type="html"><![CDATA[<p>win10 环境 haskell 平台使用 stack 安装 GTK。</p><h1>安装 GTK 软件包</h1><ul><li><p>启动 MSYS2，安装函数库和工具</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S mingw-w64-x86_64-gtk3pacman -S mingw-w64-x86_64-gladepacman -S mingw-w64-x86_64-toolchain base-develpacman -S mingw-w64-x86_64-gobject-introspectionpacman -S mingw-w64-x86_64-gtksourceview3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1>安装 stack</h1><ul><li>下载 <a href="http://docs.haskellstack.org/en/stable/README/">stack</a>。</li><li>下载 Windows 64-bit Installer 并安装。</li></ul><h1>安装 gi-gio 和 gi-gtk</h1><ol><li><p>以管理员权限打开 powershell。</p></li><li><p>首先执行指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chcp <span class="token number">65001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 gio 和 gtk 时，总是提示&quot;terminateProcess:permission denied(Permissiondenied)&quot;。原因是终端的字符集不是 UTF-8。</p></li><li><p>安装 gi-gio 和 gi-gtk</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack <span class="token function">install</span> gi-giostack <span class="token function">install</span> gi-gtk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1>创建项目</h1><ol><li><p>创建项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack new GTKTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 app/Main.hs 文件内容替换为以下代码</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell"><span class="token comment">&#123;-# LANGUAGE OverloadedStrings, OverloadedLabels #-&#125;</span><span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">where</span><span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> GI.Gio <span class="token keyword">as</span> Gio</span><span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> GI.Gtk <span class="token keyword">as</span> Gtk</span><span class="token import-statement"><span class="token keyword">import</span> Data.GI.Base</span><span class="token hvariable">activateApp</span> <span class="token operator">::</span> <span class="token constant">Gtk.Application</span> <span class="token operator">-></span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token hvariable">activateApp</span> <span class="token hvariable">app</span> <span class="token operator">=</span> <span class="token keyword">do</span>    <span class="token hvariable">w</span> <span class="token operator">&lt;-</span> <span class="token hvariable">new</span> <span class="token constant">Gtk.ApplicationWindow</span> <span class="token punctuation">[</span> <span class="token operator">#</span><span class="token hvariable">application</span> <span class="token operator">:=</span> <span class="token hvariable">app</span>                                  <span class="token punctuation">,</span> <span class="token operator">#</span><span class="token hvariable">title</span> <span class="token operator">:=</span> <span class="token string">"Window"</span>                                  <span class="token punctuation">,</span> <span class="token operator">#</span><span class="token hvariable">defaultWidth</span> <span class="token operator">:=</span> <span class="token number">200</span>                                  <span class="token punctuation">,</span> <span class="token operator">#</span><span class="token hvariable">defaultHeight</span> <span class="token operator">:=</span> <span class="token number">200</span>                                  <span class="token punctuation">]</span>    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token keyword">do</span>    <span class="token hvariable">app</span> <span class="token operator">&lt;-</span> <span class="token hvariable">new</span> <span class="token constant">Gtk.Application</span> <span class="token punctuation">[</span> <span class="token operator">#</span><span class="token hvariable">applicationId</span> <span class="token operator">:=</span> <span class="token string">"org.gtk.example"</span>                              <span class="token punctuation">,</span> <span class="token operator">#</span><span class="token hvariable">flags</span> <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token constant">Gio.ApplicationFlagsFlagsNone</span><span class="token punctuation">]</span> <span class="token comment">-- &lt;-- this flag is the default. no need to pass</span>                              <span class="token punctuation">]</span>    <span class="token hvariable">on</span> <span class="token hvariable">app</span> <span class="token operator">#</span><span class="token hvariable">activate</span> <span class="token operator">$</span> <span class="token hvariable">activateApp</span> <span class="token hvariable">app</span>    <span class="token hvariable">Gio.applicationRun</span> <span class="token hvariable">app</span> <span class="token constant">Nothing</span>    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>报错：could not load module GI.Gio。原因：安装的 gi-gio 为 hidden package，需要在 GTKTest 项目的.cable 文件中的 build-depends 选项下添加 gi-gio。</li></ul><ol start="4"><li><p>执行软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stack <span class="token builtin class-name">exec</span> GTKTest-exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Haskell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haskell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10 Haskell 安装配置</title>
      <link href="2021/win10-haskell-an-zhuang-pei-zhi/"/>
      <url>2021/win10-haskell-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>win10 环境安装 Haskell。</p><ul><li>下载 <a href="https://www.haskell.org/platform/">haskell</a>。</li><li>配置 <a href="https://mirror.tuna.tsinghua.edu.cn/help/hackage/">镜像</a>。</li></ul><h1>配置 cabal config（%APPDATA%\cabal\config）</h1><ol><li><p>确保 config 文件包含以下行（假设安装在 C:\Program Files 目录下）</p><pre class="line-numbers language-none"><code class="language-none">extra-prog-path: C:\Program Files\Haskell Platform\8.6.5\msys\usr\binextra-lib-dirs: C:\Program Files\Haskell Platform\8.6.5\mingw\libextra-include-dirs: C:\Program Files\Haskell Platform\8.6.5\mingw\include<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改 cabal config 配置</p><p>在 config 中加入以下配置</p><pre class="line-numbers language-none"><code class="language-none">repository mirrors.tuna.tsinghua.edu.cn    url: http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;hackage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了访问速度，可以选择把官方仓库注释掉：</p><pre class="line-numbers language-none"><code class="language-none">repository hackage.haskell.org    url: http:&#x2F;&#x2F;hackage.haskell.org&#x2F;        -- secure: False        -- root-keys:        -- key-threshold:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行 cabal update</p></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Haskell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haskell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10 Cabal 安装配置 gtk2hs</title>
      <link href="2021/win10-cabal-an-zhuang-pei-zhi-gtk2hs/"/>
      <url>2021/win10-cabal-an-zhuang-pei-zhi-gtk2hs/</url>
      
        <content type="html"><![CDATA[<p>win10 环境 haskell 平台使用 cabal 安装并配置 gtk2hs。</p><ul><li>下载 <a href="https://github.com/gtk2hs/gtk2hs">Gtk2Hs</a>。</li><li>下载 <a href="https://chocolatey.org/install">chocolatey</a>。</li></ul><h1>安装</h1><ol><li>安装 chocolatey<ul><li><p>以管理员权限打开 win10 Powershell。</p></li><li><p>执行指令（参考 <a href="https://chocolatey.org/install">chocolatey</a>)。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Set-ExecutionPolicy Bypass -Scope Process -Force<span class="token punctuation">;</span> iex <span class="token variable"><span class="token punctuation">((</span>New<span class="token operator">-</span>Object System.Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span>'https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>chocolatey.org<span class="token operator">/</span>install.ps1'<span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>安装 Gtk2Hs<ul><li><p>参考 <a href="https://wiki.haskell.org/Gtk2Hs/Installation#Haskell_Build_System">这里</a>。</p></li><li><p>gtk3 安装</p><p>GTK 地址：<a href="http://www.tarnyko.net/dl/gtk.htm">http://www.tarnyko.net/dl/gtk.htm</a></p><p>解压到合适位置，将 /bin 加入到环境变量中</p></li><li><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cabal updatecabal <span class="token function">install</span> gtk2hs-buildtoolscabal <span class="token function">install</span> gtk3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h1>修订记录</h1><ul><li><p>2021-01-21</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Haskell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> haskell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚果云 webdav orgzly</title>
      <link href="2021/webdav-jian-guo-yun/"/>
      <url>2021/webdav-jian-guo-yun/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/orgzly/orgzly-android/releases">orgzly</a> 是可以认为是 eamcsorg-mode 的 Android 版本。我用于日常记录灵感、任务、计划等等。</p><p><a href="https://www.jianguoyun.com/">坚果云</a> 免费版可提供 1G 的存储，单独作为 webdav 存储服务器，对于 orgzly 日常使用足够了。</p><h1>开通坚果云 webdav 服务</h1><ol><li>申请坚果云账号。</li><li><code>账户信息</code>-&gt;<code>安全选项</code>-&gt;<code>第三方应用管理</code>-&gt;<code>添加应用</code>。</li><li>可以置应用名称为 <code>orgzly</code>，获取相应密码。</li><li>在首页创建新目录 <code>orgzly</code>，作为 orgzly 存储位置。<strong>若不创建则无法正常同步</strong>。</li></ol><h1>orgzly 设置服务器账号密码</h1><ol><li><code>设置</code>-&gt;<code>同步</code>-&gt;<code>存储库</code>。</li><li>URL 设置为 <code>https://dav.jianguoyun.com/dav/orgzly</code>。<ul><li>区别于官网给的 URL，我们需要将新建目录 <code>orgzly</code> 添加在 URL 末尾 orgzly 才能正常同步。</li></ul></li><li>用户名和密码在开启 webdav 服务页面都有显示。</li></ol><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> webdav </tag>
            
            <tag> orgzly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 配置</title>
      <link href="2021/ssh-pei-zhi/"/>
      <url>2021/ssh-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>freeBSD ssh 介绍及服务器搭建。</p><h1>加密解密</h1><ol><li><p>对称加密</p><p>简单的说，即加密和解密明文使用相同的密码，如 AES（DEC 被认为是不安全的）。</p></li><li><p>非对称加密</p><p>使用不同但却完全匹配的一对钥匙————公钥和私钥。公钥是公开的，私钥只有解密者才知道。加密明文使用公钥加密，解密密文时只有匹配的私钥才可解开。如 RSA、DSA。</p></li></ol><h1>SSH 介绍</h1><h2 id="SSH-协议">SSH 协议</h2><p>SSH 为 Secure Shell 缩写，为远程登录会话和其它网络服务提供安全性的协议。</p><p>SSH 主要由三部分组成：</p><ol><li><p>传输层协议 [SSH-TRANS]</p><p>提供服务器认证，保密性及完整性。通常运行在 TCP/IP 连接上。该协议中的认证基于主机，并且该协议不执行用户认证。</p></li><li><p>用户认证协议 [SSH-USERAUTH]</p><p>用于向服务器提供客户端用户鉴别功能。运行在传输层协议上。</p></li><li><p>连接协议 [SSH-CONNECT]</p><p>将多个加密隧道分成逻辑通道。运行在用户认证协议上。提供交互式登录话路、远程命令执行、转发 TCP/IP 连接和转发 X11 连接。</p></li></ol><h2 id="版本">版本</h2><p>SSH 由客户端和服务端软件组成，有两个不兼容的版本分别是 1.x 和 2.x。使用 2.x。</p><h2 id="验证原理">验证原理</h2><ol><li><p>基于口令的安全验证</p><p>使用账号和口令登录远程机，但不能保证所连接的服务器就是你想连接的服务器。可能会有别的服务器冒充，即受到“中间人”攻击。</p></li><li><p>基于秘钥的安全验证</p><ul><li>创建一对秘钥，将公钥置于 SSH 服务器。</li><li>客户端向服务器发送请求，请求用公钥进行安全验证。</li><li>服务器收到请求，找到你的公钥，然后和你发送过来的公钥进行对比。</li><li>若一致，服务器用公钥加密质询“challenge”，并发送给客户端。</li><li>客户端收到质询后用私钥解密，再发送给服务器。</li></ul></li></ol><h1>SSH 工作过程</h1><h2 id="服务器建立公钥">服务器建立公钥</h2><p>若服务器是新系统，则会在 <code>/etc/ssh</code> 下生成一个名为 <code>ssh_host_ecdsa_key.pub</code> 公钥和一个 <code>ssh_host_ecdsa_key</code> 私钥，这一对就是远程服务器的公钥与私钥。每次启动sshd 服务时，系统会自动在此路径下查找公钥。</p><h2 id="客户端请求连接">客户端请求连接</h2><p>客户端发起一个 TCP 连接，默认端口号为 22。</p><ol><li><p>Linux 可直接通过 <code>ssh user@host</code> 连接</p><ul><li>若客户端和服务器是相同的用户，则可以省去 user。</li></ul></li><li><p>windows 下可通过 putty，xshell 工具等连接。</p></li></ol><h2 id="服务器响应客户端">服务器响应客户端</h2><p>服务端收到连接请求后，将自己的关键信息发给客户端。</p><ol><li><p>服务器端的公钥</p><p>客户端在收到公钥后，会在自己的 <code>~/.ssh/known_hosts</code> 中进行搜索。若未找到则在终端显示一段警告信息，由用户来决定是否继续连接。</p></li><li><p>服务器所支持的加密算法列表</p><p>客户端根据此列表来决定采用哪种加密算法。</p></li></ol><h2 id="生成会话秘钥">生成会话秘钥</h2><p>此时客户端拥有了服务端的公钥，然后客户端和服务端需要协商出一个双方都认可的秘钥，以此来对双方后续的通信内容进行加密。</p><p>秘钥协商算法 Diffie-Hellman</p><ol><li>服务端和客户端共同选定一个大素数，叫做种子值。</li><li>服务端和客户端各自独立地选择另外一个只有自己才知道的素数。</li><li>双方使用相同的加密算法，由种子值和各自的私有素数生成一个秘钥值，并将这个值发送给对方。</li><li>收到秘钥值后，服务端和客户端根据种子值和自己的私有素数，计算出一个最终的秘钥。<ul><li>该步骤由双方分别独立进行，但是得到的结果应该是相同的。</li></ul></li><li>双方使用上一步得到的结果作为秘钥来加密和解密通信内容。</li></ol><h2 id="服务端验证客户端合法性">服务端验证客户端合法性</h2><p>接下来，客户端将自己的公钥 ID 发送给服务端，服务端需要对客户端的合法性进行验证。</p><ol><li>服务端在自己的 <code>authorized_keys</code> 文件中搜索与客户端匹配的公钥。</li><li>若找到，服务端用这个公钥加密一个随机数，并把加密后的结果发送给客户端。</li><li>如果客户端持有正确的私钥，那么它就可以对消息进行解密从而获得这个随机数。</li><li>客户端由这个随机数和当前的会话秘钥共同生成一个 MD5 值，并发送给服务端。</li><li>服务端同样会计算 MD5，并与客户端发过来的值进行比较，若相等则验证通过双方即可开始正常通信。</li></ol><h1>Linux/FreeBSD 配置</h1><ol><li><p>创建.ssh 文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>产生秘钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -P <span class="token string">"密码提示语"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>authorized_keys</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> id_rsa.pub authorized_keys<span class="token function">chmod</span> <span class="token number">600</span> authorized_keys<span class="token function">chmod</span> -R <span class="token number">700</span> .ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>sshd_config</p><pre class="line-numbers language-none"><code class="language-none"># vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config# 仅使用 SSH2protocol 2# 不允许 root 用户使用 SSHPermitRootLogin no# 不允许使用密码方式登陆PasswordAuthentication no# 禁止空密码进行登陆PermitEmptyPasswords no# 启用 RSA 认证RSAAuthentication yes# 启用公钥认证PubkeyAuthentication yes# 使用 authorized_keysAuthorizedKeysFile .ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1>远程连接工具</h1><p>服务端保留公钥，客户端保留私钥。远程连接工具如 putty，xshell，secureCRT，Tera Term。</p><ol><li><p>putty 设置</p><ul><li><p>Session</p><pre class="line-numbers language-none"><code class="language-none">Host name(or IP address) :192.168.0.xxxPort : 22Connection type : SSH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Connection-&gt;SSH-&gt;Auth</p><pre class="line-numbers language-none"><code class="language-none">Private key file for authentication : &quot;D:\keys dir\xxx.ppk&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>save Session</p><pre class="line-numbers language-none"><code class="language-none">Session-&gt;Saved Sessions（添加会话名，如 test)-&gt;save下次启动 putty 后直接 load 会话名即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>puttygen 生成秘钥对</p><ul><li><p>Parameters</p> <pre class="line-numbers language-none"><code class="language-none">Type of key to generate : RSANumber of bits ... : 2048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Actions</p> <pre class="line-numbers language-none"><code class="language-none">Generate a public&#x2F;private key pair<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>puttygen 秘钥格式转换</p><ul><li><p>putty 有自己的秘钥格式，以.ppk 结尾</p></li><li><p>打开 puttygen 转换 ppk 格式</p> <pre class="line-numbers language-none"><code class="language-none">Actions-&gt;Load an existing private key file-&gt;save public&#x2F;private key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>PSFTP 传输文件</p><p>打开 psftp，help 显示指令</p><pre class="line-numbers language-none"><code class="language-none">#打开名为 test 的已保存的会话psftp&gt; open test#从远程机下载文件psftp&gt; get remote_host_file#上传文件到远程机psftp&gt; put local_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD jenkins CI/CD 配置</title>
      <link href="2021/jenkins-xiang-mu-pei-zhi/"/>
      <url>2021/jenkins-xiang-mu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>FreeBSD 12.0 安装 Jenkins 实现 github+jenkins 自动化构建及发布 LaTeX 文档。</p><ol><li>在本地仓库中编写 latex 文档。</li><li>提交并 push 到 github 仓库。</li><li>github 触发动作，通知 FreeBSD+jenkins 获取 github 仓库最新内容。</li><li>jenkins 检查仓库是否满足编译 LaTeX 源码条件。</li><li>输出 PDF 文档，邮件通知用户构建状态及其它信息。</li></ol><p>之前 github actions 还未上线，所以搞这个很麻烦。github actions 提供了无限可能。</p><h1>FreeBSD shell 配置</h1><ol><li><p>jenkins 启动脚本 <a href="http://startup.sh">startup.sh</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;bash#设置 jenkins 家目录环境变量 $JENKINS_HOMEJENKINS_ROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;jenkinsexport JENKINS_HOME&#x3D;$JENKINS_ROOT&#x2F;jenkins_home#启动 jenkins.war 文件，设置访问端口为 8000java -jar $JENKINS_ROOT&#x2F;jenkins.war --httpPort&#x3D;8000 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以 root 身份启动 <a href="http://startup.sh">startup.sh</a> 脚本</p></li></ol><h1>jenkins 项目配置</h1><p>采用 <strong>自由风格的项目</strong>。</p><p>配置文件位置：</p><pre class="line-numbers language-none"><code class="language-none">JENKINS_HOME&#x2F;jobs&#x2F;YOUR_PROJECT_NAME&#x2F;config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>勾选&quot;General -&gt; GitHub 项目&quot;</p><p>项目 URL ：<a href="https://github.com/coco-hkk/LearningPolicy">https://github.com/coco-hkk/LearningPolicy</a></p></li><li><p>勾选&quot;源码管理 -&gt; Git&quot;</p><pre class="line-numbers language-none"><code class="language-none">Repositories： Repository URL:git@github.com:coco-hkk&#x2F;LearningPolicy.git Credentials: jenkins github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>勾选 “构建触发器 -&gt; Github hook trigger for GITScm Polling”</p></li><li><p>勾选 “构建环境 -&gt; Add timestamps to the Console Output”</p></li><li><p>构建 -&gt; Execute shell</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">jenkins&#x3D;&#x2F;usr&#x2F;local&#x2F;jenkinssh pdf_generate.shcd $jenkins&#x2F;PolicyDcumentif [ $(git status | awk &#39;END &#123;print&#125;&#39;) &#x3D; &quot;无文件要提交，干净的工作区&quot; ];thenecho &quot;No Change&quot;elsegit add -Agit commit -m &quot;update document&quot;git pushfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构建后操作 -&gt; Editable Email Notification Default Content</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$&#123;ENV, var="JOB_NAME"&#125;- 第 $&#123;BUILD_NUMBER&#125;次构建日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">leftmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">topmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>      <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>项目构建信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>构建项目 by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>$&#123;PROJECT_NAME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CC0000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        本邮件由系统自动发出，无需回复！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>构建报告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建报告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;BUILD_URL&#125;allure/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;allure/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>构建信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>项目名称：$&#123;PROJECT_NAME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建编号：第 $&#123;BUILD_NUMBER&#125;次构建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>触发原因：$&#123;CAUSE&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建状态：$&#123;BUILD_STATUS&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建日志：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;BUILD_URL&#125;console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;BUILD_URL&#125;console<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建 URL：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;BUILD_URL&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;BUILD_URL&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>工作目录：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;PROJECT_URL&#125;ws<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;ws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>项目 URL：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;PROJECT_URL&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>提交者    ：$&#123;GIT_COMMITTER_NAME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>文档地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/coco-hkk/PolicyDcument<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GitHub Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>（该地址为 private，需要登录 github 账户）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>失败用例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>$&#123;FAILED_TESTS&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>变更信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>历史变更记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;PROJECT_URL&#125;changes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>变更集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>$&#123;JELLY_SCRIPT,template="html"&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>构建日志（最后 20 行）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readonly<span class="token punctuation">"</span></span>                      <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> Courier New</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>$&#123;BUILD_LOG, maxLines=20&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD Jenkins 安装</title>
      <link href="2021/freebsd-an-zhuang-jenkins/"/>
      <url>2021/freebsd-an-zhuang-jenkins/</url>
      
        <content type="html"><![CDATA[<p>在 FreeBSD 12.0 操作系统安装 jenkins。</p><p><a href="https://jenkins.io/zh/doc/book/installing/">jenkins 官网</a> 提供了三种安装方案。</p><ol><li>docker + jenkins 方式</li><li>jenkins.war 文件方式</li><li>二进制安装方法</li></ol><p>折腾很久……</p><ol><li>放弃方案 3，FreeBSD packages 中无 jenkins。</li><li>放弃 docker + jenkins，freeBSD 的 docker 二进制包是 2015 年的太过陈旧，ports 编译服务器性能差太浪费时间。</li><li>通过 java 直接运行 jenkins.war 文件（这种方式很变扭，刚刚开始没理解）。</li></ol><h1>docker + jenkins 方式</h1><p>FreeBSD 支持的 <a href="https://wiki.freebsd.org/Docker">docker package</a> 是 2015 年的，不合适。通过 ports 也可以编译，但是我觉得服务器性能差，所以没有尝试。</p><p>实际上，或许直接从服务器编译 ports 会更加省时间。</p><p>我找了替代方案，使用 virtualbox + docker 的方式安装 docker。</p><h2 id="安装-virtualbox">安装 virtualbox</h2><ol><li><p>更新安装 prots 源</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">portsnap fetch extractportsnap fetch update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编译 virtualbox-ose</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;usr&#x2F;ports&#x2F;emulators&#x2F;virutalbox-osemake configmakemake install clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>以上两步需要编译很长时间，不划算，采用 pkg 安装方式。</p><ol><li><p>更新 pkg 源</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pkg update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 virtualbox</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pkg install -y virtualbox-ose-nox11-5.2.32_1 virtualbox-ose-additions-nox11-5.2.32_1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 kernel</p><p>在 <strong>/boot/loader.conf</strong> 添加</p><pre class="line-numbers language-none"><code class="language-none">vboxdrv_load&#x3D;&quot;YES&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>加载 vboxdrv</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">kldload vboxdrv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 vboxnetctl device</p><p>编辑 <strong>/etc/devfs.rules</strong> ，若该文件不存在则创建。</p><pre class="line-numbers language-none"><code class="language-none">[system&#x3D;10]add path &#39;vboxnetctl&#39; mode 0660 group vboxusers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>网络和防火墙配置</p><p>编辑 <strong>/etc/rc.conf</strong>。</p><pre class="line-numbers language-none"><code class="language-none">devfs_system_ruleset&#x3D;&quot;system&quot;vboxnet_enable&#x3D;&quot;YES&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>增加 vbox 用户</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pw groupmod vboxusers -m naruto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动服务</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">service devfs restartservice vboxnet start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建虚拟机</p></li></ol><h2 id="安装-docker">安装 docker</h2><ol><li><p><a href="http://daemon-notes.com/articles/network/docker">pkg 安装</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pkg install docker docker-machine docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为了使用 docker，创建一个 machine</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker-machine create --driver virtualbox \    --virtualbox-memory 1024 \    --virtualbox-cpu-count 1 \    --virtualbox-disk-size 10240 \    Adocker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>出问题了，阿里云 ECS 无法再次虚拟化，要掏钱换其它服务，人生处处有惊喜！</strong></p></li></ol><h1>java + jenkins.war</h1><ol><li><p>安装 jenkins 环境</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pkg install jenkins-lts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>找到 jenkins.war，执行以下指令即可启动</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">java -jar jenkins.war<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>记录初次登陆密码。</p></li><li><p>登录 <code>http://localhost:8000</code> 进行后续配置，此端口需要阿里云网络安全组配合配置 。</p></li></ol><h1>总结</h1><p>安装软件不能总是依赖 pkg 和 ports，适当的时候下载源码自己编译会更快。</p><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 总结</title>
      <link href="2021/docker-zong-jie/"/>
      <url>2021/docker-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>Docker 依赖于 Linux 内核环境，实质上是在已经运行的 Linux 下制造了一个隔离的文件环境。</p><p>Windows 若安装 Docker，需要安装带有 Linux 系统的虚拟机，在虚拟机中安装 Docker。</p><h1>减小 Docker 镜像体积</h1><ol><li>使用 &amp;&amp; 操作合并 RUN 命令，减少构建镜像层数。</li><li>使用多阶段构建，将多个层压缩为一个。适用于编译构建和配置分阶段，前阶段编译结果拷贝到后阶段进行配置。精髓在于 <strong>COPY --from= 构建阶段 …</strong> 指令。</li><li>使用 distroless 去除容器中所有不必要的东西，只保留运行此进程所需的最少文件。（Docker 容器应该只包含一个进程）。</li><li>使用小体积的 Alpine 基础镜像。</li></ol><h1>Dockerfile</h1><p>实例：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token keyword">FROM</span> ubuntu<span class="token punctuation">:</span>20.04<span class="token keyword">LABEL</span> <span class="token keyword">maintainer</span> <span class="token string">"hk.fanwall@gmail.com"</span><span class="token comment">#创建用户</span><span class="token keyword">RUN</span> useradd <span class="token punctuation">-</span>s /bin/bash <span class="token punctuation">-</span>m naruto<span class="token comment">#更新软件源</span><span class="token keyword">WORKDIR</span> /etc/apt<span class="token keyword">RUN</span> cp sources.list sources.list.bak \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted"</span> <span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal universe"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates universe"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal multiverse"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates multiverse"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security universe"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security multiverse"</span> <span class="token punctuation">></span><span class="token punctuation">></span> sources.list \ &amp;&amp; apt<span class="token punctuation">-</span>get update<span class="token comment">#安装软件</span><span class="token keyword">RUN</span> apps=<span class="token string">'vim curl wget'</span> \ &amp;&amp; apt<span class="token punctuation">-</span>get install <span class="token punctuation">-</span>y $apps<span class="token comment">#配置</span><span class="token keyword">COPY</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>chown=naruto<span class="token punctuation">:</span>naruto .vimrc /home/naruto/<span class="token keyword">USER</span> naruto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 自动部署 latex</title>
      <link href="2021/github-zi-dong-bu-shu-latex/"/>
      <url>2021/github-zi-dong-bu-shu-latex/</url>
      
        <content type="html"><![CDATA[<p>利用 github actions 实现自动部署 LaTeX。提交 tex 文件，发布 PDF 文档。</p><h1>github actions</h1><ol><li><p><a href="https://github.com/xu-cheng/latex-action">xu-cheng/latex-action@v2</a></p><ul><li><code>xu-cheng/latex-action</code> 编译 LaTeX 的 action</li><li><code>@v2</code> action 版本 2，tags v2</li></ul></li><li><p><a href="https://github.com/actions/upload-release-asset">actions/upload-release-asset@v1</a></p><ul><li><code>actions/upload-release-asset</code> 发布 release 的 action</li><li><code>@v1</code> action 版本 1，tags v1</li></ul></li></ol><h1>latex.yml</h1><p>位于 <code>.github/workflows/latex.yml</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># workflows 名称</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Build LaTeX document<span class="token comment"># master push 事件触发 workflows</span><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token key atrule">push</span><span class="token punctuation">:</span>  <span class="token key atrule">branches</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> master<span class="token comment"># jobs</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token comment"># build_latex job</span>  <span class="token key atrule">build_latex</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Git repository        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Compile LaTex document with pre/post compile actions        <span class="token key atrule">uses</span><span class="token punctuation">:</span> xu<span class="token punctuation">-</span>cheng/latex<span class="token punctuation">-</span>action@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">root_file</span><span class="token punctuation">:</span> <span class="token punctuation">|</span>            <span class="token comment"># 待编译的 tex 文件，latex_action 具体用法参考 github actions 节#2</span>            test.tex          <span class="token key atrule">latexmk_use_xelatex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>synctex=1 <span class="token punctuation">-</span>interaction=nonstopmode          <span class="token key atrule">pre_compile</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            # 从仓库中获取 VERSION 版本号            ver=$(cat VERSION)</span>            <span class="token comment"># 设置版本号环境变量</span>            echo "<span class="token punctuation">:</span><span class="token punctuation">:</span>set<span class="token punctuation">-</span>env name=version<span class="token punctuation">:</span><span class="token punctuation">:</span>$ver"          <span class="token key atrule">post_compile</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            # 打包生成的 PDF 文档            mkdir policy            cp *.pdf policy            tar -czvf policy.tar.gz ./policy/*</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create Release        <span class="token key atrule">id</span><span class="token punctuation">:</span> create_release        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/create<span class="token punctuation">-</span>release@v1        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 从环境变量中获取版本号</span>          <span class="token key atrule">tag_name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">release_name</span><span class="token punctuation">:</span> Release $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> env.version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">draft</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">prerelease</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload Release Asset        <span class="token key atrule">id</span><span class="token punctuation">:</span> upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset@v1        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITHUB_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">upload_url</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.create_release.outputs.upload_url <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment"># 打包文件位置</span>          <span class="token key atrule">asset_path</span><span class="token punctuation">:</span> ./policy.tar.gz          <span class="token key atrule">asset_name</span><span class="token punctuation">:</span> policy.tar.gz          <span class="token key atrule">asset_content_type</span><span class="token punctuation">:</span> application/zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 自动 push</title>
      <link href="2021/github-zi-dong-push/"/>
      <url>2021/github-zi-dong-push/</url>
      
        <content type="html"><![CDATA[<p>push 操作触发 github actions，把本仓库推送的文件推送到其它 repo。</p><h1>github actions workflows</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Blog Push<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'blog/**'</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Push</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Actions checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> checkout Blog        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          # 中文显示          git config --global core.quotepath false</span>          cd ..          git clone https<span class="token punctuation">:</span>//github.com/coco<span class="token punctuation">-</span>hkk/&lt;your repo<span class="token punctuation">></span>.git BlogPush      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get blogs        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          cd ../blogRepo</span>          <span class="token comment"># 获取提交所有文件</span>          update_file=$(git show <span class="token punctuation">|</span> grep "^diff" <span class="token punctuation">|</span> awk '<span class="token punctuation">&#123;</span>print $4<span class="token punctuation">&#125;</span>')          for file in $(echo "$update_file")          do          file=$(echo $file <span class="token punctuation">|</span> awk '<span class="token punctuation">&#123;</span>print substr($0<span class="token punctuation">,</span> 3)<span class="token punctuation">&#125;</span>')          if <span class="token punctuation">[</span> $<span class="token punctuation">&#123;</span>file<span class="token punctuation">:</span>0<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span> = '/' <span class="token punctuation">]</span>; then            file=$(echo $file <span class="token punctuation">|</span> awk '<span class="token punctuation">&#123;</span>print substr($0<span class="token punctuation">,</span> 2)<span class="token punctuation">&#125;</span>' <span class="token punctuation">|</span> sed 's/"//g')            echo "chinese show"          fi          test <span class="token punctuation">-</span>f $file <span class="token punctuation">|</span><span class="token punctuation">|</span> (echo "$file X" <span class="token important">&amp;&amp;</span> continue)          echo $file <span class="token punctuation">></span><span class="token punctuation">></span> updatefile          done          <span class="token comment"># 找到 1_Blog 目录下本次推送的所有 md、png 和 jpeg 文件</span>          cat updatefile <span class="token punctuation">|</span> uniq <span class="token punctuation">|</span> grep "^1_Blog" <span class="token punctuation">|</span> tee updatefile          cat updatefile <span class="token punctuation">|</span> grep ".png$" <span class="token punctuation">|</span> tee png.txt          cat updatefile <span class="token punctuation">|</span> grep ".jpeg$" <span class="token punctuation">|</span> tee jpeg.txt          cat updatefile <span class="token punctuation">|</span> grep ".md$" <span class="token punctuation">|</span> tee md.txt          cat png.txt <span class="token punctuation">></span> updatefile          cat jpeg.txt <span class="token punctuation">></span><span class="token punctuation">></span> updatefile          cat md.txt <span class="token punctuation">></span><span class="token punctuation">></span> updatefile      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push blogs        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          if [ ! -s updatefile ]; then            echo "nothing need to commit"            exit          fi</span>          <span class="token comment"># 拷贝本次推送的 md,png,jpeg 文件到其它仓库</span>          cp <span class="token punctuation">-</span>rf $(cat updatefile) ../BlogPush/src          cd ../BlogPush          <span class="token comment"># 配置 git</span>          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>local user.email "hkkdlut@sina.cn"          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>local user.name "coco<span class="token punctuation">-</span>hkk"          <span class="token comment"># 提交</span>          git status          git add <span class="token punctuation">-</span>A          git commit <span class="token punctuation">-</span>m "update blog"          <span class="token comment"># 推送</span>          git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.token <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>@github.com/coco<span class="token punctuation">-</span>hkk/&lt;your repo<span class="token punctuation">></span>.git" source<span class="token punctuation">:</span>source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>HTTP 标准鉴权</h1><ol><li><p>URL 格式</p><pre class="line-numbers language-none"><code class="language-none">user:password@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>URL 特殊格式</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;username:password@example.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>GitHub 方式</p><pre class="line-numbers language-none"><code class="language-none">使用 https 需要在 [github](https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens) 中生成新 token，然后构建远程 URLhttps:&#x2F;&#x2F;&lt;username&gt;:&lt;token&gt;@github.com&#x2F;&lt;username&gt;&#x2F;&lt;project_name&gt;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件压缩 GitHub actions</title>
      <link href="2021/github-chuang-jian-actions/"/>
      <url>2021/github-chuang-jian-actions/</url>
      
        <content type="html"><![CDATA[<p>创建 github docker action 实现指定目录的指定文件类型压缩打包。</p><h1>关键文件</h1><ol><li><p>action.yml</p><p>文件名是 <code>action</code> 而不是 <code>actions</code>。</p></li><li><p>Dockerfile</p></li><li><p><a href="http://entrypoint.sh">entrypoint.sh</a></p></li></ol><h1>action.yml</h1><pre class="line-numbers language-none"><code class="language-none"># action 名称name: &#39;Compress File&#39;# action 描述description: &#39;compress specific suffix files under specific path&#39;# action 入参inputs:  suffix:    # 入参描述    description: &#39;file suffix&#39;    required: true    default: &#39;pdf&#39;  path:    description: &#39;file path&#39;    required: true    default: &#39;.&#x2F;&#39;  method:    description: &#39;compress method: gzip bzip2 zip&#39;    required: true    default: &#39;gzip&#39;# 输出outputs:  archive:    description: &#39;compressed archive file&#39;runs:  using: &#39;docker&#39;  image: &#39;Dockerfile&#39;  args:    # 入参    - $&#123;&#123; inputs.suffix &#125;&#125;    - $&#123;&#123; inputs.path &#125;&#125;    - $&#123;&#123; inputs.method &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Dockerfile</h1><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token keyword">FROM</span> alpine<span class="token punctuation">:</span>3.10<span class="token keyword">LABEL</span> maintainer=<span class="token string">"coco-hkk@github.com"</span><span class="token keyword">RUN</span> apk update<span class="token keyword">COPY</span> entrypoint.sh /entrypoint.sh<span class="token keyword">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">"/entrypoint.sh"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><a href="http://entrypoint.sh">entrypoint.sh</a></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh -l</span><span class="token builtin class-name">set</span> -e<span class="token comment"># $&#123;&#123; inputs.suffix &#125;&#125;</span><span class="token assign-left variable">suffix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;1&#125;</span>"</span><span class="token comment"># $&#123;&#123; inputs.path &#125;&#125;</span><span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;2&#125;</span>"</span><span class="token comment"># $&#123;&#123; inputs.method &#125;&#125;</span><span class="token assign-left variable">method</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;3&#125;</span>"</span><span class="token comment"># action 功能实现代码</span><span class="token punctuation">..</span>.<span class="token comment"># $&#123;&#123; outputs.archive &#125;&#125;</span><span class="token builtin class-name">echo</span> ::set-output <span class="token assign-left variable">name</span><span class="token operator">=</span>archive::<span class="token variable">$archive</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freeRTOS 堆栈管理</title>
      <link href="2021/freertos-dui-zhan-guan-li/"/>
      <url>2021/freertos-dui-zhan-guan-li/</url>
      
        <content type="html"><![CDATA[<p>FreeRTOS(10.2) 有五种堆栈分配方案，按需自裁剪。</p><h1>通用配置</h1><ol><li><p>堆栈配置</p><ul><li>配置文件 FreeRTOSConfig.h。</li><li>宏 <code>configTOTAL_HEAP_SIZE</code>，表示堆栈的总大小，单位为字节。</li><li>宏 <code>configADJUSTED_HEAP_SIZE</code>，表示实际的堆栈总大小，为保证堆栈指针字节对齐而牺牲部分空间。</li><li>数组 <code>ucHeap[ configTOTAL_HEAP_SIZE ]</code>，表示堆栈空间。</li></ul></li><li><p>内存对齐配置</p><ul><li>文件 portmacro.h。</li><li>宏 <code>portBYTE_ALIGNMENT</code>，表示内存访问默认 8 字节对齐（后续按照默认分析）。</li></ul></li></ol><h1>方案一</h1><p>堆栈空间是一个数组。以基址加偏移的方式分配堆栈，基址不变，偏移是历次申请堆栈大小之和。返回地址为基址加前次偏移（即除去当次申请的大小）。适合申请后不变动的场景。</p><p><img src="/2021/freertos-dui-zhan-guan-li/fangan1.png" alt="方案 1"></p><ol><li><p>将请求的堆栈大小 <code>xWantedSize</code> 向上取整 8 字节对齐（下同）。</p><ul><li>假设请求 15 个字节，那么会自动变为 16 个字节。</li></ul></li><li><p>挂起任务调度（下同）。</p><ul><li>堆栈分配代码段属于临界资源，需要加锁，而此处直接挂起了所有任务防止死锁 / 优先级反转等。</li></ul></li><li><p>第一次分配时将堆栈基指针 <code>pucAlignedHeap</code> 字节对齐。</p><ul><li>仅针对 <code>pucAlignedHeap</code>，而非 <code>ucHeap</code> 地址（ucHeap 地址由编译器分配）。它永远指向 <code>ucHeap</code> 第一个 8 字节中的某个位置。</li></ul></li><li><p>判断本次分配的堆栈大小是否超过剩余的空间，剩余空间以<code>configADJUSTED_HEAP_SIZE</code> 为准计算。</p></li><li><p>若未超过，则返回由 <code>pucAlignedHeap</code> 与 <code>xNextFreeByte</code> 之和指定的地址，然后更新 <code>xNextFreeByte</code>。</p><ul><li>其实就是“基址 + 偏移”的寻址模式，基址 <code>pucAlignedHeap</code> 固定，每次更新偏移<code>xNextFreeByte</code>。</li></ul></li><li><p>恢复任务调度。</p></li><li><p>当分配失败，若打开了宏 <code>configUSE_MALLOC_FAILED_HOOK</code> ，则会调用钩子函数进行异常处理。失败原因只有一个 ——<strong>内存不足</strong>。</p></li></ol><h1>方案二</h1><p>采用基于数组的链表结构方式分配管理堆栈，相对于方案一更加灵活，但是分配释放过程中容易产生碎片。此方案无碎片整理功能，适合固定大小申请和释放的场景。</p><p><img src="/2021/freertos-dui-zhan-guan-li/fangan2-1.png" alt="方案 2.1"></p><ol><li><p>申请堆栈之前必须要将所有任务挂起，分配之后恢复。</p></li><li><p>结构体 <code>BlockLink_t</code> 有两个成员，分别为指向空闲块的指针和空闲块大小。</p></li><li><p>初始化后是总共有三个节点的单向链表，结点分别为 <code>xStart</code> 头结点，<code>xEnd</code> 尾结点，<code>ucHeap</code> 结点。</p></li><li><p>如图中链表为 <code>xStart-&gt;ucHeap-&gt;xEnd</code>，其中 <code>xStart</code> （标号 1) 指向 <code>ucHeap</code> 的第一个 8 字节中的某个字节的地址 <code>pubAlignHeap</code> （标号 3，8 字节对齐，<code>ucHeap</code> 结点的起始地址），大小为 0 ；<code>ucHeap</code> 数组是待分配的空闲堆栈，空闲块长度为<code>configADJUSTED_HEAP_SIZE</code> （标号 5)，实际上它包括了 <code>ucHeap</code> 结点的长度（标号 6红色阴影部分）；<code>xEnd</code> （标号 2 ) 仅作为链表尾部标志。</p></li><li><p><code>xStart</code> 和 <code>xEnd</code> 不代表堆栈块（空间）的结点，已分配的堆栈块虽然仍在 <code>ucHeap</code>数组内，但已分配堆栈的结点不在该链表中，链表是空闲堆栈块（空间）的链表。</p></li></ol><p><img src="/2021/freertos-dui-zhan-guan-li/fangan2-2.png" alt="方案 2.2"></p><ol><li><p>当申请堆栈大小为 <code>xWantedSize</code> 时，还需要将结点的大小 <code>heapSTRUCT_SIZE</code> （标号</p><ol><li>算上（若 <code>xWantedSize</code> 已经 8 字节对齐，则无需做处理），然后 8 字节向上取整对齐 (标号 2)，此时才是实际申请的堆栈大小。</li></ol></li><li><p>分配时，遍历空闲链表，返回满足长度大于实际申请大小的结点。若未找到，虽然可能此时总的空闲堆栈大小满足申请大小，但仍然返回申请失败，堆栈空间不足。</p></li><li><p>若找到，将该结点移出空闲链表。将该结点所指堆栈块按照实际申请大小拆分，剩余部分若满足创建新的空闲堆栈的条件（代码中是 2 倍的 <code>heapSTRUCT_SIZE</code>，我觉得 1倍就可以了，因为实际申请的大小中包含了申请空间的结点的大小）则根据其大小遍历空闲链表从小到大插入到合适的位置。返回给调用者的堆栈地址，并不是此结点的地址，而是在它基础上偏移（加） <code>heapStRUCT_SIZE</code>。此时空闲链表变为 <code>xStart-&gt;标号 3-&gt;xEnd</code>。</p></li><li><p>图中只考虑了最简单的情况，即经过多次堆栈申请并未释放，所以每次申请的堆栈地址递增。假设此时要释放标号 4，且它比标号 5 大。即使释放操作也必须挂起所有任务，待操作完后恢复。</p></li><li><p>释放标号 4 时，必须将其堆栈地址减去 <code>heapSTRUCT_SIZE</code>，因为申请时返回堆栈地址时偏移了。然后遍历空闲链表，从小到大插入到合适位置。即图中<code>xStart-&gt;标号 5-&gt;标号 4-&gt;xEnd</code>。</p></li></ol><p>这里有统计剩余空间大小的变量 <code>xFreeBytesRemaing</code>，个人觉得比较鸡肋：</p><ol><li><p>在分配堆栈时，若拆分堆栈时剩余部分无法满足形成新结点的条件，那么这部分堆栈是无法使用的。</p></li><li><p>在上述情况下，即使能够形成新结点，假设可分配空间很小而实际工程中无法使用。</p></li><li><p>存在请求的堆栈大小大于所有结点大小情况，返回失败，但此变量显示空间充足，影响调试。</p></li></ol><p>综上，由于碎片化严重，该变量判断非常不准确，不能以此作为条件执行重要的功能。此方案只能应用于堆栈分配大小固定的场景。</p><h1>方案三</h1><p>封装 C 库中的堆栈分配函数 malloc 和 free 。</p><ol><li>即使封装后也需要在申请和释放时将所有任务挂起，操作完成后恢复。</li><li>区别于前两个方案，并非先分配一个大数组 <code>ucHeap</code> ，然后操作 <code>ucHeap</code> 实现堆栈分配。完全由编译器决定。</li></ol><h1>方案四</h1><p>和方案二相同，基于数组的链表管理方法，可合并地址相邻的空闲堆栈块，具有一定的碎片整理功能。适合申请释放不频繁的场合使用（实时性需要自己保证了）。</p><p>此方案具有碎片整理功能，在操作堆栈时相对更加耗时。可以算个大概：</p><ol><li>查看汇编语句，根据每条指令的执行周期和 CPU 主频计算。</li><li>编写专门的申请释放堆栈代码做对比，多次测试取平均值。</li><li>在申请释放堆栈前后计时，多次测试取平均值。</li><li>硬件测量……</li></ol><p>此方案代码相对方案二繁琐大概是 1.6 倍。</p><ol><li><p>初始化堆栈</p><p><img src="/2021/freertos-dui-zhan-guan-li/fangan3-1.png" alt="方案 3.1"></p><ul><li><p>把数组 <code>ucHeap</code> 初始化成三部分，对齐浪费的（标号 1)，初始可分配的空闲堆栈（标号 3 及其表示的堆栈空间），尾结点（标号 2)。</p></li><li><p>链表为 <code>xStart-&gt;标号 3-&gt;标号 2（或 pxEnd)</code>。<code>pxEnd</code> 是指针，指向了 <code>ucHeap</code> 尾部被初始化成尾结点并 8 字节对齐的地址。<code>xStart</code> 并不在 <code>ucHeap</code> 内。</p></li><li><p>初始化 <code>xBlockAllocatedBit</code>，该变量会辅助指示堆栈块是否被程序使用。前提是一次分配的堆栈不能超过 2G，嵌入式一般也就 64K，256K 或更高但不会突破 1G。</p></li><li><p>初始化变量 <code>xMini...Remaining</code> 和 <code>xFreeBytesRemaining</code>。前者只能指示在程序运行以来整个系统空闲堆栈最少时的状况。后者显示当前系统的空闲堆栈量。</p></li></ul></li><li><p>申请堆栈</p><p><img src="/2021/freertos-dui-zhan-guan-li/fangan3-2.png" alt="方案 3.2"></p><ul><li><p>在申请时要把其它任务挂起，申请后恢复。</p></li><li><p>这里首先会将 <code>xWantedSize &amp; xBlockAllocatedBit</code>，用于判断是否申请空间过大而覆盖了标志变量 <code>xBlockAllocatedBit</code>。如前面所说，只有超过申请超过 2GB 才会覆盖。</p></li><li><p>同方案二，会对 <code>xWantedSize</code> 进行处理后对齐，主要<code>xHeapStructSize</code>计算在内。</p></li><li><p>从小到大遍历空闲链表的空闲堆栈大小，找到第一个大于 <code>xWantedSize</code> 的堆栈块。如图中标号 2，假设找到了结点 2nd。若没找到直接返回了 NULL。</p></li><li><p>首先 2nd 的地址需要偏移增加 <code>xHeapStructSize</code>，作为返回申请空间的地址，返回给应用程序的空间不包括结点。</p></li><li><p>其次把 2nd 的空闲空间分割成两部分，一部分返回给用户（标号 5)，剩余空闲部分加一个结点，即 3rd 结点。然后把 3rd 结点插入空闲链表。</p></li><li><p>标号 5 所代表的堆栈已被使用，那么其结点的 <code>xBlockSize</code> 被<code>xBlockAllocatedBit</code>打上标记，表示其已被分配不在空闲；<code>pxNextFreeBlock</code> 则被置为 NULL。不在和空闲链表联系。</p></li><li><p>更新一些参数。</p></li></ul></li><li><p>释放堆栈</p><ul><li><p>释放时也需要将其他任务挂起，释放后恢复。</p></li><li><p>传入的待释放空间的指针需要偏移减少 <code>xHeapStructSize</code>，把结点还原。</p></li><li><p>判断结点 <code>xBlockSize</code> 标志位是否为 1 和成员 <code>pxNextFreeBlock</code> 是否为 NULL。</p></li><li><p>若满足，则清除 <code>xBlockSize</code> 标志位。把该释放结点插入空闲链表。</p></li><li><p>更新 xFreeBytesRemaining 参数。</p></li></ul></li><li><p>空闲链表插入操作</p><p>本方案和二区别的地方就在于插入操作。处理过程也就是基础的单向链表查询、插入操作。</p><ul><li><p>方案二以插入结点所表示堆栈的大小为准遍历寻找合适插入点，本方案则以插入结点的地址为准遍历寻找合适插入点，碎片整理即指合并地址连续的不同空闲堆栈块</p></li><li><p>插入位置前面的结点地址偏移自身 <code>xBlockSize</code> 的位置正好是插入结点地址，此时将插入结点直接合并到前面的结点即可。否则直接前面结点的 <code>xBlockToInsert</code> 指针指向插入结点。</p></li><li><p>插入结点地址偏移自身 <code>xBlockSize</code> 的位置正好是插入位置后面结点的地址，此时需要判断后面的结点是否为 <code>pxEnd</code> 结点，如果不是就需要合并了。否则插入结点的<code>pxBlockToInsert</code> 指针直接指向后面结点即可。</p></li></ul></li></ol><h1>方案五</h1><p>此方案和方案四基本一致，所以适用的场景也一样。不同在于此方案分配的堆栈不是在一个数组内，而是由地址不连续的不同的内存区域组成。</p><p>主要分析地址不连续的内存区域如何被组织成一个整体的，此整体可看做方案四的<code>ucHeap</code>数组。其余的操作和方案四一样。</p><p><img src="/2021/freertos-dui-zhan-guan-li/fangan5.png" alt="方案 5"></p><ol><li><p>总的方法是遍历变量 <code>xHeapRegions</code> 的每个成员，把不连续的内存地址用链表的方式管理起来。</p></li><li><p>首先可以理解为在每块内存区域的首尾分别初始化一个 <code>BlockLink_t</code> 结点，作为该内存区域的起始和结束的标志。结点的地址 8 字节对齐。</p></li><li><p>首先 <code>xStart</code> 指向第一块内存区域的首结点，首结点指向本内存区域的尾结点，尾结点指向下一块内存区域的首结点，该首结点指向它所在内存块的尾结点。如图：<code>标号 1-&gt;标号 2-&gt;标号 3-&gt;标号 4-&gt;...</code></p></li></ol><h1>总结</h1><p>针对不同场景使用不同方案，已在各个方案下面提供了各自适应的场景了。可能用方案 4的比较多，方案四（包括方案五）提供的用于统计堆栈使用情况的两个变量<code>xFreeBytesRemaining</code> 和 <code>xMinimumEverFreeBytesRemaining</code> 都不靠谱，所以不能用这两个变量去做条件判断。后者可以大概描述代码可能需要使用多少内存，但需要大量的样本测试。</p><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FreeRTOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freertos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freeRTOSconfig 分析</title>
      <link href="2021/freertosconfig-fen-xi/"/>
      <url>2021/freertosconfig-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>freeRTOS 通过开关文件 <code>FreeRTOSConfig.h</code> 的预定义宏，实现裁剪定制内核。本文基于随便一个 config 配置文件分析。</p><h1>配置文件分析</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 1：抢占式实时系统，相同优先级时间片轮转 0：非实时系统，时间片轮转,*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 1：当操作系统处于空闲时激活 vApplicationIdleHook 钩子，必须确保不能有阻塞，循环， 延时等行为,*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_IDLE_HOOK</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 1：操作系统每次心跳会激活 vApplicationTickHook 钩子，同样不要有则塞、延时等行为 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TICK_HOOK</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 与设置的芯片主频保持一致 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configCPU_CLOCK_HZ</span><span class="token expression"><span class="token punctuation">(</span> <span class="token number">204000000UL</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 设置操作系统每次心跳的 TICK 时间，1000 为 1ms，(1/configTICK_RATE_HZ)s 依次类推 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configTICK_RATE_HZ</span><span class="token expression"><span class="token punctuation">(</span> <span class="token punctuation">(</span> TickType_t <span class="token punctuation">)</span> <span class="token number">1000</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 所创建任务的优先级范围为 0 ~ (configMAX_PRIORITIES - 1) */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configMAX_PRIORITIES</span><span class="token expression"><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 创建任务时任务的最小堆栈，这个宏必须在创建任务时自己引用，它不是自动赋给新建 任务的。当然也可以分配比这还小的堆栈了。特别的，创建任务时会自动创建 4 倍的大小 的实际堆栈。,*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configMINIMAL_STACK_SIZE</span><span class="token expression"><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token punctuation">)</span> <span class="token number">130</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 堆栈总大小，不能超过实际物理内存 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configTOTAL_HEAP_SIZE</span><span class="token expression"><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token class-name">size_t</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token number">40960</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 任务名字长度 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configMAX_TASK_NAME_LEN</span><span class="token expression"><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 是否启用调试功能，需要额外的代码和工具支持，Tracealyzer，trace */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TRACE_FACILITY</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 32 位系统设置为 0 就可以了，该参数影响很多参数的范围 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_16_BIT_TICKS</span><span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/* 若是抢占式实时系统，此选项使能会使和空闲任务相同优先级的任务立刻得到执行而不 需要等到空闲任务的时间片耗尽,*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 使能互斥锁、量 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_MUTEXES</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 方便用户调试使用，定位队列结构 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configQUEUE_REGISTRY_SIZE</span><span class="token expression"><span class="token number">8</span></span></span><span class="token comment">/* 检测任务 TCB 有无被破坏，若破坏激活堆栈溢出钩子 vApplicationStackOverflowHook */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configCHECK_FOR_STACK_OVERFLOW</span><span class="token expression"><span class="token number">2</span></span></span><span class="token comment">/* 使能递归互斥锁 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_RECURSIVE_MUTEXES</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 内存不足导致的堆栈申请失败，使能后激活钩子 vApplicationMallocFailedHook 处理失败情况 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_MALLOC_FAILED_HOOK</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 任务标签 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_APPLICATION_TASK_TAG</span><span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/* 计数信号量 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_COUNTING_SEMAPHORES</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 任务运行的时间 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configGENERATE_RUN_TIME_STATS</span><span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/* 协程不了解 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_CO_ROUTINES</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configMAX_CO_ROUTINE_PRIORITIES</span> <span class="token expression"><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 使能定时任务，定时任务是一个 server，接收来自不同任务的定时请求 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIMERS</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 定时任务的优先级 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configTIMER_TASK_PRIORITY</span><span class="token expression"><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 定时任务队列长度 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configTIMER_QUEUE_LENGTH</span><span class="token expression"><span class="token number">5</span></span></span><span class="token comment">/* 定时任务堆栈大小 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configTIMER_TASK_STACK_DEPTH</span><span class="token expression"><span class="token punctuation">(</span> configMINIMAL_STACK_SIZE <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 使能函数，否则无法使用这些函数 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskPrioritySet</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_uxTaskPriorityGet</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskDelete</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskCleanUpResources</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskSuspend</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskDelayUntil</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INCLUDE_vTaskDelay</span><span class="token expression"><span class="token number">1</span></span></span><span class="token comment">/* 下面一大段都是关于操作系统中断的硬件优先级配置和用户创建的任务的优先级没有任何关系 */</span><span class="token comment">/* Cortex-M specific definitions. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__NVIC_PRIO_BITS</span></span>  <span class="token comment">/* __BVIC_PRIO_BITS will be specified when CMSIS is being used. */</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configPRIO_BITS</span>       <span class="token expression">__NVIC_PRIO_BITS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configPRIO_BITS</span>       <span class="token expression"><span class="token number">5</span>        </span><span class="token comment">/* 32 priority levels */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* The lowest interrupt priority that can be used in a call to a "set priority"function. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configLIBRARY_LOWEST_INTERRUPT_PRIORITY</span><span class="token expression"><span class="token number">0x1f</span></span></span><span class="token comment">/* The highest interrupt priority that can be used by any interrupt serviceroutine that makes calls to interrupt safe FreeRTOS API functions.  DO NOT CALLINTERRUPT SAFE FREERTOS API FUNCTIONS FROM ANY INTERRUPT THAT HAS A HIGHERPRIORITY THAN THIS! (higher priorities are lower numeric values. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY</span><span class="token expression"><span class="token number">5</span></span></span><span class="token comment">/* Interrupt priorities used by the kernel port layer itself.  These are genericto all Cortex-M ports, and do not rely on any particular library functions. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configKERNEL_INTERRUPT_PRIORITY</span> <span class="token expression"><span class="token punctuation">(</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> configPRIO_BITS<span class="token punctuation">)</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configMAX_SYSCALL_INTERRUPT_PRIORITY</span> <span class="token expression"><span class="token punctuation">(</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> configPRIO_BITS<span class="token punctuation">)</span> <span class="token punctuation">)</span></span></span><span class="token comment">/* 自定义 assert 断言函数 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">configASSERT</span><span class="token expression"><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">taskDISABLE_INTERRUPTS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token comment">/* 需要将供应商提供的中断处理程序中的相关函数屏蔽掉，使用下面的。即将 freeRTOS 的相关函数映射成 CMSIS 标准函数 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vPortSVCHandler</span> <span class="token expression">SVC_Handler</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">xPortPendSVHandler</span> <span class="token expression">PendSV_Handler</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">xPortSysTickHandler</span> <span class="token expression">SysTick_Handler</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FreeRTOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freertos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS List 分析</title>
      <link href="2021/freertos-lie-biao-list-fen-xi/"/>
      <url>2021/freertos-lie-biao-list-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>FreeRTOS 的核心结构体有三个，分别为<code>xLIST</code>，<code>xLIST_ITEM</code>和<code>xMINI_LIST_ITEM</code>，最后一个由<code>xLIST_ITEM</code>裁剪得到（节省空间），故也可看作是两个核心结构体。所以主要分析两个核心结构体及其操作。</p><h1>结构体</h1><ol><li><p>结构体 xLIST_ITEM</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* 填充值如 0x5a5a5a5a，用于边界检测，一旦值被改变说明结构体被破坏了 */</span>    listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE    <span class="token comment">/* 一般用于链表降序排列 */</span>    configLIST_VOLATILE TickType_t xItemValue<span class="token punctuation">;</span>  <span class="token comment">/* 指向前一个 xLIST_ITEM 结点 */</span>    <span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span> <span class="token operator">*</span> configLIST_VOLATILE pxNext<span class="token punctuation">;</span>  <span class="token comment">/* 指向后一个 xLIST_ITEM 结点，双向链表 */</span>    <span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span> <span class="token operator">*</span> configLIST_VOLATILE pxPrevious<span class="token punctuation">;</span>  <span class="token comment">/* 指向拥有该结点的任务 TCB 的指针 */</span>    <span class="token keyword">void</span> <span class="token operator">*</span> pvOwner<span class="token punctuation">;</span>  <span class="token comment">/* 指向拥有该结点的队列 */</span>    <span class="token keyword">struct</span> <span class="token class-name">xLIST</span> <span class="token operator">*</span> configLIST_VOLATILE pxContainer<span class="token punctuation">;</span>    listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span> ListItem_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体 xMINI_LIST_ITEM</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">xMINI_LIST_ITEM</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* 可以看到此链表是 xLIST_ITEM 的简化 */</span>    listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE    configLIST_VOLATILE TickType_t xItemValue<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span> <span class="token operator">*</span> configLIST_VOLATILE pxNext<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">xLIST_ITEM</span> <span class="token operator">*</span> configLIST_VOLATILE pxPrevious<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">xMINI_LIST_ITEM</span> MiniListItem_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体 xLIST</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">xLIST</span><span class="token punctuation">&#123;</span>    listFIRST_LIST_INTEGRITY_CHECK_VALUE    <span class="token comment">/* ListItem_t 结点计数 */</span>    <span class="token keyword">volatile</span> UBaseType_t uxNumberOfItems<span class="token punctuation">;</span>  <span class="token comment">/* 用于遍历列表，由 listGET_OWNER_OF_NEXT_ENTRY 访问 */</span>    ListItem_t <span class="token operator">*</span> configLIST_VOLATILE pxIndex<span class="token punctuation">;</span>  <span class="token comment">/* 链表尾结点，一般作为标志 */</span>    MiniListItem_t xListEnd<span class="token punctuation">;</span>    listSECOND_LIST_INTEGRITY_CHECK_VALUE<span class="token punctuation">&#125;</span> List_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>宏</h1><p>这些宏通过对结构体成员的操作实现各种实用功能。</p><ol><li><p><code>listSET_LIST_ITEM_OWNER</code></p><ul><li>设置 xLIST_ITEM 结点的所有者，即设置 pvOwner 成员。</li><li>所有者一般为任务的 TCB，TCB 中包含有指向该结点的指针。</li></ul></li><li><p><code>listGET_LIST_ITEM_OWNER</code></p><ul><li>获取 xLIST_ITEM 结点的所有者。</li></ul></li><li><p><code>listSET_LIST_ITEM_VALUE</code></p><ul><li>设置 xLIST_ITEM 结点的 xItemValue 值。</li><li>该值一般用于列表降序排序。</li></ul></li><li><p><code>listGET_LIST_ITEM_VALUE</code></p><ul><li>获取 xLIST_ITEM 结点的 xIemValue 值。</li></ul></li><li><p><code>listGET_ITEM_VALUE_OF_HEAD_ENTRY</code></p><ul><li>获取 xLIST 链表头结点 xLIST_ITEM 结点的 xItemValue 值。</li></ul></li><li><p><code>listGET_HEAD_ENTRY</code></p><ul><li>获取 xLIST 链表头结点。</li></ul></li><li><p><code>listGET_NEXT</code></p><ul><li>获取某个 xLIST_ITEM 结点的下个结点。</li></ul></li><li><p><code>listGET_END_MARKER</code></p><ul><li>获取 xLIST 链表的尾结点，即成员 xListEnd。</li></ul></li><li><p><code>listLIST_IS_EMPTY</code></p><ul><li>判断 xLIST 链表是否为空。</li><li>判断成员 uxNumberOfItems 是否为 0。</li></ul></li><li><p><code>listCURRENT_LIST_LENGTH</code></p><ul><li>获取 xLIST 链表长度。</li><li>获取成员 uxNumberOfItems 值。</li></ul></li><li><p><code>listGET_OWNER_OF_NEXT_ENTRY</code></p><ul><li>获取下一个 xLIST_ITEM 的所有者，即下一个结点属于哪个任务。</li><li>若下一个结点是尾结点 xListEnd ，那么跳过，由此可见链表是个循环链表。</li></ul></li><li><p><code>listGET_OWNER_OF_HEAD_ENTRY</code></p><ul><li>获取链表 xLIST 第一个结点的所有者，即第一个结点属于哪个任务。</li></ul></li><li><p><code>listIS_CONTAINED_WITHIN</code></p><ul><li>判断某个 xLIST_ITEM 结点是否属于某个 xLIST 链表。</li><li>判断结点的成员 pxContainer 是否指向了 xLIST 的地址。</li></ul></li><li><p><code>listLIST_ITEM_CONTAINER</code></p><ul><li>返回某个结点 xLIST_ITEM 所在的 xLIST 链表。</li></ul></li><li><p><code>listLIST_IS_INITIALISED</code></p><ul><li>判断某个 xLIST 链表是否初始化。</li><li>链表在函数 vListInitialise 中初始化。</li></ul></li></ol><h1>函数</h1><ol><li><p>链表初始化 <code>vListInitialise</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 初始化 pxIndex 指向了尾结点标志，此时整个链表只有一个尾结点 */</span>pxList<span class="token operator">-></span>pxIndex <span class="token operator">=</span> <span class="token punctuation">(</span> ListItem_t <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span> pxList<span class="token operator">-></span>xListEnd <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 初始化尾结点，所有指针都指向了尾结点自己，xitemValue 初始化为 portMAX_DELAY */</span>pxList<span class="token operator">-></span>xListEnd<span class="token punctuation">.</span>xItemValue <span class="token operator">=</span> portMAX_DELAY<span class="token punctuation">;</span>pxList<span class="token operator">-></span>xListEnd<span class="token punctuation">.</span>pxNext <span class="token operator">=</span> <span class="token punctuation">(</span> ListItem_t <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span> pxList<span class="token operator">-></span>xListEnd <span class="token punctuation">)</span><span class="token punctuation">;</span>pxList<span class="token operator">-></span>xListEnd<span class="token punctuation">.</span>pxPrevious <span class="token operator">=</span> <span class="token punctuation">(</span> ListItem_t <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span> pxList<span class="token operator">-></span>xListEnd <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 此时链表没有 xLIST_ITEM 成员，为空 */</span>pxList<span class="token operator">-></span>uxNumberOfItems <span class="token operator">=</span> <span class="token punctuation">(</span> UBaseType_t <span class="token punctuation">)</span> <span class="token number">0U</span><span class="token punctuation">;</span><span class="token comment">/* 不用理会，它是负责初始化结构体中的边界检测宏的，freeRTOS 默认没开启 */</span><span class="token function">listSET_LIST_INTEGRITY_CHECK_1_VALUE</span><span class="token punctuation">(</span> pxList <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listSET_LIST_INTEGRITY_CHECK_2_VALUE</span><span class="token punctuation">(</span> pxList <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>vListInitialiseItem</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 只把 xLIST_ITEM 和 xLIST 链表相关的成员初始化空，表示结点初始时不属于任何链表 */</span>pxItem<span class="token operator">-></span>pxContainer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/* 无需理会 */</span><span class="token function">listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE</span><span class="token punctuation">(</span> pxItem <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE</span><span class="token punctuation">(</span> pxItem <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>尾插入操作 <code>vListInsertEnd</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  尾操作指的是从新结点插入点开始，使用宏 listGET_OWNER_OF_NEXT_ENTRY 访问新结点时，  新结点必然是最后一个被访问的。换句话说，新结点被插到了插入点之前。  此插入操作不带排序。*/</span><span class="token keyword">void</span> <span class="token function">vListInsertEnd</span><span class="token punctuation">(</span> List_t <span class="token operator">*</span> <span class="token keyword">const</span> pxList<span class="token punctuation">,</span> ListItem_t <span class="token operator">*</span> <span class="token keyword">const</span> pxNewListItem <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ListItem_t <span class="token operator">*</span> <span class="token keyword">const</span> pxIndex <span class="token operator">=</span> pxList<span class="token operator">-></span>pxIndex<span class="token punctuation">;</span>    <span class="token comment">/* 检测 pxList 和 pxNewListItem 边界值是否完整，无需理会 */</span>    <span class="token function">listTEST_LIST_INTEGRITY</span><span class="token punctuation">(</span> pxList <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">listTEST_LIST_ITEM_INTEGRITY</span><span class="token punctuation">(</span> pxNewListItem <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 将新结点前后指针分别指向 pxIndex 结点的前一个结点以及 pxIndex 结点 */</span>    pxNewListItem<span class="token operator">-></span>pxNext <span class="token operator">=</span> pxIndex<span class="token punctuation">;</span>    pxNewListItem<span class="token operator">-></span>pxPrevious <span class="token operator">=</span> pxIndex<span class="token operator">-></span>pxPrevious<span class="token punctuation">;</span>    <span class="token comment">/* Only used during decision coverage testing. */</span>    <span class="token function">mtCOVERAGE_TEST_DELAY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* pxIndex 结点的前一个结点指向新结点 */</span>    pxIndex<span class="token operator">-></span>pxPrevious<span class="token operator">-></span>pxNext <span class="token operator">=</span> pxNewListItem<span class="token punctuation">;</span>    <span class="token comment">/* pxIndex 结点前一个结点指向新的结点 */</span>    pxIndex<span class="token operator">-></span>pxPrevious <span class="token operator">=</span> pxNewListItem<span class="token punctuation">;</span>    <span class="token comment">/* 新结点加入到 pxList 链表中 */</span>    pxNewListItem<span class="token operator">-></span>pxContainer <span class="token operator">=</span> pxList<span class="token punctuation">;</span>    <span class="token comment">/* 链表成员加 1 */</span>    <span class="token punctuation">(</span> pxList<span class="token operator">-></span>uxNumberOfItems <span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入操作 <code>vListInsert</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 显然带排序的插入操作 */</span><span class="token keyword">void</span> <span class="token function">vListInsert</span><span class="token punctuation">(</span> List_t <span class="token operator">*</span> <span class="token keyword">const</span> pxList<span class="token punctuation">,</span> ListItem_t <span class="token operator">*</span> <span class="token keyword">const</span> pxNewListItem <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ListItem_t <span class="token operator">*</span>pxIterator<span class="token punctuation">;</span>    <span class="token keyword">const</span> TickType_t xValueOfInsertion <span class="token operator">=</span> pxNewListItem<span class="token operator">-></span>xItemValue<span class="token punctuation">;</span>    <span class="token comment">/* 边界检测 */</span>    <span class="token function">listTEST_LIST_INTEGRITY</span><span class="token punctuation">(</span> pxList <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">listTEST_LIST_ITEM_INTEGRITY</span><span class="token punctuation">(</span> pxNewListItem <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*        若新结点的 xItemValue 和标志结点一样，那么会导致死循环，故需要稍稍处理一下，        把新结点插入到标志结点之前。同时也是为了链表中相同的 xItemValue 任务共享 CPU    ,*/</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> xValueOfInsertion <span class="token operator">==</span> portMAX_DELAY <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pxIterator <span class="token operator">=</span> pxList<span class="token operator">-></span>xListEnd<span class="token punctuation">.</span>pxPrevious<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">/*        1. 升序查找插入点。        2. 若链表中已经有结点的 xItemValue 值和 pxNewListItem 一样，则把 pxNewListItem 放           到后面。主要是为了链表中相同 xItemValue 的任务共享 CPU。      ,*/</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> pxIterator <span class="token operator">=</span> <span class="token punctuation">(</span> ListItem_t <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span> pxList<span class="token operator">-></span>xListEnd <span class="token punctuation">)</span><span class="token punctuation">;</span> pxIterator<span class="token operator">-></span>pxNext<span class="token operator">-></span>xItemValue <span class="token operator">&lt;=</span> xValueOfInsertion<span class="token punctuation">;</span> pxIterator <span class="token operator">=</span> pxIterator<span class="token operator">-></span>pxNext <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token comment">/* There is nothing to do here, just iterating to the wanted        insertion position. */</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将新结点插入到 pxIterator 后面 */</span>    pxNewListItem<span class="token operator">-></span>pxNext <span class="token operator">=</span> pxIterator<span class="token operator">-></span>pxNext<span class="token punctuation">;</span>    pxNewListItem<span class="token operator">-></span>pxNext<span class="token operator">-></span>pxPrevious <span class="token operator">=</span> pxNewListItem<span class="token punctuation">;</span>    pxNewListItem<span class="token operator">-></span>pxPrevious <span class="token operator">=</span> pxIterator<span class="token punctuation">;</span>    pxIterator<span class="token operator">-></span>pxNext <span class="token operator">=</span> pxNewListItem<span class="token punctuation">;</span>    pxNewListItem<span class="token operator">-></span>pxContainer <span class="token operator">=</span> pxList<span class="token punctuation">;</span>    <span class="token punctuation">(</span> pxList<span class="token operator">-></span>uxNumberOfItems <span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除操作 <code>uxListRemove</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">UBaseType_t <span class="token function">uxListRemove</span><span class="token punctuation">(</span> ListItem_t <span class="token operator">*</span> <span class="token keyword">const</span> pxItemToRemove <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    List_t <span class="token operator">*</span> <span class="token keyword">const</span> pxList <span class="token operator">=</span> pxItemToRemove<span class="token operator">-></span>pxContainer<span class="token punctuation">;</span>    <span class="token comment">/* pxItemToRemove 从链表摘除 */</span>    pxItemToRemove<span class="token operator">-></span>pxNext<span class="token operator">-></span>pxPrevious <span class="token operator">=</span> pxItemToRemove<span class="token operator">-></span>pxPrevious<span class="token punctuation">;</span>    pxItemToRemove<span class="token operator">-></span>pxPrevious<span class="token operator">-></span>pxNext <span class="token operator">=</span> pxItemToRemove<span class="token operator">-></span>pxNext<span class="token punctuation">;</span>    <span class="token comment">/* Only used during decision coverage testing. */</span>    <span class="token function">mtCOVERAGE_TEST_DELAY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 若链表的 pxIndex 正好指向了 pxItemToRemove，则将 pxIndex 回退一步 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> pxList<span class="token operator">-></span>pxIndex <span class="token operator">==</span> pxItemToRemove <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pxList<span class="token operator">-></span>pxIndex <span class="token operator">=</span> pxItemToRemove<span class="token operator">-></span>pxPrevious<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">mtCOVERAGE_TEST_MARKER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将结点所指向的链表置空 */</span>    pxItemToRemove<span class="token operator">-></span>pxContainer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">/* 链表结点数减一 */</span>    <span class="token punctuation">(</span> pxList<span class="token operator">-></span>uxNumberOfItems <span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">/* 返回链表结点个数 */</span>    <span class="token keyword">return</span> pxList<span class="token operator">-></span>uxNumberOfItems<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-20</p><p>从其他网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FreeRTOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freertos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyhton 安装配置</title>
      <link href="2021/python-an-zhuang-pei-zhi/"/>
      <url>2021/python-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>放弃 Python2.x，直接安装 3.x。</p><h1>Python3 安装</h1><p>从 <a href="https://www.python.org/">官网</a> 获取 windows Python3 安装包。</p><p>双击安装，选择自定义安装，修改安装路径，添加环境变量。</p><h1>pip</h1><p>从 Python 3.4 开始，pip 默认包含在 Python 二进制安装程序中，在 Scripts 目录中。</p><p>pip 安装的包在 Python 安装位置的 <code>Lib/site-packages</code> 目录中。</p><h2 id="升级">升级</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以管理员权限运行，升级 pip 到最新版本。</span>pip <span class="token function">install</span> pip -U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>若报错：ModuleNotFoundError: No module named ‘pip’</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m ensurepippython -m pip <span class="token function">install</span> --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="国内镜像源">国内镜像源</h2><ol><li>新版 ubuntu 要求使用 https 源。</li><li>清华： <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云： <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学： <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>华中理工大学： <a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></li><li>山东理工大学： <a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></li><li>豆瓣： <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li></ol><h2 id="基本操作">基本操作</h2><ol><li><p>pip 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token string">'包名'</span><span class="token comment"># 指定安装源</span>pip <span class="token function">install</span> <span class="token string">'包名'</span> -i <span class="token string">'镜像源'</span><span class="token comment"># 批量安装。libs_info.txt 获取参考 pip freeze</span>pip <span class="token function">install</span> -r libs_info.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置默认镜像源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置默认镜像源为清华镜像</span>pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取已安装库及对应版本信息。</span>pip list<span class="token comment"># 可以导出文件。建议在 Pycharm 的终端使用，因为涉及到文件的生成，可以直接在项</span><span class="token comment"># 目目录中找到文件。将库信息存储在 libs_info.txt 中。</span>pip freeze <span class="token operator">></span> libs_info.txt<span class="token comment"># 查看某个库的基本信息，加入参数 -f 可查看的更加详细</span>pip show <span class="token string">'库名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查询有哪些库需要更新，显示需要更新的库的目前版本、最新版本和库的类型。</span>pip list --outdatedpip list -o<span class="token comment"># 升级某个库</span>pip <span class="token function">install</span> -U <span class="token string">'库名'</span>pip <span class="token function">install</span> --upgrade <span class="token string">'库名'</span>pip <span class="token function">install</span> --upgrdae <span class="token string">'库名'</span><span class="token operator">==</span><span class="token string">'版本号'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>卸载</p><p>pip 中有些库是自带的，不支持卸载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载某个第三方库</span>pip uninstall <span class="token string">'库名'</span><span class="token comment"># 通过文件批量卸载库</span>pip uninstall -r libs_info.txt<span class="token comment"># 卸载 pip 本身</span>python -m pip uninstall pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-19</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 服务器搭建</title>
      <link href="2021/git-fu-wu-qi-da-jian/"/>
      <url>2021/git-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>在 FreeBSD 12.0 64 位操作系统上搭建 git 服务器。</p><h1>搭建 GIT 服务器</h1><ol><li><p>服务端安装 git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/ports/devel/git<span class="token function">make</span> <span class="token function">install</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建管理用户 git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser<span class="token comment"># Username: git</span><span class="token comment"># Full name: git</span><span class="token comment"># Uid (Leave empty for default):</span><span class="token comment"># Login group [git]:</span><span class="token comment"># Login group is git. Invite git into other groups? []:</span><span class="token comment"># Login class [default]:</span><span class="token comment"># Shell (sh csh tcsh git-shell nologin) [sh]:</span><span class="token comment"># Home directory [/home/git]:</span><span class="token comment"># Home directory permissions (Leave empty for default):</span><span class="token comment"># Use password-based authentication? [yes]:</span><span class="token comment"># Use an empty password? (yes/no) [no]:</span><span class="token comment"># Use a random password? (yes/no) [no]:</span><span class="token comment"># Enter password:</span><span class="token comment"># Enter password again:</span><span class="token comment"># Lock out the account after creation? [no]:</span><span class="token comment"># Username   : git</span><span class="token comment"># Password   : *****</span><span class="token comment"># Full Name  : git</span><span class="token comment"># Uid        : 1002</span><span class="token comment"># Class      :</span><span class="token comment"># Groups     : git</span><span class="token comment"># Home       : /home/git</span><span class="token comment"># Home Mode  :</span><span class="token comment"># Shell      : /bin/sh</span><span class="token comment"># Locked     : no</span><span class="token comment"># OK? (yes/no): yes</span><span class="token comment"># adduser: INFO: Successfully added (git) to the user database.</span><span class="token comment"># Add another user? (yes/no): no</span><span class="token comment"># Goodbye!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建证书登录</p><p>将登录 git 服务器用户的公钥，以追加写入 <code>~/.ssh/authorized_keys</code>。</p></li><li><p>初始化 Git 仓库</p><p>在 git 管理员 home 创建一个 backup.git 空目录，然后初始化为 git 裸仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> backup.git<span class="token function">git</span> init --bare backup.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>禁用 shell 登录</p><p>出于安全考虑，git 管理员不允许登录 shell。</p><p>编辑 <code>/etc/passwd</code>，使 git 管理员可以通过 ssh 使用 git，但不能登录 shell。</p><pre class="line-numbers language-none"><code class="language-none">git:*:1003:1003:git:&#x2F;home&#x2F;git:&#x2F;bin&#x2F;sh修改为：git:*:1003:1003:git:&#x2F;home&#x2F;git:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1>问题</h1><ol><li><p>pw: user ‘username’ disappeared during update</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解决方案</span>/usr/sbin/pwd_mkdb -p /etc/master.passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-19</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> server </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webdav 服务安装配置</title>
      <link href="2021/webdav-fu-wu-an-zhuang-pei-zhi/"/>
      <url>2021/webdav-fu-wu-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>在 FreeBSD 12.0 上搭建 webdav 服务，类似于 Dropbox，Gdriver 用于 orgzly 同步。</p><h1>nginx 添加 webdav 模块</h1><ol><li>下载 <a href="http://nginx.org/">nginx 源码</a>。</li><li>下载 <a href="https://github.com/arut/nginx-dav-ext-module">webdav 模块源码</a>。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx 添加 webdav 模块。</span>./configure --with-http_dav_module --add-dynamic-module<span class="token operator">=</span>/path/to/nginx-dav-ext-module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>nginx 配置 webdav</h1><pre class="line-numbers language-none"><code class="language-none">server &#123;server_name localhost;listen 8001;    #设置网页编码为 utf8 格式charset utf-8;#注意此 webdav 需要和 client_body_temp_path 的 owner,group 一样，否则报错 500root                  &#x2F;www&#x2F;webdav;autoindex on;client_body_temp_path &#x2F;www&#x2F;webdav_clinet_body_tmp;dav_methods PUT DELETE MKCOL COPY MOVE;dav_ext_methods PROPFIND OPTIONS;create_full_put_path  on;dav_access            user:rw group:r  all:r;auth_basic &quot;Authorized Users Only&quot;;auth_basic_user_file &#x2F;www&#x2F;webdav&#x2F;.htpasswd;location &#x2F; &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>.htpasswd</code> 文件内容格式为： <code>账号:密码</code>。</p></li><li><p><code>.htpasswd</code> 密码配置为： <code>openssl passwd -crypt 密码</code>。</p></li><li><p>重启 nginx</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1>修订记录</h1><ul><li><p>2021-01-19</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
            <tag> webdav </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题集锦</title>
      <link href="2021/cuo-wu-ji-jin/"/>
      <url>2021/cuo-wu-ji-jin/</url>
      
        <content type="html"><![CDATA[<p>搜集各种遇到的错误。</p><h1>git</h1><ol><li><code>error: src refspec matches more than one</code></li></ol><p>有一个与当前提交分支同名的标签。只需在 github 仓库中删除同名标签。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新本地仓库</span><span class="token function">git</span> pull<span class="token comment"># 查看标签</span><span class="token function">git</span> tag<span class="token comment"># 删除同名标签</span><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tag-name<span class="token operator">></span><span class="token comment"># 提交</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>refusing to update checked out branch: refs/heads/master</code></li></ol><p>修改 <code>.git/config</code> 文件，增加</p><pre class="line-numbers language-none"><code class="language-none">[receive]  denyCurrentBranch &#x3D; ignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>texlive</h1><ol><li><code>Cannot determine type of tlpdb from /home/naruto/texmf!</code></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo tlmgr init-usertree# 如果报错 &#x2F;usr&#x2F;bin&#x2F;tlmgr: could not find a usable xzdec.sudo apt-get install xzdec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>vim</h1><ol><li><code>终端输入中文总是出现 &gt;4;2m</code></li></ol><p>是 modifyOtherKeys 问题。在vimrc文件中添加：</p><pre class="line-numbers language-none"><code class="language-none">let &amp;t_TI &#x3D; &quot;&quot;let &amp;t_TE &#x3D; &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>python</h1><ol><li><code>ModuleNotFoundError: No module named ‘pip’</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m ensurepippython -m pip <span class="token function">install</span> --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 遇到的问题（旧笔记）</title>
      <link href="2021/jiu-wen-ti-bi-ji/"/>
      <url>2021/jiu-wen-ti-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>主要是 2015 年之前遇到的一些问题解决办法的笔记。</p><h1>SD 卡容量缩水</h1><p>本来是 8G 的 sd 卡，因为装 Linux 系统导致 sd 卡变为 90M。</p><p>打开 windows 磁盘管理工具，查看 sd 卡情况。如果发现很多空间都是闲置的，说明卡本身没有问题，否则说明该卡为扩容卡。</p><p>若没有问题，则使用分区工具将该卡重新格式化就行。</p><p>—— 2014.9.6</p><h1>笔记本睡眠后关机</h1><p>电源设置问题。</p><p><code>更改计算机睡眠时间 -&gt;更改高级电源设置 -&gt;睡眠 -&gt;在此时间后休眠</code>中修改合适的参数。</p><p>—— 2014.9.2</p><h1>WIN8.1 CPU 使用率高</h1><ul><li>关闭应用程序，使 cpu 在 0% 左右。在桌面上随意快速晃动鼠标，cpu 很快就达到了 100%。</li><li>除新毒霸外，系统中不运行其它安装的软件，任务管理器中 CPU 的占有率特别高。有时候高达 100%，一般情况就是 50% 左右。</li></ul><ol><li>退出家庭组（没试过）。</li><li>资源管理器中，随意选一个盘，如 C 盘，<code>属性 -&gt;工具 -&gt;优化</code> 关闭自动优化功能。（已关，但是问题未解决）。</li><li>利用 cpuz 可以观察到此时 cpu 的利用情况是一核双线程，而我的电脑是双核四线程的。因此电脑很卡。打开 windows 系统配置（MSConfig），<code>引导 - 高级选项 - 处理器</code>更改处理器的配置。</li></ol><p>—— 2014.8.7</p><h1>WIN8.1 磁盘占有率高</h1><ol><li><p>服务主机</p><p>本地系统（网络受限）硬盘占用高是因为 superfetch 服务造成的，win8 对这个超级预缓存（原理是让一部分内存作为硬盘常驻用户的常用数据）服务做了进一步优化，关闭影响电脑速度。</p></li><li><p>system 服务</p><p>硬盘占用高是因为虚拟内存，家庭组和 win8 快速开机功能三项造成，关闭即可。</p></li></ol><h1>WIN8.1 分辨率</h1><p>屏幕分辨率不够高也不能调节，而且桌面亮度不能够调节。</p><p>是显卡驱动问题。</p><ol><li>利用驱动精灵一键解决。但在安装 intel 集显驱动时，电脑不断自动重启，导致无法进入桌面或进入桌面后黑屏。</li><li>在安全模式中完全卸载掉 win8.1 自带的显卡驱动，安装从官网下载的驱动。</li><li>电脑不断自动重启是因为集成显卡和独立显卡不兼容导致。在安全模式下安装好显卡驱动，禁掉独立显卡驱动。</li></ol><p>—— 2014.08.04</p><h1>集显与独显驱动冲突</h1><p>当独立安装集显驱动或独显驱动时，屏幕可以正常显示。但将两个显卡驱动一起安装，立刻或偶尔会正常一会儿，然后黑屏。</p><p>禁掉一个显卡驱动，如独显驱动。</p><h1>Windows 安装破解</h1><p>正版 Windows 系统可以从 <a href="https://msdn.itellyou.cn/">MSDN</a> 下载。</p><ol><li>推荐使用 USB 方式烧录 OS 镜像安装。</li><li>系统安装后，第一件事情是安装网卡驱动（若不能联网）。</li><li>联网后可以通过激活工具或淘宝购买激活码，若先安装好软件发现不能正常激活就白忙了。</li><li>通过官网或驱动软件安装其它驱动。</li></ol><h1>双系统手动删除 XP 系统</h1><p>win8.1 和 XP 双系统共存，win8.1 在 C 盘，XP 在 D 盘。手工删除 XP 系统文件后（同时，利用工具把一些隐藏文件删除了），win8.1 无法进入 D 盘。点击 D 盘，提示 D 盘未格式化，此时 D 盘格式为 RAW 格式。</p><p>估计是在利用工具删除隐藏文件时引入的。该分区的引导文件被删除，系统不能识别该分区。RAW 指未格式化的磁盘，磁盘和一些 U 盘中毒之后或者一些误操作，也可能是系统出了故障，都会使其文件系统变为 RAW。</p><p>运行 cmd ，输入命令 <code>chkdsk D: /f</code>。CHKDSK 可以扫描扇区，检查并修复受损扇区。</p><p>—— 2014.08.16</p><h1>WIN7 影响 Ubuntu 启动</h1><p>在有 Ubuntu 系统的前提下，安装 win7 双系统。启动后直接进入 win7 系统，没有Ubuntu 系统的启动项。</p><p>如果 Ubuntu 系统的 grub2 安装到了 MBR，那么安装 win7 时会重写 MBR，不会提供启动项选择界面。</p><p>装双系统时，一定要先安装 windows 然后是 Linux 系统。</p><h1>Ubuntu 影响 WIN7 启动</h1><p>安装双系统时，先 win7，后 Ubuntu。win7 系统不能加载，一直黑屏。</p><p>在装 Ubuntu 系统时，NTFS 分区的引导扇区被 grub 写坏，需要重新恢复扇区引导。</p><pre class="line-numbers language-none"><code class="language-none">前提：grub 覆盖 NTFS 分区引导扇区后，没更改它的数据，否则恢复可能失败。在 Ubuntu 终端，输入命令：sudo fdisk -lusudo grub-install &#x2F;dev&#x2F;sdasudo update-grubsudo dd if&#x3D;&#x2F;dev&#x2F;sda of&#x3D;&#x2F;dev&#x2F;sda bs&#x3D;512 count&#x3D;1 seek&#x3D;2048 skip&#x3D;206847seek 表示 win7 系统的系统盘的起始地址，skip 表示结束地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>NTFS 分区引导到扇区恢复原理</p><p>NTFS 分区的引导扇区是有备份的，按照微软的说明，NTFS 3.5x 在分区中间存有备份，而 NTFS 4.0 则把备份数据存在分区的末尾。</p><p>grub 安装时只覆盖了引导扇区的内容，故只要用 NTFS 分区引导扇区的备份恢复当前分区即可。</p></li></ul><h1>Ubuntu 无法进入桌面</h1><p>在登录界面输入账号密码，屏幕变黑，然后又回到登录界面。无法进入桌面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到终端</span><span class="token builtin class-name">cd</span> ~<span class="token function">sudo</span> <span class="token function">chown</span> 用户名：用户名 .Xauthority<span class="token function">ls</span> .Xauthority -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>—— 2014.08.05</p><h1>grub rescue</h1><p>开机显示：</p><pre class="line-numbers language-none"><code class="language-none">GRUB loadingerror:unknow filesystemgrub rescue&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>造成这个问题的原因</strong></p><p>在 windows 下直接彻底删除并格式化 Ubuntu 所在分区。并用磁盘工具将这块分区分成几块新分区，然后把 Linux 安装到了新分区。之前 Ubuntu 所在分区已经格式化，没有安装grub2。用 Ubuntu 备份工具 / 衍生版制造工具，把分区恢复成 8.x 的老版本，结果老版本的 grub 是 grub1，于是把 grub2 破坏掉了。</p><p>grub2 分为两部分，一部分（一般情况下）写在了 MBR 上，另一部分写在了某个分区的/boot/grub 目录（如果 /boot 单独分区，则直接写在对应分区的 /grub 目录）里面。</p><p>总之，之前的操作，破坏了 /boot/grub 的内容。</p><p><strong>通过重新安装、修复 grub2</strong></p><ol><li>找到 Ubuntu 在哪个分区。</li></ol><p>在 grub rescue&gt; 下输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 会罗列所有的磁盘分区信息，如：(hd0,1),(hd0,2),(hd0,3),(hd0,4)</span><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>依次调用如下命令，X 表示各个分区号码。</li></ol><pre class="line-numbers language-grub" data-language="grub"><code class="language-grub"># &#x2F;boot 没有单独分区，则ls (hd0,X)&#x2F;boot&#x2F;grub# &#x2F;boot 单独分区，则ls (hd0,X)&#x2F;grub# 假设找到（hd0,5）时，显示了文件夹中的文件，则表示 Linux 安装在这个分区。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>若找到了 grub 目录，则临时性将 grub 的两部分关联起来。</li></ol><pre class="line-numbers language-grub" data-language="grub"><code class="language-grub"># &#x2F;boot 没有单独分区的命令grub rescue &gt; set root&#x3D;(hd0,5)grub rescue &gt; set prefix&#x3D;(hd0,5)&#x2F;boot&#x2F;grubgrub rescue &gt; insmod &#x2F;boot&#x2F;grub&#x2F;normal.mod# &#x2F;boot 单独分区的命令grub rescue&gt;set root&#x3D;(hd0,5)grub rescue &gt; set prefix&#x3D;(hd0,5)&#x2F;grubgrub rescue &gt; insmod# 然后调用如下命令，可显示出丢失的 grub 菜单。grub rescue &gt;normal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入 Ubuntu 系统后，对 grub 进行修复。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">update-grub</span><span class="token function">sudo</span> grub-install /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>如果找不到正确的 /grub 目录，则尝试寻找是否有 linux 核心文件。X 表示各个分区号码，在 grub rescue&gt; 下输入：</li></ol><pre class="line-numbers language-grub" data-language="grub"><code class="language-grub"># &#x2F;boot 没有单独分区ls (hd0,X)&#x2F;boot# &#x2F;boot 单独分区ls （hd0,X)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找类似 <code>vmlinuz-3.0.0-12-generic</code> 的 Linux 核心文件，找到后记下 (hd0,X) 中的 X值。</p><p>以 live cd 或者 live usb 启动，在终端中输入以下指令，假设找到 (hd0,5)。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /boot 没有单独分区</span><span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda5 /mnt<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>/mnt/boot /dev/sda<span class="token comment"># /boot 单独分区</span><span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda5 /mnt<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>/mnt /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启即可。</p><p>以上两句命令也可以解决 grub 安装位置不对，没有将 grub 安装到 /dev/sda，造成启动时不出现 ubuntu 启动项直接进入 windows 的问题。</p><ol start="6"><li>如果没有 Linux 核心文件，只能彻底重新安装。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpaceVim 安装配置</title>
      <link href="2021/spacevim-an-zhuang-pei-zhi/"/>
      <url>2021/spacevim-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>SpaceVim 是 vim/neovim 的配置和插件超集，以模块的方式组织管理插件和相关配置，模块由社区维护。SpaceVim 相当于在 vim/neovim 基础上提供了一层封装，为用户提供了全新的配置文件和语法，用户无法像 vimrc 那样配置。若想以 vimrc 方式配置，必须通过SpaceVim 提供的接口实现。</p><p>官方推荐 SpaceVim 和 neovim 组合，但在 windows 下推荐 Vim 8.0 以上。</p><p>参考 <a href="https://spacevim.org/cn/">中文官方网站</a>。</p><p><strong>快捷键</strong> 参考 <a href="https://spacevim.org/cn/documentation/">这里</a>。</p><p><strong>模块</strong> 参考 <a href="https://spacevim.org/cn/layers/">这里</a>。</p><h1>SapceVim neovim 安装</h1><h2 id="win10-安装">win10 安装</h2><p>在 win10 安装 SpaceVim 有两种方式。</p><ol><li><p>下载并运行官方 windows 安装脚本 <a href="https://spacevim.org/cn/install.cmd">install.cmd</a>。</p></li><li><p>下载 Spacevim 到 neovim 配置文件目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/SpaceVim/SpaceVim.git ~/AppData/Local/nvim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>注：</strong> 不管是哪种方法，必须确保目录 <code>~/AppData/Local/nvim</code> 存在。</p><p>安装结束后，初次打开 neovim，选择配色方案。必须重启才会安装插件。</p><h2 id="FreeBSD-安装">FreeBSD 安装</h2><p>和 Linux 安装一样，可能需要 VPN。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sLf https://spacevim.org/cn/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>配置文件</h1><h2 id="win10-配置文件">win10 配置文件</h2><p>win10 SpaceVim 各种文件位置。</p><ul><li>SpaceVim 的默认配置文件为 <code>~/.SpaceVim.d/init.toml</code>。</li><li>SpaceVim 安装位置为 <code>~/AppData/Local/nvim/</code>。</li><li>SpaceVim 自定义插件 <code>custom_plugins</code> 安装位置 <code>~/.cache/vimfiles/repos/github.com/</code>。</li><li>SpaceVim 产生的临时文件位置 <code>~/.cache/SpaceVim/</code>。如：swap 文件、undo 文件、备份文件、init.toml 中间文件 init.json  等。</li></ul><h2 id="FreeBSD-配置文件">FreeBSD 配置文件</h2><p>FreeBSD 各种文件位置。</p><ul><li>SpaceVim 的默认配置文件为 <code>~/.SpaceVim.d/init.toml</code>。</li><li>SpaceVim 安装位置为 <code>~/.SpaceVim</code>。</li><li>SpaceVim 自定义插件 <code>custom_plugins</code> 安装位置 <code>~/.cache/vimfiles/repos/github.com/</code>。</li><li>SpaceVim 产生的临时文件位置 <code>~/.cache/SpaceVim/</code>。如：swap 文件、undo 文件、备份文件、init.toml 中间文件 init.json  等。</li></ul><h2 id="配置">配置</h2><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># ~/.SpaceVim.d/init.toml</span><span class="token comment"># 所有的 SpaceVim 选项都列在 [options] 之下</span><span class="token punctuation">[</span><span class="token table class-name">options</span><span class="token punctuation">]</span>    <span class="token key property">colorscheme</span> <span class="token punctuation">=</span> <span class="token string">"gruvbox"</span>    <span class="token key property">colorscheme_bg</span> <span class="token punctuation">=</span> <span class="token string">"light"</span>    <span class="token key property">enable_guicolors</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>    <span class="token key property">statusline_separator</span> <span class="token punctuation">=</span> <span class="token string">"curve"</span>    <span class="token key property">statusline_iseparator</span> <span class="token punctuation">=</span> <span class="token string">"curve"</span>    <span class="token key property">buffer_index_type</span> <span class="token punctuation">=</span> <span class="token number">0</span>    <span class="token key property">enable_tabline_filetype_icon</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>    <span class="token key property">enable_statusline_mode</span> <span class="token punctuation">=</span> <span class="token boolean">false</span>    <span class="token key property">guifont</span> <span class="token punctuation">=</span> <span class="token string">"DaddyTimeMono Nerd Font Mono:h11"</span>    <span class="token key property">vimcompatible</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>    <span class="token key property">snippet_engine</span> <span class="token punctuation">=</span> <span class="token string">'ultisnips'</span><span class="token comment"># SpaceVim 模块设置，主要包括启用 / 禁用模块。各个模块的选项，参考各个模块的文档。</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">layers</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">'autocomplete'</span>    <span class="token key property">auto_completion_return_key_behavior</span> <span class="token punctuation">=</span> <span class="token string">"complete"</span>    <span class="token key property">auto_completion_tab_key_behavior</span> <span class="token punctuation">=</span> <span class="token string">"smart"</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">layers</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">'shell'</span>    <span class="token key property">default_position</span> <span class="token punctuation">=</span> <span class="token string">'top'</span>    <span class="token key property">default_height</span> <span class="token punctuation">=</span> <span class="token number">30</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">layers</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"lang#python"</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">layers</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"incsearch"</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">layers</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"lang#markdown"</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">custom_plugins</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">repo</span> <span class="token punctuation">=</span> <span class="token string">"hotoo/pangu.vim"</span>    <span class="token key property">on_cmd</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"Pangu"</span><span class="token punctuation">]</span>    <span class="token key property">merged</span> <span class="token punctuation">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">custom_plugins</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token key property">repo</span> <span class="token punctuation">=</span> <span class="token string">"jiangmiao/auto-pairs"</span>    <span class="token key property">merged</span> <span class="token punctuation">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上配置参考 <a href="https://spacevim.org/cn/quick-start-guide/">基本配置</a>。</p><h1>vim 方式配置</h1><p>使用 toml 作为默认配置文件，无法直接在配置文件中添加 vim 设置。SpaceVim 支持指定载入配置时需要调用的函数，可以在函数中实现需要的配置。</p><p>修改 <code>~/.SpaceVim.d/init.toml</code>，加入 <code>bootstrap_before</code> 选项。</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">options</span><span class="token punctuation">]</span>  <span class="token key property">bootstrap_before</span> <span class="token punctuation">=</span> <span class="token string">"myspacevim#init"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加文件 <code>~/.SpaceVim.d/autoload/myspacevim.vim</code>, 并加入如下内容：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml">function! myspacevim<span class="token comment">#init() abort</span>  set nobackup  set colorcolumn<span class="token punctuation">=</span><span class="token number">80</span>  set textwidth<span class="token punctuation">=</span><span class="token number">80</span>  set fo+<span class="token punctuation">=</span>Mm  set wrap  set noimdisable  set autochdir set noimdisableendfunction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-18</p><p>创建。</p></li><li><p>2021-02-02</p><p>新增 FreeBSD 安装配置。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpaceVim </tag>
            
            <tag> neovim </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 实用操作</title>
      <link href="2021/git-shi-yong-cao-zuo/"/>
      <url>2021/git-shi-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>Git 仓库分为工作区、暂存区 / 缓存区、本地仓库和远程仓库组成。</p><p><img src="/2021/git-shi-yong-cao-zuo/git-cmd.png" alt="git 操作图"></p><h1>基础操作</h1><ol><li>创建仓库</li></ol><ul><li><p>克隆仓库</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从远程仓库拷贝一份到本地，使用 URL</span><span class="token function">git</span> clone https://remote.server.repo.git<span class="token comment"># 使用 ssh</span><span class="token function">git</span> clone ssh://remoteUserName@remoteIp:portNum/repoPath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化仓库</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若在 GitHub 项目初始化之前，数据已经存在于本地版本库中。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设本地仓库为 test</span><span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">"# test"</span> <span class="token operator">>></span> README.md<span class="token function">git</span> init<span class="token function">git</span> <span class="token function">add</span> README.md<span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token function">git</span> branch -M main<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/coco-hkk/test.git<span class="token function">git</span> push -u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li><p>查看本地仓库当前状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看工作区、缓存区的文件变更情况</span><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提交文件到本地仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加文件到缓存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token string">"变更文件"</span><span class="token comment"># 添加所有变更文件到缓存区</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token comment"># 提交缓存区到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"提交日志"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>远程下载和上传</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从远程仓库获取更新的数据</span><span class="token function">git</span> fetch<span class="token comment"># 获取远程更新并和本地合并，相当于 git fetch 和 git merge FETCH_HEAD 的简写。</span><span class="token function">git</span> pull <span class="token string">'远程主机名'</span> <span class="token string">'远程分支名'</span><span class="token builtin class-name">:</span><span class="token string">'本地分支名'</span><span class="token comment"># 若本地分支名和远程分支名相同，则省略冒号及后面内容</span><span class="token function">git</span> pull origin master<span class="token comment"># 上传本地仓库的分支并与远程仓库合并</span><span class="token function">git</span> push <span class="token string">'远程主机名'</span> <span class="token string">'本地分支名'</span><span class="token builtin class-name">:</span><span class="token string">'远程分支名'</span><span class="token comment"># 若本地分支名和远程分支名相同，则省略冒号及后面内容</span><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清空工作区和缓存区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对已跟踪（被 add 操作过）文件，修改后没有被 add 到缓存区 index有作用。对未</span><span class="token comment"># 跟踪文件无效。</span><span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span class="token comment"># 清空指定被修改的已跟踪文件，但修改未被 add 操作的文件。</span><span class="token function">git</span> checkout -- <span class="token string">'指定文件'</span><span class="token comment"># 只清空未跟踪的新建文件或目录。</span><span class="token function">git</span> clean -id<span class="token comment"># 清空已经被 add 到缓存区文件或目录。</span><span class="token function">git</span> reset <span class="token builtin class-name">.</span><span class="token comment"># 清空已被 add 的文件。</span><span class="token function">git</span> reset <span class="token string">'指定文件'</span><span class="token comment"># 粗暴做法，直接删除 index</span><span class="token function">rm</span> .git/index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除工作区的文件</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token string">'指定文件'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>取消跟踪文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定文件回到未跟踪状态，虽然不存在与暂存区，但历史提交记录中的记录依然存在。</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token string">'指定文件'</span> --cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>回退版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 暴力回退，丢失回退版本结点之后的版本。</span><span class="token comment"># 虽然服务器回退版本了，但其他人本地的版本号依然比服务器高，所以得要求其他人</span><span class="token comment"># 删除本地分支，重新从服务器上拉取分支。</span><span class="token function">git</span> reset --hard <span class="token string">'版本结点哈希值'</span><span class="token comment"># 强制 push 到对应的远程分支，如 develop。</span><span class="token function">git</span> push -f u origin develop<span class="token comment"># 不回退版本，而是生成一个新版本。</span><span class="token function">git</span> revert -n <span class="token string">'版本号'</span><span class="token function">git</span> commit -m <span class="token string">'提交日志'</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>子项目操作</h1><ol><li><p>添加子项目</p><p>添加子项目后会在父项目根目录下生成配置文件 <code>.gitmodules</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># url 为子项目地址，path 是该子项目在父项目中存储的路径。</span><span class="token function">git</span> submodule <span class="token function">add</span> <span class="token string">'url'</span> <span class="token string">'path'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>子项目下载</p><p>默认子项目目录为空。在父项目中下载子项目。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，在克隆父项目的同时下载子项目。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --recursive <span class="token string">'url'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>子项目更新</p><p>子项目仓库和父项目仓库没区别，子项目的所有操作必须在子项目中。进入子项目目录，执行 <code>git pull</code> 更新子项目。</p><p>还可以在父项目中更新子项目 <code>git submodule update --remote</code>。</p><p>子项目更新后，需要在父项目中提交子项目的更新到远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 父项目中子项目初始化版本</span><span class="token function">git</span> submodule update --init<span class="token comment"># 更新子项目到最新版本</span><span class="token function">git</span> submodule update --remote<span class="token comment"># 提交子项目最新信息到远程仓库。这一步和普通提交内容没区别。</span><span class="token function">git</span> <span class="token function">add</span> <span class="token string">"子项目所在文件夹"</span><span class="token function">git</span> commit -m <span class="token string">"提交日志"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除子项目</p></li></ol><ul><li>删除子项目目录及源码。</li><li>删除项目目录下 <code>.gitmodules</code> 中子项目相关条目。</li><li>删除配置项 <code>.git/config</code> 中子项目相关条目。</li><li>删除目录 <code>.git/module/</code> 下的相应的子项目目录，每个子项目对应一个目录。</li><li>最后执行 <code>git rm --cached '子项目名称'</code>，完成后提交到仓库。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 安装配置</title>
      <link href="2021/nodejs-an-zhuang-pei-zhi/"/>
      <url>2021/nodejs-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，是一个让 JavaScript 运行在服务端的开发平台。</p><h1>Nodejs 安装</h1><p>在 <a href="https://nodejs.org/zh-cn/download/">这里</a> 选择目标平台下载安装。</p><p>选择 <code>.msi</code> 安装包，会遇到以下选项，默认即可。</p><ol><li><code>npm package manager</code> 表示 npm 包管理器。</li><li><code>online documentation shortcuts</code> 在线文档快捷方式。</li><li><code>Add to PATH</code> 添加 node 安装路径到环境变量。</li></ol><p>选择 <code>zip</code> 包，由于解压即可使用，没有安装过程，所以需要手动将 node.exe 所在目录添加到环境变量中。</p><ul><li>执行命令 <code>node -v</code> 查看 node 版本。</li><li>安装 Nodejs 的同时也安装了 npm，执行命令 <code>npm -v</code> 查看 npm 版本。</li></ul><h1>Nodejs 配置</h1><ol><li>修改全局依赖包下载路径</li></ol><p>npm 下载全局包时，这个包的默认存放路径为<code>C:\Users\naruto\AppData\Roaming\npm\node_modules</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 下载安装全局包</span><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token string">"package-name"</span><span class="token comment"># 查看全局包默认存放路径</span><span class="token function">npm</span> root -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想自定义全局包存放目录，则可以执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改全局包下载目录</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"E:\Nodejs<span class="token entity" title="\n">\n</span>ode_global"</span><span class="token comment"># 修改全局包缓存目录</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"E:\Nodejs<span class="token entity" title="\n">\n</span>ode_cache"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者打开 <code>~/.npmrc</code> 文件，修改如下：</p><pre class="line-numbers language-npmrc" data-language="npmrc"><code class="language-npmrc">prefix &#x3D;E:\Nodejs\node_globalcache &#x3D; E:\Nodejs\node_cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>配置环境变量</li></ol><p>假设此时我们安装一个新全局包并运行该命令，结果发现找不到命令。</p><p>因为执行指令时，先到 <code>E:\Nodejs\node_global</code> 查找命令，然后到其子目录<code>node_modules</code> 中查找依赖包。故只需将全局包存放目录 <code>E:\Nodejs\node_global</code> 添加到环境变量中即可。</p><h1>node</h1><ol><li>查看版本号</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>npm</h1><ol><li>npm 版本查看</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>更新 npm</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">npm</span><span class="token comment"># 更新 npm 到指定版本</span><span class="token function">npm</span> -g <span class="token function">install</span> npm@6.14.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>清理 npm 的 cache</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>安装版本管理工具 n</li></ol><p>不支持 Windows，从官网上下载安装包升级。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token comment"># 将 nodejs 更新到最稳定版本</span>n stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>镜像管理</li></ol><p>nrm 是 npm 的镜像源管理工具，如国外资源太慢，nrm 就可以快速地在 npm 源间切换。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装 nrm</span><span class="token function">npm</span> <span class="token function">install</span> -g nrm<span class="token comment"># 查看可选镜像源</span>nrm <span class="token function">ls</span><span class="token comment"># 切换淘宝源</span>nrm use taobao<span class="token comment"># 增加源，&lt;registry> 是源名，&lt;url> 是地址</span>nrm <span class="token function">add</span> <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span class="token comment"># 删除</span>nrm del <span class="token operator">&lt;</span>registry<span class="token operator">></span><span class="token comment"># 测试速度</span>nrm <span class="token builtin class-name">test</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Yarn</h1><p><a href="https://github.com/yarnpkg/yarn">Yarn</a> 是一个包管理器，和 npm 一样。</p><p>配置文件 <code>~/.yarnrc</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装 yarn</span><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span><span class="token comment"># 初始化一个新项目</span><span class="token function">yarn</span> init<span class="token comment"># 添加依赖包</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 升级依赖包</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 移除依赖包</span><span class="token function">yarn</span> remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token comment"># 安装项目的全部依赖</span><span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置">配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看版本</span><span class="token function">yarn</span> -v<span class="token comment"># 查看 yarn 配置</span><span class="token function">yarn</span> config list<span class="token comment"># 修改 yarn 的源为淘宝源</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org/<span class="token comment"># 修改全局安装目录</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> global-folder <span class="token string">"E:\Yarn\global"</span><span class="token comment"># 修改全局安装目录 bin 的位置，并把 bin 加到系统环境变量中。</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"E:\Yarn\global<span class="token entity" title="\&quot;">\"</span># 修改全局缓存目录yarn config set cache-folder "</span>E:<span class="token punctuation">\</span>Yarn<span class="token punctuation">\</span>cache"<span class="token comment"># 查看当前 yarn 的 bin 位置</span><span class="token function">yarn</span> global bin<span class="token comment"># 查看当前 yarn 全局安装位置</span><span class="token function">yarn</span> global <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>修订记录</h1><ul><li><p>2021-01-15</p><p>从其它网站迁移。</p></li><li><p>2021-01-18</p><p>更新 yarn。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
            <tag> nrm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 安装配置</title>
      <link href="2021/git-an-zhuang-pei-zhi/"/>
      <url>2021/git-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Git 是一个开源的分布式版本控制系统、内容管理系统（CMS）和工作管理系统。Git 可以在不同的平台安装，有命令行 CLI 和 图形界面 GUI 两种。</p><p>Git 官网请参考 <a href="https://git-scm.com/">这里</a>。</p><h1>Git 安装</h1><p>日常使用 Windows，推荐安装 <a href="https://gitforwindows.org/"><strong>Git for Windows</strong></a>。</p><p>安装完成后右键菜单中会出现 <code>Git Gui Here</code> 和 <code>Git Bash Here</code> 两个选项。</p><h1>Git 配置</h1><p>第一次打开 <code>Git Bash Here</code>，首先要做的就是设置用户名字和邮件地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"coco-hkk"</span><span class="token function">git</span> config --global user.email hkkdlut@sina.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git config --global</code> 命令实际上是对 Git 配置文件 <code>~/.gitconfig</code> 的操作。上述指令效果，和下面配置相同。</p><pre class="line-numbers language-gitconfig" data-language="gitconfig"><code class="language-gitconfig">[user]      email &#x3D; coco_haokuankuan@163.com      name &#x3D; coco-hkk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Windows 下我常用的 .gitconfig 配置：</p><pre class="line-numbers language-gitconfig" data-language="gitconfig"><code class="language-gitconfig">[user]# 用户的邮件地址和名字   email &#x3D; coco_haokuankuan@163.com   name &#x3D; coco-hkk[credential]# 用于存储本地凭证，有三种方式 mananger、wincred 和 store## mananger 用于 GUI，自动将 helper 设置为 mananger## store 如果本地没有存储账号信息，当 push 时输入正确信息，将此保存至 home 目录下# 的 .git-credentials 文件，并且以明文存储，内容如下：# https:&#x2F;&#x2F;username:pwd@github.com   helper &#x3D; store[core]# 支持 utf-8 编码。中文文件名或者路径被转义成 \xx\xx\xx，设置   quotepath &#x3D; false[receive]# git 默认拒绝了 push 操作，设置    denyCurrentBranch &#x3D; ignore[color]    ui &#x3D; true[http]# 设置 git 全局代理proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:10808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD 基本操作</title>
      <link href="2021/freebsd-ji-ben-cao-zuo/"/>
      <url>2021/freebsd-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1>挂载</h1><ol><li>挂载</li></ol><h1>文件操作</h1><ol><li>文件属性修改</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 修改文件所有者chown owner file# 修改文件所有者组chgrp group file# 同时修改所有者和所有者组chown owner:group file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>本地化设置</h1><ol><li><p>在用户的 <code>~/.login_conf</code> 或用户 shell 的启动文件 <code>~/.profile</code>，<code>~/.bashrc</code>，<code>~/.cshrc</code> 中，设置如下两个变量：</p><ul><li><code>LANG</code> 为 POSIX 设置本地化语言功能。格式： <code>语言代码_国家代码.编码</code>。</li><li><code>MM_CHARSET</code> 应用程序的 MIME 字符集。</li></ul><p>这包括用户的 shell 配置，特定的应用配置和 X11 配置。</p></li><li><p>locale 查看当前本地化设置。</p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看支持本地化的类型locale -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置中文</p> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">localeLANG&#x3D;zh_CN.UTF-8LC_CTYPE&#x3D;&quot;zh_CN.UTF-8&quot;LC_COLLATE&#x3D;&quot;zh_CN.UTF-8&quot;LC_TIME&#x3D;&quot;zh_CN.UTF-8&quot;LC_NUMERIC&#x3D;&quot;zh_CN.UTF-8&quot;LC_MONETARY&#x3D;&quot;zh_CN.UTF-8&quot;LC_MESSAGES&#x3D;&quot;zh_CN.UTF-8&quot;LC_ALL&#x3D;zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>系统升级</h1><pre class="line-numbers language-csh" data-language="csh"><code class="language-csh">freebsd-update -r 12.0-RELEASE upgradefreebsd-update installfreebsd-version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>安装软件</h1><p>两种安装方式分别为 FreeBSD Ports 套件（源码安装）和 packages（二进制安装）。</p><h2 id="ports-安装">ports 安装</h2><ol><li><p>更新 ports</p> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh"># 自动查找 mirrors，下载并解压 ports 包到 &#x2F;usr&#x2F;portsportsnap fetch extract# 后续更新 ports tree，无需 extractportsnap fetch update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>寻找程序包</p><ul><li><p>若知道 port 的准确名字，但需要知道在哪个类别找到，使用指令 <code>whereis</code>。</p><pre class="line-numbers language-csh" data-language="csh"><code class="language-csh">whereis git   # &#x2F;usr&#x2F;ports&#x2F;devel&#x2F;git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 <code>ports collection</code> 内嵌搜索机制。首先到 <code>/usr/ports</code>，运行<code>make search name=program-name</code>。</p><pre class="line-numbers language-csh" data-language="csh"><code class="language-csh"># 寻找 lsof 程序cd &#x2F;usr&#x2F;portsmake search name&#x3D;lsof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>安装</p> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh"># 假设安装 vimcd &#x2F;usr&#x2F;ports&#x2F;editors&#x2F;vimmake install clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="packages-安装">packages 安装</h2><ol><li><p>安装 pkg</p><p>在 shell 中执行 <code>pkg</code>，然后选择 <code>y</code> 即可。</p></li><li><p>软件安装</p> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh"># 假设安装 vimpkg install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>软件卸载</p> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh">pkg delete vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>软件更新</p> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh">pkg updatepkg upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1>问题解决</h1><ol><li><p>系统升级后 sshd 无法正常启动。且报错 <code>Bad SSH2 cipher spec 'aes192-ctr,aes256-ctr,aes128-cbc,aes192-cbc,aes256-cbc ...'</code></p><ul><li>查看 ssh 使用了哪些 ciphers。</li></ul> <pre class="line-numbers language-csh" data-language="csh"><code class="language-csh">ssh -Q cipher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 <code>/etc/ssh/sshd_config</code>，替换 Ciphers 那一行即可。</li></ul></li></ol><h1>修订记录</h1><ul><li><p>2021-01-15</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FreeBSD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo + github 博客</title>
      <link href="2021/hexo-da-jian-wang-zhan/"/>
      <url>2021/hexo-da-jian-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>曾买过服务器使用 wordpress 搭建网站，备过案，维护麻烦。又试用过<a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate">Maverick</a>，但主题单一难看。偶然发现一款 hexo 主题<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>，决定以 hexo + github 搭建网站。</p><p>在 github 创建四个仓库。两个 private，分别是 blog-repo 和 hexo-blog-service。两个 public，分别为 hexo-blog 和 hexo-theme-matery。</p><ol><li>blog-repo 统一管理 blog，需要保护。有两个原因：其一，我所有文档都在 blog-repo中，不想分散管理；其二，hexo 插入图片的格式不是 markdown 标准格式，github 不能正常显示，所以此仓库中将存储标准格式 markdown，能在 github 正常显示。</li><li>hexo-blog-service 是 hexo 源码，需要保护。source/_posts 中的文档由 blog-repo自动提交，文档中图片插入格式符合 hexo。theme/matery 主题则是本仓库的子模块，由主题仓库 hexo-theme-matery 单独维护。</li><li>hexo-blog 是网站源码。当 blog-repo 中有 png 或 md 更新时， hexo-blog-service更新并将重新生成的网站内容推送到 hexo-blog。</li><li>最终成果，我们只需在 blog-repo 中提交文档即可，其它均由 github 自动完成。</li></ol><pre class="line-numbers language-none"><code class="language-none"> +---------+            +-----------------+           +---------+ |blog-repo| --push--&gt;  |hexo-blog-service| --push--&gt; |hexo-blog| +---------+            +-----------------+           +---------+      ^                          |pull      |update                    v+-----+-----+        +----------------------+|png,md 更新|        |拉取 hexo-theme-matery|+-----------+        +----------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>hexo win10 本地搭建</h1><p>暂且不管 github，我们只专注把本地服务器搭建好。</p><h2 id="基本准备">基本准备</h2><ol><li>安装 nodejs （参考 <a href="/2021/nodejs-an-zhuang-pei-zhi/" title="这里">这里</a>）。</li><li>安装 <code>git for windows</code> （参考 <a href="/2021/git-an-zhuang-pei-zhi/" title="这里">这里</a>）。</li><li>熟悉 git 及 github 基本操作。</li></ol><h2 id="安装-hexo">安装 hexo</h2><p>在合适位置创建目录 blog，在该目录中右键 <code>Git Bash Here</code>，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 hexo</span><span class="token function">npm</span> i hexo-cli -g<span class="token comment"># 验证是否安装成功</span>hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化网站">初始化网站</h2><p>在 blog 目录中执行以下命令以初始化网站，然后在本地打开网站。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化 blog。</span>hexo init<span class="token comment"># 生成静态网页。</span>hexo g<span class="token comment"># 启动本地服务器，在浏览器中打开  http://localhost:4000 即可浏览网站。</span>hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭本地服务器： <code>ctrl+c</code>。</p><h2 id="hexo-源码目录">hexo 源码目录</h2><p>介绍 blog 生成静态网页后，即运行 <code>hexo g</code> 后的源码目录。涉及一些后面内容。</p><pre class="line-numbers language-none"><code class="language-none">blog&#x2F;                 # hexo 源码目录。├─node_modules&#x2F;     # vodejs 组件。├─public&#x2F;           # hexo g 生成的网页源码，最终推送到 github。├─scaffolds&#x2F;        # 文章头结构模板，主要方便指令创建文章，自己写完全不需要。├─source&#x2F;           # 网页文章及布局目录，后面介绍如何生成里面内容。│  ├─about&#x2F;        # 关于页面。│  ├─archives&#x2F;     # 归档页面。│  ├─categories&#x2F;   # 分类页面。│  ├─contact&#x2F;      # 留言板页面。│  ├─friends&#x2F;      # 友情链接页面。│  ├─tags&#x2F;         # 标签页面。│  ├─_posts&#x2F;       # markdown 文章，图片。│  ├─404&#x2F;          # 404 页面│  └─CNAME         # 域名，将 github 绑定到某个域名上。├─themes&#x2F;           # 把主题 matery 文件夹放在此目录下。│   └─matery&#x2F;├─_config.yml       # 网站配置。├─package.json      # nodjs 配置文件。└─.gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换主题">切换主题</h2><p>在 github 创建 public 仓库 <code>hexo-thmem-matery</code>， 从<a href="https://github.com/blinkfox/hexo-theme-matery">这里</a> 拷贝一份，提交到仓库<code>hexo-thmem-matery</code>。主题说明参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">这里</a>。</p><p>在 blog 目录中，执行以下指令安装 matery 主题。安装位置在目录 blog/theme 中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/coco-hkk/hexo-theme-matery.git theme/matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 hexo 根目录下 _config.yml 的 theme 值： <code>theme: matery</code>。这个配置文件以下简称 <code>hexo 的 _config.yml</code></p><h2 id="新建页面">新建页面</h2><p>刚刚初始化的 blog 中，source 目录中只有 _posts 用来存放文章，还缺少许多页面。</p><ol><li><p>新建分类 categories 页</p><p>categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有categories/index.md 文件，那么你就需要新建一个。</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2021-01-10 14:38:00type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上内容为创建一个新页面的流程。</p><ul><li><p><code>hexo new page &quot;xxx&quot;</code> 会在 source 目录中创建一个 xxx 目录，并在该目录中创建一个 <code>index.md</code> 文件。</p></li><li><p><code>index.md</code> 内容以文件 <code>scaffolds/page.md</code> 为模板。我们把模板内容修改为：</p><pre class="line-numbers language-none"><code class="language-none">title: &#123;&#123; title &#125;&#125;date: 2021-01-10 14:38:00type: &quot;&quot;layout: &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后手动修改 type 和 layout 字段的值即可。</p></li><li><p>可见， scaffolds 目录中的模板其实可以不需要的，完全可以自己创建。不过在创建page 时，命令确实方便。创建文章时就没必要了，只要文章头符合 hexo 要求即可。</p></li></ul></li><li><p>新建标签 tags 页</p></li><li><p>新建关于我 about 页</p></li><li><p>新建留言板 contact 页</p></li><li><p>新建友情链接 friends 页</p><p>新建一个 friends 页，同时在你的博客 source 目录下新建 _data 目录，在 _data目录中新建 friends.json 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"大乘尊者"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"修仙中，禁止打扰！"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://coco-hkk.top/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建 404 页</p></li></ol><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2021&#x2F;01&#x2F;13 15:51:05type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件-插件">组件 / 插件</h2><p>不管是 hexo 还是主题 matery，为了实现一些功能和特效都需要安装并配置相应的组件或插件。</p><h3 id="hexo-markdown-渲染引擎">hexo markdown 渲染引擎</h3><p>默认安装的 markdown 引擎 <code>hexo-renderer-marked</code> <font color="red">不能将换行转换为空格</font>，由于我习惯于 80 列换行，添加网址或图片时 hexo 生成的网页很难看。此外我习惯了空行表示换行，在末尾加两个空格的换行方式真是很差劲的设计，直接导致行位有多余空白。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载默认 markdown 引擎</span><span class="token function">npm</span> uninstall hexo-renderer-marked<span class="token comment"># 安装 hexo-renderer-markdown-it 引擎</span><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-markdown-it --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 hexo 的 _config.yml 中增加 markdown 配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">preset</span><span class="token punctuation">:</span> <span class="token string">'default'</span>  <span class="token key atrule">render</span><span class="token punctuation">:</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 关闭换行，以空行代替换行</span>    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> <span class="token string">'header-anchor'</span>    <span class="token key atrule">permalinkSide</span><span class="token punctuation">:</span> <span class="token string">'left'</span>    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> <span class="token string">'¶'</span>    <span class="token key atrule">case</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="git-插件">git 插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo-插入图片">hexo 插入图片</h3><p>markdown 默认的插入图片格式不起作用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 hexo-asset-image</span><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 hexo 的 _config.yml 中设置 <code>post_asset_folder: true</code>。</p><p>比如本文想引用图片，首先在本文所在目录创建同名目录 <code>hexo 搭建网站</code>，把相关图片以png 格式放在其中，然后使用 <code>![测试](测试.png)</code> 引用。不要添加相对路径，直接图片名字。</p><h3 id="搜索">搜索</h3><p>matery 中使用到了 hexo-generator-search 的 hexo 插件来做内容搜索。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为主题 matery 安装搜索插件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 hexo 的 _config.yml 中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音">中文链接转拼音</h3><p>如果文章名称是中文的，那么 hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且gitment 评论对中文链接也不支持。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 hexo-permalink-pinyin 使生成文章时生成中文拼音的永久连接</span><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 hexo 的 _config.yml 中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文章字数统计">文章字数统计</h3><p>在文章中显示文章字数、阅读时长信息、阅读次数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 hexo-wordcount</span><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 <strong>matery</strong> 的 _config.yml 中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>hexo 配置</h1><p>一些重要配置，所列不包括之前已配置内容，配置文件位置 <code>blog/_config.yml</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 站点</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 点点滴滴                             <span class="token comment"># 网站主名称</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'道友，请留步！'</span>                  <span class="token comment"># 网站副名称</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'修仙才是正路。'</span>               <span class="token comment"># 网站描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Vim<span class="token punctuation">,</span> VPN<span class="token punctuation">,</span> Linux<span class="token punctuation">,</span> 周易，天文』     <span class="token comment"># 关键词，便于搜索引擎</span><span class="token key atrule">author</span><span class="token punctuation">:</span> coco<span class="token punctuation">-</span>hkk                            <span class="token comment"># 作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN                             <span class="token comment"># 中文显示</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span>                                <span class="token comment"># 默认即为系统所在时区</span><span class="token comment"># URL</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//coco<span class="token punctuation">-</span>hkk.top       <span class="token comment"># 网站域名，涉及 github</span><span class="token key atrule">root</span><span class="token punctuation">:</span> /                         <span class="token comment"># 表示网站是从 hexo-blog 的根目录起始。</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>title/        <span class="token comment"># 文章地址格式，例如本文地址：url/2021/hexo-da-jian-wang-zhan</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>                        <span class="token comment"># 语法高亮，hexo 自带</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 主页设置</span><span class="token key atrule">index_generator</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span>              <span class="token comment"># 设置为 6 的倍数</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span class="token comment"># Pagination</span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span>                <span class="token comment"># 设置为 6 的倍数</span><span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>matery 配置文件</h1><p>列一些重要的配置，配置文件位置 <code>blog/theme/matery/_config.yml</code>，请参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">这里</a>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置首页显示"梦想"的语句。</span><span class="token key atrule">dream</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 网站测试  <span class="token key atrule">text</span><span class="token punctuation">:</span> 网站测试中……<span class="token comment"># 是否激活文章 TOC 功能，并配置 TOC 支持选中哪些标题类型，这是全局配置。</span><span class="token comment"># 可以在某篇文章的 Front-matter 中再加上`toc: false`，使该篇文章关闭 TOC 目录功能</span><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h1<span class="token punctuation">,</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4  <span class="token key atrule">collapseDepth</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 目录默认展开层级</span>  <span class="token key atrule">showToggleBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示切换 TOC 目录展开收缩的按钮</span><span class="token comment"># 不蒜子 (http://busuanzi.ibruce.info/) 网站统计</span><span class="token key atrule">busuanziStatistics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalTraffic</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 总访问量</span>  <span class="token key atrule">totalNumberOfvisitors</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 总人次</span><span class="token comment"># cdn 加速</span><span class="token key atrule">jsDelivr</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/coco<span class="token punctuation">-</span>hkk/hexo<span class="token punctuation">-</span>blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>hexo github 搭建</h1><h2 id="本地-public-推送">本地 public 推送</h2><p>先考虑，把本地的网站 <code>blog/public</code> 推送到 github。在 github 创建一个 <strong>public</strong>空仓库 <code>hexo-blog</code>。在 hexo 的 _config.yml 中配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/coco<span class="token punctuation">-</span>hkk/hexo<span class="token punctuation">-</span>blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>hexo 安装 hexo-deployer-git 插件，<code>npm install hexo-deploy-git</code>。</p><p>然后执行 <code>hexo d</code> 即可将 <code>blog/public</code> 推送到 hexo-blog 仓库。</p><p>此时，我们无法通过网页访问 hexo-blog，需要针对 hexo-blog 做一些设置。</p><ol><li>在 hexo-blog 的<code> Settings</code> 页面找到 <code>GitHub Pages</code>，在 <code>Source</code> 中选择刚刚推送的 <code>Branch: master</code> 以及 <code>/(root)</code>。</li><li>在 <code>Custom domain</code> 中添加并保存申请的域名，例如：<code>coco-hkk.top</code>。<ul><li>购买 <code>coco-hkk.top</code> 域名。</li><li>在 cloudfalre 添加 <code>coco-hkk.top</code> 站点。</li><li>在 DNS 项添加记录。<table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">名称</th><th style="text-align:center">内容</th><th style="text-align:center">TTL</th><th style="text-align:center">代理状态</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">coco-hkk.top</td><td style="text-align:center">GitHub IP</td><td style="text-align:center">自动</td><td style="text-align:center">已代理</td></tr><tr><td style="text-align:center">CNAME</td><td style="text-align:center">www</td><td style="text-align:center"><a href="http://coco-hkk.github.io">coco-hkk.github.io</a></td><td style="text-align:center">自动</td><td style="text-align:center">已代理</td></tr></tbody></table></li></ul></li><li>在 source 目录中创建文件 CNAME，内容为 <code>coco-hkk.top</code>。</li></ol><p>现在，我们可以通过 <a href="https://coco-hkk.top">https://coco-hkk.top</a> 访问网站内容。</p><h2 id="github-推送">github 推送</h2><p>本地 public 推送，是将本地编译好的网站 <code>blog/public</code> 推送到 hexo-blog 仓库。</p><p>现在考虑，若我们只将 <code>blog/source/_posts</code> 中的文章推送到 github，然后由 github自动把 <code>blog/public</code> 推送到 hexo-blog，岂不美哉。</p><p>我们首先得在 github 创建一个 <strong>private</strong> 空仓库 <code>hexo-blog-service</code>。把它克隆到本地。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/coco-hkk/hexo-blog-service.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>将 blog 中的内容除 <code>theme/matery</code> 都拷贝到 hexo-blog-service 中，然后提交。</p></li><li><p>将主题 matery 作为 hexo-blog-service 的子模块。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hexo-blog-service<span class="token comment"># 增加子模块</span><span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/coco-hkk/hexo-theme-matery.git themes/matery<span class="token comment"># 提交</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token punctuation">;</span> <span class="token function">git</span> commit -m <span class="token string">"增加 matery 子模块"</span><span class="token punctuation">;</span> <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>为了实现自动推送，创建 github actions。在 hexo-blog-service 中创建<code>.github/workflows/auto_deploy.yml</code>。</p><p>请参考 <a href="https://github.com/sma11black/hexo-action">hexo-action</a>，此 action 实现了自动生成并推送网站功能，把它的配置文件直接拷贝到 <code>auto_deploy.yml</code> 即可。</p><p>需要注意一下几点：</p><ol><li><p>生成公私秘钥。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"username@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>到 Github Pages 仓库 <code>hexo-blog</code>，在 <code>Settings &gt; Deploy Keys</code> 随意命名一个，把 <code>id_rsa.pub</code> 公钥内容保存，确保给了 <strong>写权限</strong>。</p></li><li><p>在仓库 <code>hexo-blog-service</code> 的 <code>Settings &gt; Secrets</code> 添加名为 <strong>DEPLOY_KEY</strong> 且内容为 <code>id_rsa</code> 私钥的 secret。</p></li><li><p>修改 hexo-blog-service 的配置文件 _config.yml。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>coco<span class="token punctuation">-</span>hkk/hexo<span class="token punctuation">-</span>blog.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>现在，一旦我们向私有仓库 hexo-blog-service 提交任何内容，它都会向 hexo-blog 仓库推送生成的网页。</p><h2 id="github-二次推送">github 二次推送</h2><p>github 推送，只要维护好仓库中 <code>source/_posts</code> 目录下的内容即可。但如前所述：</p><ol><li>我有很多文档和文章存储在 github，不想把它们分散存储。</li><li>hexo 在 markdown 中图片引用格式不是正确的 markdown 语法，github 不能正常显示。</li></ol><p>所以，我新创建一个 <strong>private</strong> 仓库 <code>blog-repo</code>，用于存储私有文档，包括网站博客。然后，当我把文档提交到 blog-repo 时，根据提交的内容判断是否推送到hexo-blog-service。</p><ol><li>生成公私钥<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"username@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>右上角图像 <code>Personal settings -&gt; SSH and GPG keys -&gt; SSH keys</code> 新增一个 SSHkey，将公钥保存，命名随意，确保给了 <strong>写权限</strong>。</li><li>在 blog-repo 的 <code>Settings -&gt; Secrets</code> 新增名字为 <code>PERSONAL_TOKEN</code>，内容为私钥的 secret。</li></ol><p>为 blog-repo 新增 github actions，创建 <code>.github/workflows/hexo-blog.yml</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> hexo blog Push<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master    <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'hexo_blog_service/**.md'</span>      <span class="token punctuation">-</span> <span class="token string">'hexo_blog_service/**.png'</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Push</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Actions checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> git global config        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global core.quotepath false          git config --local user.email "hkkdlut@sina.cn"          git config --local user.name "coco-hkk"          mkdir -p ~/.ssh/          echo "$&#123;&#123; secrets.PERSONAL_TOKEN &#125;&#125;" > ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com >> ~/.ssh/known_hosts</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> checkout hexo<span class="token punctuation">-</span>blog<span class="token punctuation">-</span>service        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          cd ..          git clone git@github.com:coco-hkk/hexo-blog-service.git hexoBlogService</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get blog<span class="token punctuation">-</span>repo changes files<span class="token punctuation">,</span> only for md and png.        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          cd $GITHUB_WORKSPACE          echo "======================文件变动情况统计======================="          # 获取变化前后所有文件的路径名，a表示前，b表示后          diff_file_a=$(git show | grep "^diff" | awk '&#123;print $3&#125;')          diff_file_b=$(git show | grep "^diff" | awk '&#123;print $4&#125;')          # 变化前后的所有文件路径名放在一个变量中，遍历，区分出已删除和新增文件          # ，修改文件名操作按照新增文件和删除旧文件计算。          update_file="$diff_file_a $diff_file_b"          for file in $(echo "$update_file")          do            file=$(echo $file | awk '&#123;print substr($0, 3)&#125;')            if [ $&#123;file:0:1&#125; = '/' ]; then              file=$(echo $file | awk '&#123;print substr($0, 2)&#125;' | sed 's/"//g')              echo "include chinese character."            fi            if [ ! -f $file ]; then              echo "X  $file"              # deleted_file_pathx 保存已删除文件路径              echo $file >> deleted_file_pathx              continue            fi            # updated_file_pathx 保存新增文件或已修改文件名文件的路径            echo $file | tee -a updated_file_pathx          done          echo "============= 统计 png 和 md 新增和更新文件路径 ==============="          cat updated_file_pathx | uniq | grep "^1_Blog" | grep -E ".png$|.PNG$|.md$" | tee updated_file_path          echo "=============== 统计 png 和 md 已删除文件路径 ================"          if [ -s deleted_file_pathx ]; then              cat deleted_file_pathx | uniq | grep "^1_Blog" | grep -E ".png$|.PNG$|.md$" | tee deleted_file_path          fi</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> markdown images relative path change        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          if [ -s updated_file_path ]; then            cat updated_file_path | grep -E ".md" | tee updated_md_file            for file in $(cat updated_md_file)            do                file_name=$(basename $file .md)                sed -E -i "s/\]\($file_name\//\]\(/g" $file            done          fi</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> update hexo<span class="token punctuation">-</span>blog<span class="token punctuation">-</span>service repo        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          # 先删除后拷贝，防止由于路径改变的文件被误删。          if [ -s deleted_file_path ]; then            echo "====================== Delete file =========================="            cat deleted_file_path | grep ".md$" | tee deleted_md_file            cat deleted_file_path | grep -E ".png$|.PNG$" | tee deleted_png_file            for file in $(cat deleted_md_file)            do                echo  "删除 $(basename $file)"                rm -rf ../hexoBlogService/source/_posts/$(basename $file)            done            for file in $(cat deleted_png_file)            do                png_path="../hexoBlogService/source/_posts/$(basename $(dirname $file))"                if [ ! -d $png_path ]; then                    continue                fi                echo  "删除 $(basename $file)"                rm -rf $png_path/$(basename $file)                # 删除空目录                if [ "$(ls -A $png_path)" = "" ]; then                    rm -rf $png_path                fi            done          fi          if [ -s updated_file_path ]; then            echo "======================== Copy file =========================="            cat updated_file_path | grep -E ".png$|.PNG$" | tee updated_png_file            cp -rf $(cat updated_file_path | grep ".md$") ../hexoBlogService/source/_posts            for file in $(cat updated_png_file)            do                png_path="../hexoBlogService/source/_posts/$(basename $(dirname $file))"                if [ ! -d $png_path ];then                   mkdir -p $png_path                fi                cp -rf $file $png_path            done          fi</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> deploy hexo<span class="token punctuation">-</span>blog<span class="token punctuation">-</span>service        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          cd ../hexoBlogService          git config --local user.email "hkkdlut@sina.cn"          git config --local user.name "coco-hkk"          git status          git add -A          git commit -m "Automatically Update"          git push --force --quiet "git@github.com:coco-hkk/hexo-blog-service.git" master:master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PS</strong> blog-repo 发现子目录 hexo_blog_service 中有 .png 和 .md 格式的文档更新，则会自动将更新或新增的 md 文档中的图片引用替换为 hexo 可识别的格式。然后更新hexo-blog-service 仓库并提交。</p><h1>提交搜索引擎</h1><ol><li><p>提交百度搜索收录博客文章</p><p><a href="https://ziyuan.baidu.com/linksubmit/url">https://ziyuan.baidu.com/linksubmit/url</a></p></li></ol><h1>FAQ</h1><ol><li><p>不能正常把换行变成空格</p><p>参考 <code>hexo markdown 渲染引擎</code> 小节。</p></li><li><p>图片不能正常加载</p><p>参考 <code>hexo 插入图片</code> 小节。</p></li><li><p>busuanzi 统计文章访问量错误</p><p>和 Chrome 85 版本 Referrer Policy 更改有关。之前版本的 Chrome浏览器，如果网站没有指定自己的 Referrer Policy，那么 Chrome 默认 policy 是no-referrer-when-downgrade，在 Chrome 85 版本中，为了保护用户的隐私，默认的Referrer Policy 则变成了 strict-origin-when-cross-origin。</p> <pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">// 修改 layout.ejs&#123;&#123;- if .Site.Params.busuanzi.enable -&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer-when-downgrade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;- end -&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://jdhao.github.io/2020/10/31/busuanzi_pv_count_error/">https://jdhao.github.io/2020/10/31/busuanzi_pv_count_error/</a></p></li><li><p>navigation 二级菜单中文翻译</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">// navigation.ejsmenuMap.set("Medias", "多媒体");menuMap.set("Musics", "音乐");menuMap.set("Movies", "视频");menuMap.set("Books", "图书");menuMap.set("Galleries", "壁纸");// 修改 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> 标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub-nav menus_item_child <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>url<span class="token punctuation">)</span></span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> childrenLink<span class="token punctuation">.</span>icon </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">margin-top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span> <span class="token property">zoom</span><span class="token punctuation">:</span> 0.6<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> childrenLink<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代码块不能正常显示行号</p></li></ol><h1>修订记录</h1><ul><li><p>2021-01-14</p><p>创建。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>太阳系</title>
      <link href="2021/tai-yang-xi/"/>
      <url>2021/tai-yang-xi/</url>
      
        <content type="html"><![CDATA[<p>太阳系学习与研究。</p><h1>太阳系概述</h1><p><strong>太阳系</strong>（Solar system）是一个受太阳引力约束在一起的天体系统。包括 <strong>太阳</strong>、<strong>行星及其卫星</strong>、<strong>矮行星</strong>、<strong>小行星</strong>、<strong>彗星</strong> 和 <strong>行星际物质</strong>。</p><p>太阳位于距银河系中心约 2.4-2.6 万光年，而银河系直径约有 10 万光年，包含 1500 亿颗恒星，太阳只是其中之一。从银河北极鸟瞰，太阳沿 <strong>顺时针</strong> 轨道运行，以 220km/s的速度绕银心运动，大约 2.25-2.5 亿年绕行一周。太阳运行的方向基本上是朝向 <strong>织女星</strong>，靠近武仙座的方向。</p><p>太阳系中最主要的成员是太阳，它是一颗 G2 主序星，占据了太阳系所有已知质量的99.86%，太阳系内的天体在太阳引力的约束下运动。剩余的质量中，有 99% 的质量由太阳系的 4 颗大天体，即巨行星组成，而 <strong>木星</strong> 和 <strong>土星</strong> 又合占了其中的 90% 以上。太阳系中其余的天体（包括 4 颗类地行星、矮行星、卫星、小行星和彗星），总质量还不到太阳系的 0.002%。</p><p>环绕太阳运转的大天体都躺在地球轨道平面——黄道——附近的平面。行星都非常靠近黄道，而柯伊伯带天体通常都有明显的倾斜角度。所有的行星和大多数的太阳系其它天体都以相同的方向绕着太阳转动（从地球的北极鸟瞰是逆时针方向），但也有逆向的，比如哈雷彗星。</p><p><strong>八大行星</strong> 离太阳由近及远分别是 <strong>水星</strong>、<strong>金星</strong>、<strong>地球</strong>、<strong>火星</strong>、<strong>木星</strong>、<strong>土星</strong>、<strong>天王星</strong>、<strong>海王星</strong>。</p><p><strong>类地行星</strong> 体积小而平均密度大，自转速度慢，卫星较少，有水星、金星、地球和火星。</p><p><strong>类木行星</strong> 体积大，平均密度小，自转速度快，卫星较多，有木星、土星、天王星和海王星。</p><p><strong>五颗矮行星</strong> 分别是 <strong>谷神星</strong>、<strong>冥王星</strong>、<strong>妊神星</strong>、<strong>鸟神星</strong>、<strong>倪神星</strong>。</p><p><strong>太阳系小天体</strong> 除 <strong>行星</strong> 和 <strong>矮行星</strong> 外，其他所有环绕太阳运转的天体都将归属到这个分类下。目前包括在内的有大多数太阳系内的 <strong>小行星</strong>、多数的 <strong>海王星外天体</strong>、<strong>彗星</strong>和 <strong>其它的小天体</strong>。太阳系小天体大多数都分布在两个明确的区域，即<strong>小行星带</strong> 和 <strong>柯伊伯带</strong>。</p><p><code>小行星带</code> 太阳系内介于火星和木星轨道之间的小行星密集区域。</p><p><code>柯伊伯带 (kuiper belt)</code>位于太阳系的海王星轨道（距离太阳约 30 天文单位）外侧，在黄道面附近的天体密集圆盘状区域。类似于小行星带，但范围大得多，它比小行星带宽 20倍且重 20 至 200 倍。</p><p>太阳系内已探测到的区域总体上分为：太阳、小行星带以内的四颗较小的行星和小行星带以外柯伊伯带以内的四颗巨行星。</p><p>有时会将太阳系非正式地分成几个不同的区域：</p><p><strong>内太阳系</strong>，包括四颗类地行星和主要的小行星带。</p><p><strong>外太阳系</strong>，在小行星带以外的区域，包括了四颗气体巨行星（也有称 <strong>中间带</strong>）。柯伊伯带以外则是 <strong>奥尔特云</strong>，它是已知的太阳系边界区域。</p><p><code>奥尔特云 (Oort Cloud)</code> 是一个假设包围着太阳系的球体云团，布满着不少不活跃的彗星，距离太阳约 50000-100000 个天文单位，最大半径差不多为 1 光年，即太阳与比邻星距离的四分之一。</p><h1>太阳</h1><p>太阳只是宇宙中一颗十分普通的恒星，但它却是太阳系的中心天体。太阳系中，包含我们的地球在内的八大行星、一些矮行星、彗星和其它无数的太阳系小天体，都在太阳的强大引力作用下环绕太阳运行。</p><p><strong>太阳在宇宙的位置</strong></p><p><img src="/2021/tai-yang-xi/2_%E5%A4%AA%E9%98%B3%E4%BD%8D%E7%BD%AE.png" alt="太阳位置"></p><p><strong>太阳基本参数</strong></p><table><thead><tr><th style="text-align:center">平均直径</th><th style="text-align:center">质量</th><th style="text-align:center">表面温度</th><th style="text-align:center">自转周期</th><th style="text-align:center">公转周期</th></tr></thead><tbody><tr><td style="text-align:center">1.392 x 10 ^ 6 km</td><td style="text-align:center">1.981 x 10 ^ 30 kg</td><td style="text-align:center">约 6000℃</td><td style="text-align:center">25.05 天</td><td style="text-align:center">(2.25-2.50) x 10 ^ 8 a</td></tr><tr><td style="text-align:center">109 倍的地球</td><td style="text-align:center">333000 倍的地球</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><table><thead><tr><th style="text-align:center">与地球平均距离</th><th style="text-align:center">视星等</th><th style="text-align:center">绝对星等</th><th style="text-align:center">光谱类型</th></tr></thead><tbody><tr><td style="text-align:center">1.496 x 10 ^ 8 km</td><td style="text-align:center">-26.74</td><td style="text-align:center">4.839</td><td style="text-align:center">G2V</td></tr><tr><td style="text-align:center">以光速约 8 分 19 秒</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><h2 id="太阳结构">太阳结构</h2><p>根据太阳活动的相对强弱，我们把太阳分为 <strong>宁静太阳</strong> 和 <strong>活动太阳</strong> 两大类。<strong>宁静太阳</strong>是一个理论上假定宁静的球对称热气体球，其性质只随半径而变，而且在任一球层中都是均匀的，其目的在于研究太阳的总体结构和一般性质。在这种假定下，按照由里往外的顺序，太阳是由 <em>核心</em>、<em>辐射区</em>、<em>对流层</em>、<em>光球层</em>、<em>色球层</em>、<em>日冕层构成</em>。光球层之下称为 <strong>太阳内部</strong>；光球层之上称为 <strong>太阳大气</strong>。</p><p><strong>太阳结构示意图</strong></p><p><img src="/2021/tai-yang-xi/2_%E5%A4%AA%E9%98%B3%E7%BB%93%E6%9E%84.png" alt="太阳结构示意图"></p><h3 id="太阳的内部">太阳的内部</h3><p><strong>核反应区</strong> 从中心到 0.25R⊙（R⊙：太阳半径）是太阳发射巨大能量的真正源头，也称为核反应区。在这里，太阳核心处温度高达 1500 万度，压力相当于 3000 亿个大气压，随时都在进行着四个氢核聚变成一个氦核的热核反应。根据原子核物理学和爱因斯坦的质能转换关系式 E=mc2，每秒钟有质量为 6 亿吨的氢经过热核聚变反应为 5.96 亿吨的氦，并释放出相当于 400 万吨氢的能量，正是这巨大的能源带给了我们光和热，但这损失的质量与太阳的总质量相比，却是不值一提的。根据目前对太阳内部氢含量的估计，太阳至少还有50 亿年的正常寿命。</p><p><strong>辐射区</strong> 0.25R⊙~0.86R⊙是太阳辐射区，它包含了各种电磁辐射和粒子流。辐射从内部向外部传递过程是多次被物质吸收而又再次发射的过程。从核反应区到太阳表面的行程中，能量依次以 X 射线、远紫外线、紫外线，最后是可见光的形式向外辐射。太阳是一个取之难尽，用之不竭的能量源泉。</p><p><strong>对流层</strong> 对流层是辐射区的外侧区域，其厚度约有十几万千米，由于这里的温度、压力和密度梯度都很大，太阳气体呈对流的不稳定状态。使物质的径向对流运动强烈，热的物质向外运动，冷的物质沉入内部，太阳内部能量就是靠物质的这种对流，由内部向外部传输。</p><h3 id="太阳的大气">太阳的大气</h3><p><strong>光球层</strong>  对流层上面的太阳大气，就是我们平时所见的太阳圆盘，称为太阳光球。光球是一层不透明的气体薄层，厚度约 500 千米。它确定了太阳非常清晰的边界，几乎所有的可见光都是从这一层发射出来的 。</p><p>光球层上最显著的现象就是 <strong>太阳黑子</strong>，所谓太阳黑子，其实只是太阳光球层上的温度相对较低的区域，其温度约为 4500K，而光球其余部分的温度约为 5800K。这些温度较低的区域在明亮的光球反衬下，就显得很黑。</p><p>除此之外，太阳光球层上还有以下一些现象：</p><ol><li><p><em>光斑</em> 即在日面边缘背景亮度较小的部分可以看到一些比周围亮的斑点。</p></li><li><p><em>临边昏暗</em> 即日面亮度向边缘逐渐减小的现象。</p></li><li><p><em>米粒组织</em> 即在比较好的大气宁静条件下，通过高分辨率的太阳望远镜仔细观测，可以看到光球表面的亮度并不均匀，存在着均匀分布的米粒状的结构，称为米粒组织。这其实是对流层里对流现象在光球表面的一种表现形式，它和太阳活动区关系密切。</p></li></ol><p><img src="/2021/tai-yang-xi/2_%E5%A4%AA%E9%98%B3%E9%BB%91%E5%AD%90%E5%92%8C%E7%B1%B3%E7%B2%92%E7%BB%84%E7%BB%87.png" alt="太阳黑子"></p><p><strong>色球层</strong>  色球位于光球之上。厚度约 2000 千米。太阳的温度分布从核心向外直到光球层，都是逐渐下降的，但到了色球层，却又反常上升，到色球顶部时已达几万度。由于色球层发出的可见光总量不及光球的 1%，因此人们平常看不到它。只有在发生日全食时，即食既之前几秒种或者生光以后几秒钟，当光球所发射的明亮光线被月影完全遮掩的短暂时间内，在日面边缘呈现出狭窄的玫瑰红色的发光圈层，这就是色球层。平时，科学家们要通过单色光（波长为 6563 埃）色球望远镜才能观测到太阳色球层。</p><p>色球上经常出现一些暗的“飘带”，称为暗条，当它转到日面边缘时，很像一只耳朵，人们俗称它为 <strong>日珥</strong>；在太阳黑子的正上方，有时出现一些局部亮区域，称为 <strong>谱斑</strong>；当谱斑亮度突然增强时，就是通常人们所说的 <strong>太阳耀斑</strong>。太阳耀斑释放的能量极其巨大，其巨大的能量来自磁场。</p><p><strong>日冕</strong> 是太阳大气的最外层，它由高温、低密度的等离子体所组成。亮度微弱，在白光中的总亮度比太阳圆面亮度的百分之一还低，约相当于满月的亮度，因此只有在日全食时才能展现其光彩，平时观测则要使用专门的日冕仪。日冕的温度高达百万度，其大小和形状与太阳活动有关，在太阳活动极大年时，日冕接近圆形；在太阳宁静年则呈椭圆形。自古以来，观测日冕的传统方法都是等待一次罕见的日全食——在黑暗的天空背景上，月面把明亮的太阳光球面遮掩住，而在日面周围呈现出青白色的光区，就是人们期待观测的太阳最外层大气——日冕。</p><h2 id="太阳活动">太阳活动</h2><p>我们的太阳其实只是看起来宁静，而实际上却时时刻刻都存在着各种剧烈活动。</p><h3 id="太阳黑子">太阳黑子</h3><p>太阳黑子是经常出现在日面光球层的暗黑斑点，是典型的太阳活动现象的表现。发展完全的黑子通常是由较黑的“本影”核和周围较本影亮的“半影”组成。黑子显得黑，实际上并非绝对的黑，从黑子光谱分析得出，黑子的温度比明亮的光球温度低 1500℃ 左右，磁场强度可达三四千高斯。</p><p>太阳黑子经常成群出现，其大小很不相同，有的小到刚刚可以看到，有的却比地球大上十余倍。大黑子群通常是由几十个大小不等的黑子组成，黑子越大，寿命越长。</p><h3 id="光斑和谱斑">光斑和谱斑</h3><p><strong>光斑</strong> 是与太阳黑子相反的一种 <strong>光球现象</strong>，温度约比光球高 100℃，在日面边缘部分所看到的微弱明亮区域就是光球光斑。</p><p><strong>谱斑</strong> 出现在色球中，位于光斑之上，也称为 <strong>色球光斑</strong>，用单色光可以在日面任何部分都可以观测到谱斑。</p><p>光斑和谱斑都与太阳黑子有着密切的关系，它们常常相互伴随，有着 11 年周期的变化。一般情况下，光斑和谱斑的出现，意味着即将有黑子群出现日珥和暗条。</p><p>氢是太阳大气中最丰富的元素，而且这条谱线位于可见光区。当我们仔细观测日面边缘——色球层时，会发现它不是均匀的一层，而是有着迅速变化的多种精细结构，就象一个燃烧的大草原，有的呈流烟状，有的呈环状，这就是通常所说的 <strong>日珥</strong>。</p><p>日珥可分为宁静日珥、活动日珥和爆发日珥三大类。<strong>宁静日珥</strong> 变化缓慢，可在日面存在几天甚至几十天。<strong>活动日珥</strong> 总在不停地变化，它们像喷泉一样从日面喷出来，又慢慢地落回到日面。<strong>爆发日珥</strong> 以每秒几百千米的速度，将物质喷发到几十万甚至上百万千米的高空，蔚为壮观。日珥在日面上的投影称为 <strong>暗条</strong>，当暗条随着太阳自转到日面边缘时，就可以观察到日珥了。</p><h3 id="太阳耀斑">太阳耀斑</h3><p>发生于 <em>太阳色球与日冕之间</em> 的一种剧烈的短寿命（几分钟到几十分钟之间）爆发现象，又称 <strong>太阳爆发</strong>。用普通的望远镜偶尔也能观测到稀有的白光耀斑。在太阳活动峰年当黑子出现最多的时候也是耀斑活动出现频繁的时候。一次大耀斑事件，除了日面局部突然增亮的现象外，更主要表现在从射电波段直到 X 射线的辐射通量的突然增强，同时抛射出大量的高能粒子和等离子体，对地球空间环境造成很大的影响。</p><p>二十世纪 70 年代的空间探测器观测发现，日冕中有大片形状不规则的黑暗区域，称为 **冕洞**。冕洞是日冕的低温、低密度区，大致可分为 3 种：极区冕洞、孤立冕洞和延伸冕洞。极区冕洞经常存在南北极区，孤立的中低纬冕洞尺度较小，从极区向赤道发展延伸的冕洞寿命较长，是高速太阳风的重要源泉。当太阳上有强烈 X 射线耀斑爆发和日冕物质抛射时，部分强大的等离子流飞达地球附近，往往引起很大的磁暴与强烈的极光，同时也发生电离层骚扰，影响地球短波通讯和卫星通讯。地球两极则会出现千姿百态的美丽极光。</p><p><strong>太阳风</strong> 是从太阳大气最外层的日冕向空间持续抛射出来的物质粒子流。很早以前，人们看到彗星的尾巴老是背着太阳，猜想这大概是从太阳“吹”出来的某种物质造成的。1958年，通过人造卫星上的粒子探测器，探测到了太阳上有微粒流发出。美国科学家帕克给它取名为“太阳风”。太阳活动时辐射出来的太阳风强度大，速度快，飞到地球附近时速度仍可达每秒 1000~2000 千米。这种高速太阳风对地球的影响很大，往往会引起磁暴和强烈的极光，同时还会发生电离层骚扰。</p><h3 id="太阳活动对地球的影响">太阳活动对地球的影响</h3><p><strong>极光现象</strong> 在靠近地球的极区，晚上常常可以看见天空中闪耀着绚丽多彩、变化多端的光带，这就是极光。极光就是太阳发射出的高速带电粒子流到达地球后，在磁场的作用下，与地球两极地区高空大气分子相互作用产生的高能物理现象。观测表明，极光出现的强度和频繁程度与太阳活动的强弱有密切的关系。</p><p><strong>地球磁暴</strong> 太阳上存在的 11 年周期或更长周期活动现象。每当太阳活动峰年太阳黑子相对数增加，耀斑爆发、日冕物资抛射等现象频繁出现，并且发射出大量高能带电粒子到达地球时，就会扰乱地球原有的磁场，引起地球磁暴。</p><p><strong>对无线电通讯和电力的影响</strong> 当太阳发射出大量高能带电粒子运动到近地空间时，会干扰无线电通讯和地面电力传输，太阳发生大规模的爆发性活动事件时，有关部门需要准备好应对措施。</p><p><strong>对宇航的影响</strong> 高能带电粒子流也会干扰和破坏空间探测器的设备和运行，甚至威胁到宇航员的生命安全，因此宇航探测设备必需充分考虑到这个因，要对地球附近以及航线区域的磁场状况、太阳风状况有详细的了解，并考虑好预防措施。</p><p><strong>对地球灾害的影响</strong> 太阳活动对地球上一些灾害性事件的影响，是许多科学家长期以来所关心的研究课题。资料显示，太阳活动周期与地球上水旱灾害和寒暖变化，地震有一定的关系。例如，研究表明水旱寒暖的年份和地震发生的次数都和太阳活动的 11 年和 22 年的周期相关。</p><p><strong>对人体的影响</strong> 天文因素与人类健康和行为的统计研究发现，在太阳活动引起地球磁暴期间，人的神经系统对太阳活动变化非常敏感，某些疾病、血液系统、神经系统的变化和太阳黑子活动呈现出明显的相关性。目前这类课题还处于研究阶段。</p><h1>修订记录</h1><ul><li><p>2021-01-13</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天文 </tag>
            
            <tag> 太阳系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天文概念</title>
      <link href="2021/tian-wen-gai-nian/"/>
      <url>2021/tian-wen-gai-nian/</url>
      
        <content type="html"><![CDATA[<p>学习工具 <code>Stellarium</code>、<code>Celestia</code>、<code>SpaceEngine</code> 以及 <code> Universe Sandbox</code>。</p><h1>星等</h1><p>星等（magnitude）是衡量天体光度的量。在不明确说明的情况下，星等一般指目视星等。</p><p>天文学上规定，星的明暗一律用星等来表示，星等数越小，说明星越亮，星等数每相差 1星的亮度大约相差 2.512 倍。1 等星的亮度恰好是 6 等星的 100 倍。每相差 0.1 星等的亮度大约相差 1.0965 倍。</p><ol><li>视星等</li></ol><p>天体光度测量直接得到的星等同天体的距离有关，称为视星等，它反映天体的视亮度。一颗很亮的星可以由于距离远而显得很暗（星等数值大）；而一颗实际上很暗的星可能由于距离近而显得很亮（星等数值小）。对于点光源，则代表天体在地球上的照度。星等常用 m 表示。</p><p>天空中有一等星 21 颗，二等星有 46 颗，三等星 134 颗，四等星共 458 颗，五等星有1476 颗，六等星共 4840 颗，共计 6974 颗。更亮的为 0 等以至负的星等。例如，太阳是-26.7 等，满月的亮度是 -12.6 等，金星最亮时可达 -4.9 等。</p><p>我们把肉眼能够看到的最暗的星设定是 6 等星（6m 星）。</p><ol start="2"><li>绝对星等</li></ol><p>绝对星等（M）是假定把恒星放在距地球 10 秒差距（32.6 光年）的地方测得的恒星的亮度，用以区别于视星等（m）。</p><h1>色指数</h1><p>色指数是天文学中利用颜色来显示恒星表面温度的一个纯量。</p><h1>赫罗图</h1><p>恒星光谱型和光度关系的坐标图。该图以横坐标表示光谱型，由左到右为 O、B、A、F、G、K、M 光谱型。以纵坐标表示光度（绝对星等），由下到上为 +15、+10、0、-5、-10 绝对星等。</p><p>结果发现，有 90% 以上的恒星分布在坐标图的左上方到右下方的对角线的狭长带区内。这个狭长带区称为 <strong>主星序</strong>; 其中的恒星称为 <strong>主序星</strong>。在主星序右上角，有呈水平走向<strong>巨星序</strong>，其中的恒星称为 <strong>巨星</strong>，数量较少。在图上部，有一些分散的 **超巨星**组成 <strong>超巨星序</strong>。在图左下角，是由为数较少的 <strong>白矮星</strong> 组成的 <strong>白矮星序</strong>。赫罗图能显示恒星的类别和演化程序，是天体物理学和天体演化学的有力研究工具。</p><p><img src="/2021/tian-wen-gai-nian/0_%E8%B5%AB%E7%BD%97%E5%9B%BE.png" alt="赫罗图"></p><p>恒星类型参照表：</p><table><thead><tr><th>类型</th><th>温度</th><th>约定颜色</th><th>看见颜色</th><th>质量（太阳质量）</th><th>半径（太阳半径）</th></tr></thead><tbody><tr><td>O</td><td>30,000-60,000K</td><td>蓝色</td><td>蓝色</td><td>64M⊙</td><td>16R⊙</td></tr><tr><td>B</td><td>10,000-30,000K</td><td>蓝到白色</td><td>蓝白色</td><td>18M⊙</td><td>7R⊙</td></tr><tr><td>A</td><td>7,500-10,000K</td><td>白色</td><td>白色</td><td>3.1M⊙</td><td>2.1R⊙</td></tr><tr><td>F</td><td>6000-7500K</td><td>淡黄白色</td><td>白色</td><td>1.7M⊙</td><td>1.4R⊙</td></tr><tr><td>G</td><td>5000-6000K</td><td>黄色</td><td>淡黄白色</td><td>1.1M⊙</td><td>1.1R⊙</td></tr><tr><td>K</td><td>3500-5000K</td><td>橙色</td><td>黄橙色</td><td>0.8M⊙</td><td>0.9R⊙</td></tr><tr><td>M</td><td>2000-3500K</td><td>红色</td><td>橙红色</td><td>0.4M⊙</td><td>0.5R⊙</td></tr></tbody></table><h1>距离单位</h1><ol><li>天文单位</li></ol><p>天文单位是天文学中计量天体之间距离的一种单位。以 <code>A.U.</code> 表示，其数值取地球和太阳之间的平均距离，约 1.5 亿公里。</p><pre class="line-numbers language-none"><code class="language-none">月球距离地球 0.0026 天文单位。地球距离太阳 1 天文单位。木星距离太阳 5.2 天文单位。冥王星距离太阳 39.5 天文单位。1 天文单位 &#x3D; 149597870700 米 &#x3D; 1.495978707 x 10^11 米<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>光年</li></ol><p>光年一般被用于衡量天体间的距离。字面意思指：光在宇宙真空中沿直线经过一年时间的距离，以 <code>ly</code> 表示，为 <code>9,460'7304'7258'0800</code> 米。</p><pre class="line-numbers language-none"><code class="language-none">一光年约等于 63240 天文单位。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>秒差距</li></ol><p>秒差距是天文学上的一种长度单位。秒差距是最标准的测量恒星距离的方法，以 <code>pc</code> 表示。</p><p>主要用于量度太阳系外天体的距离。</p><p>1 秒差距定义为天体的半年视差为 <code>2&quot;</code> 时，天体到地球（太阳）的距离，也就是地球轨道半径对应视角为 <code>1&quot;</code> 时的距离。</p><p>秒差距是视角的倒数，当天体的视角为 <code>0.1&quot;</code> 时，它的距离为 10 秒差距，当天体的视角为<code>0.01&quot;</code>时，它的距离便为 100 秒差距，依次类推。</p><pre class="line-numbers language-none"><code class="language-none">1 秒差距约 3.261 光年<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="视差">视差</h2><p>视差就是从有一定距离的两个点上观察同一个目标所产生的方向差异。从目标看两个点之间的夹角，叫做这两个点的视差，两点之间的距离称作基线。只要知道视差角度和基线长度，就可以计算出目标和观测者之间的距离。</p><h1>天文坐标系</h1><h1>天体</h1><h2 id="卫星">卫星</h2><p>卫星是指在围绕一颗行星轨道并按闭合轨道做周期性运行的天然天体，人造卫星一般亦可称为卫星。</p><ol><li>不会发光。</li><li>围绕行星运转。</li><li>随行星围绕恒星运转。</li></ol><h2 id="小行星">小行星</h2><p>小行星是指太阳系内类似行星环绕太阳运动，但体积和质量比行星小得多的天体，绝大多数的小行星都集中在火星与木星轨道之间的小行星带。</p><h2 id="行星">行星</h2><p>行星，通常指自身不发光，环绕着恒星的天体。</p><p>新定义：</p><ol><li>必须是围绕恒星运转的天体。</li><li>质量必须足够大，来克服固体引力以达到流体静力平衡的形状（近于球体）。</li><li>必须清除轨道附近区域，公转轨道范围内不能有比它更大的天体。</li></ol><h3 id="行星环">行星环</h3><p>行星环引指围绕行星旋转的物质构成的环状带，是因质量巨大的行星的引力而形成。</p><p>太阳系中拥有行星环的行星有木星、土星、天王星和海王星。</p><h2 id="恒星">恒星</h2><p>恒星是由 <code>发光等离子体</code>，主要是 <code>氢</code>、 <code>氦</code> 和 <code>微量的较重元素</code> 构成的巨型球体。</p><p>在夜晚能看到的恒星，几乎都处于银河系内。而银河系统共约 3000 亿颗恒星中，人类只能观测到一小部分。</p><h2 id="矮行星">矮行星</h2><p>矮行星或称“侏儒行星”，体积介于行星和小行星之间，围绕恒星运转，质量足以克服固体引力以达到流体静力平衡（近于圆球）形状，没有清空所在轨道上的其他天体，同时不是行星。</p><h2 id="彗星">彗星</h2><p>彗星，是指进入太阳系内亮度和形状会随日距变化而变化的绕日运动的天体，呈云雾状的独特外貌。</p><p>彗星分为彗核、彗发、彗尾三部分。彗核由冰物质构成，当彗星接近恒星时，彗星物质升华，在冰核周围形成朦胧的彗发和一条稀薄物质流构成的彗尾。</p><p>彗星的质量、密度很小，当远离太阳时只是一个由水、氨、甲烷等冻结的冰块和夹杂许多固体尘埃粒子的“脏雪球”。当接近太阳时，彗星在太阳辐射作用下分解成彗头和彗尾，状如扫帚。</p><h2 id="白矮星">白矮星</h2><p>白矮星是一种低光度、高密度、高温度的恒星。因为它的颜色呈白色、体积比较矮小，因此被命名为白矮星。</p><p>白矮星是演化到末期的恒星，主要由碳构成，外部覆盖一层氢气与氦气。</p><p>表面温度 8000K，发出白光，可有几十亿年寿命。</p><h2 id="中子星">中子星</h2><p>中子星是除黑洞外密度最大的星体。</p><p>恒星演化到末期，经由重力崩溃发生超新星爆炸之后，可能成为的少数终点之一。</p><p>质量没有达到可以形成黑洞的恒星在寿命终结时塌缩形成的一种介于白矮星和黑洞之间的星体，其密度比地球上任何物质密度大相当多倍。</p><h3 id="脉冲星">脉冲星</h3><p>中子星的一种，能够周期性发射脉冲信号，直径大多为 10 千米左右，自转极快。</p><h2 id="黑洞">黑洞</h2><p>黑洞是现代广义相对论中，存在于宇宙空间中的一种天体。黑洞的引力极其强大，使得视界内的逃逸速度大于光速。</p><p>故而，“黑洞是时空曲率大到光都无法从其事件视界逃脱的天体”。</p><h2 id="虫洞">虫洞</h2><p>时空洞（Wormhole）又称 <code>爱因斯坦－罗森桥</code>，也译作 <code>蛀孔</code>。是宇宙中可能存在的连接两个不同时空的狭窄隧道。</p><h2 id="星系">星系</h2><p>星系，别称宇宙岛，指数量巨大的恒星系及星际尘埃组成的运行系统。</p><p><code>星系是构成宇宙的基本单位</code>。参考银河系，它是一个包含恒星、气体、宇宙尘埃和暗物质，并且受到重力束缚的大星系。</p><h2 id="星云">星云</h2><p>星云是稀薄的气体或尘埃构成的天体之一。包含了除行星和彗星外的几乎所有延展型天体。</p><p>它们的主要成份是 <code>氢</code>，其次是 <code>氦</code>，还含有一定比例的金属元素和非金属元素。</p><h2 id="星团">星团</h2><p>星团是指恒星数目超过 10 颗以上，并且相互之间存在物理联系（引力作用）的星群。</p><h2 id="类星体">类星体</h2><p><code>类星体</code> 是类似恒星天体的简称，又称为 <code>似星体</code>、 <code>魁霎</code> 或 <code>类星射电源</code>。</p><h2 id="吸积盘">吸积盘</h2><p>吸积盘是一种由弥散物质组成的、围绕中心体转动的结构，它是包围黑洞或中子星的气体盘。</p><h1>修订记录</h1><ul><li><p>2021-01-13</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天文 </tag>
            
            <tag> 天文概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恒星的演化</title>
      <link href="2021/heng-xing-de-yan-hua/"/>
      <url>2021/heng-xing-de-yan-hua/</url>
      
        <content type="html"><![CDATA[<p><strong>恒星演化</strong> 是恒星随着时间的推移而变化的过程。根据 <strong>恒星的质量</strong>，它的寿命可以从质量最大恒星的几百万年到质量最小恒星的万亿年，这是比宇宙年龄还要长许多的时间。</p><h1>诞生</h1><p>恒星演化始于 <strong>巨分子云</strong> 的 <strong>引力坍缩</strong>。当它崩溃时，一个巨大分子云会分裂成越来越小的碎片。在每一个碎片中，坍缩的气体都会释放重力势能转化成热能。随着温度和压力的升高，碎片凝聚成被称为 <strong>原恒星</strong> 的超热的气体旋转球。</p><p>进一步的发展与演化和 <strong>恒星的质量</strong> 有很密切的关连性；在下面，原恒星的质量通常与太阳的质量比较，意味者 <code>1.0M☉</code> (<code>2.0 x 10^30 kg</code>) 作为基本的 <strong>质量单位</strong>。</p><p>恒星形成的初始阶段几乎完全被密集的星云气体和灰尘所掩盖。通常，正在产生恒星的星源会通过在四周光亮的气体云上造成阴影而被观测到，这被称为 <strong>博克球状体</strong>。</p><p>原恒星在分子云中吸积气体和尘埃继续生长，随着其达到的最终质量成为 <strong>主序前星</strong>。</p><p><code>巨分子云</code> 是大量分子气体的集合体，质量介于 104-106 倍太阳质量。据我们所知，在目前的宇宙中，新诞生的恒星完全都是在分子云中被制造出来的，这是它们在适当的低温和高压下的自然结果，因为导致塌缩的引力可以超出抗拒塌缩的内部压强。</p><p><code>引力坍缩</code> 是天体物理学上恒星或星际物质在自身物质的引力作用下向内塌陷的过程，产生这种情况的原因是恒星本身不能提供足够的作用力以平衡自身的引力，从而无法继续维持原有的流体静力学平衡，引力使恒星物质彼此拉近而产生坍缩。在天文学中，恒星形成或衰亡的过程都会经历相应的引力坍缩。</p><p><code>原恒星</code> 是在星际介质中的巨分子云收缩下出现的天体，是恒星形成过程中的早期阶段。</p><h2 id="褐矮星">褐矮星</h2><p>质量少于大约 0.08M☉(1.6x10^29kg) 的原恒星，核心永远不会达到足够高的温度，<strong>无法开始氢的核聚变</strong>，这样的天体被称为褐矮星。发出的光都很黯淡，在数亿年的时间内会逐渐冷却而慢慢消失在可见光中。</p><h2 id="主序带">主序带</h2><p>质量更大的原恒星，核心温度最终将达到 1,000 万 K，启动质子 - 质子链反应，先将氢融合成氘，然后再融合成氦。</p><p>核聚变的开始导致相对较快的达到流体静力平衡，在这种情况下，核心释放的能量维持着较高的气体压力，平衡了衡星物质的重量，阻止了进一步的重力塌陷。因此，恒星迅速演化到稳定的状态，开始了在 <strong>主序带演化的主序星阶段</strong>。</p><p>一颗新恒星将位于 <strong>赫罗图</strong> 主序带上的特定点，主序星的光谱类型取决于恒星的质量。小的、相对较冷、低质量的 <strong>红矮星</strong>，将氢缓慢的融合成氦，并将在主序带上停留数千亿年或更长的时间。而大质量、炙热的 O 型恒星在主序带上停留的时间只有短短的几百万年。中等质量的 <strong>黄矮星</strong>，例如太阳，在主序带上停留的时间大约是 100 亿年。太阳被认为正处于其主序列生命期的中间。</p><h1>熟成</h1><p>最终，核心耗尽了供应的氢，开始离开主序带继续演化下去。没有氢的融合产生向外的压力抵销重力，核心开始收缩直到 <strong>电子简并压力</strong> 变得足以抵抗重力，或核心变得足够热（大约一亿 K）开始 <strong>氦融合</strong>。至于两者中的那一种会发生，取决于恒星的质量。</p><h2 id="低质量恒星">低质量恒星</h2><p>迄今尚未直接观察到低质量恒星在核聚变停止后发生的情形，因为宇宙的年龄只有 138 亿年左右，比低质量恒星停止核聚变之前所要经历的时间还要短。</p><p>目前的天文物理学模型显示，0.1M☉的 <strong>红矮星</strong> 在主序带上停留的时间大约是 6 万亿到12 万亿年，而且温度和亮度都会逐渐增加，并需要数千亿年的时间才会坍缩，慢慢地变成一颗 <strong>白矮星</strong>。</p><p>这样的恒星因为整颗都是对流区，也不会演化出 <strong>简并态</strong> 的氦核予燃烧的氢壳层，所以它不会演化成为红巨星。取而代之的是氢融合会持续进行，直到整颗恒星几乎都是氦。</p><p><strong>质量略大的恒星</strong> 可以演化成为 <strong>红巨星</strong>，但它们的氦核心质量不足以达到氦融合所需要的温度，所以不会到达红巨星分支的顶端。当氢壳燃烧完成后，这些恒星就像后 <strong>渐近巨星分支</strong> 的恒星一样，直接离开红巨星分支，但是以较低的温度和光度成为 <strong>白矮星</strong>。</p><h2 id="中等质量恒星">中等质量恒星</h2><p>质量大约在 0.8-10 M☉的恒星会成为 <strong>红巨星</strong>，它们是 <em>非主序带</em> 的恒星，光谱类型是 K 或 M。</p><p>中等质量恒星演化成的红巨星会经历两个不同阶段的 <em>后主序星</em> 演变：<strong>惰性氦的核</strong>和<strong>氢燃烧壳</strong> 的红巨星分支星，和在氢燃烧壳内有氦燃烧壳和惰性碳组成核心的渐近巨星分支星。在这两个阶段之间，恒星会花一段时间在氦燃烧核心的水平分支上。许多这些氦燃烧的恒星聚集在水平分支的低温端，成为红群聚的巨星。</p><h2 id="大质量恒星">大质量恒星</h2><p>对大质量恒星，在氢壳燃烧开始时，核心的质量就已经够大，在电子简并压力能够取得优势之前，就已经足以点燃氦融合。因此，当这些恒星膨胀和冷却时，它们不会像质量较低的恒星那样明亮；然而，在一开始它们就比质量较低的恒星亮许多，因此还是比质量较小的恒星形成的红巨星明亮。这些恒星不太可能活着成为红超巨星，取而代之的是它们将摧毁自己成为 <strong>II 型超新星</strong>。</p><h1>恒星残骸</h1><p>当一颗恒星耗尽了供应的燃料之后，依据它在生命期的质量，它的残骸可以是下面三种型态之一。</p><h2 id="白矮星和黑矮星">白矮星和黑矮星</h2><p>1 M☉的恒星，演化成白矮星之后的质量大约是 0.6 M☉，体积则压缩至近似地球的大小。因为它向内的重力与电子产生的简并压力达到平衡，因此 <strong>白矮星是很稳定的天体</strong>；这是包立不相容原理导致的结果。 <strong>白矮星的质量越大，体积反而越小</strong>。</p><p>白矮星在刚形成时有着非常高的温度，表面的温度可以超过 100,000K，它的内部则更为炙热。它实在是太热了，因此在它存在的最初 1,000 万年大部分的能量是以微中子的形式失去，但绝大部分的能量是在之后的十亿年中流失。</p><p>在最后，所有的白矮星残骸都将变成冰冷且黑暗，通常被称为 <em>黑矮星</em> 的天体。然而，宇宙现在还不够老，还不足以产生黑矮星这种天体。</p><h2 id="中子星">中子星</h2><p>当恒星的核心崩溃时，压力造成电子捕获，因而使得大多数质子都转变成为中子。这种恒星被称为 <em>中子星</em>，有着 <em>极高的密度</em>，所以它们 <em>非常的小</em>，大小不会超过一个大城市，直径只有 10 公里的数量级。</p><h2 id="黑洞">黑洞</h2><p>如果恒星的残骸有足够大的质量，中子简并压力将不足以阻挡恒星塌缩至史瓦西半径之下时，这个恒星的残骸就会成为黑洞。</p><h1>修订记录</h1><ul><li><p>2021-01-13</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天文 </tag>
            
            <tag> 恒星演化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国古代天文</title>
      <link href="2021/zhong-guo-gu-dai-tian-wen-xue/"/>
      <url>2021/zhong-guo-gu-dai-tian-wen-xue/</url>
      
        <content type="html"><![CDATA[<p>节气歌、丹元子步天歌。</p><h1>节气歌</h1><blockquote><p>春雨惊春清谷天，夏满芒夏暑相连。</p><p>秋处露秋寒霜降，冬雪雪冬小大寒。</p><p>每月两节不变更，最多相差一两天。</p><p>上半年来六廿一，下半年是八廿三。</p></blockquote><h1>四大神兽（四象）</h1><p>四大神兽是现代人对 <code>青龙</code>、<code>白虎</code>、<code>朱雀</code>、<code>玄武</code> 的叫法。实际并非神兽，而是神明。在古代称为 <code>四象</code>、<code>四之天灵</code>。</p><p>四兽融入了五行和方位，以不同颜色代表：</p><blockquote><p>东方青色为木，</p><p>南方赤色为火，</p><p>西方白色为金，</p><p>北方黑色为水，</p><p>中央黄色为土。</p></blockquote><p>另有《淮南子》提到五龙之一的黄龙，也即应龙位居中央，乃四兽之长。</p><p>中国古代把天空里的恒星划分成为 <code>三垣</code> 和 <code>四象</code> 七大星区。所谓的“垣“就是“城墙”的意思。 三垣环绕着北极星呈三角状排列。在 <code>三垣</code> 外围分布着 <code>四象</code>：<code>东苍龙</code>、<code>西白虎</code>、<code>南朱雀</code>、<code>北玄武</code>。</p><h1>丹元子步天歌</h1><h2 id="三垣">三垣</h2><h3 id="紫微宫">紫微宫</h3><blockquote><p>中元北极紫微宫，北极五星在其中，</p><p>大帝之座第二珠，第三之星庶子居，</p><p>第一号曰为太子，四为后宫五天枢，</p><p>左右四星是四辅，天乙太乙当门路。</p><p>左枢右枢夹南门，两面营卫一十五，</p><p>东藩左枢连上宰，少宰上辅次少辅，</p><p>上卫少卫次上丞，后门东边大赞府。</p><p>西藩右枢次少尉，上辅少辅四相视，</p><p>上卫少卫七少丞，以次却向前门数。</p><p>阴德门星两黄聚，尚书以次其位五，</p><p>女史柱史各一户，御女四星五天柱。</p><p>大理两星阴德边，勾陈尾指北极巅，</p><p>六甲六星勾陈前，天皇独在勾陈里，五帝内座后门间。</p><p>华盖并杠十六星，杠作柄象华盖形，</p><p>盖上连连九个星，名曰传舍如连丁，</p><p>垣外左右各六珠，右是内阶左天厨，</p><p>阶前八星名八谷，厨下五个天棓宿。</p><p>天床六星左枢右，内厨两星右枢对，</p><p>文昌斗上半月形，稀疏分明六个星。</p><p>文昌之下曰三师，太尊只向三公明，</p><p>天牢六星太尊边，太阳之守四势前。</p><p>一个宰相太阳侧，更有三公向西偏，</p><p>即是玄戈一星圆，天理四星斗里暗，辅星近着开阳淡。</p><p>北斗之宿七星明，第一主帝名枢精，</p><p>第二第三璇玑是，第四名权第五衡，</p><p>开阳摇光六七名，摇光左三天枪明。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_ziweiyuan.png" alt="紫薇垣"></p><h3 id="太微宫">太微宫</h3><blockquote><p>上元天庭太微宫，昭昭列象布苍穹，</p><p>端门只是门之中，左右执法门西东。</p><p>门左皂衣一谒者，以次即是乌三公，</p><p>三黑九卿公背旁，五黑诸侯卿后行。</p><p>四个门西主轩屏，五帝内座于中正，</p><p>幸臣太子并从官，乌列帝后从东定。</p><p>郎将虎贲居左右，常陈郎位居其后，</p><p>常陈七星不相误，郎位陈东一十五。</p><p>两面宫垣十星布，左右执法是其数，</p><p>宫外明堂布政宫，三个灵台候云雨。</p><p>少微四星西北隅，长垣双双微西居，</p><p>北门西外接三台，与垣相对无兵灾。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_taiweiyuan.png" alt="太薇垣"></p><h3 id="天市宫">天市宫</h3><blockquote><p>下元一宫名天市，两扇垣墻二十二。</p><p>当门六角黑市楼门，左两星是车肆。</p><p>两个宗正四宗人，宗星一双亦依次。</p><p>帛度两星屠肆前，候星还在帝座边。</p><p>帝座一星常光明，四个微茫宦者星。</p><p>以次两星名列肆，斗斛帝前依其次，斗是五星斛是四。</p><p>垣北九个贯索星，索口横者七公成。</p><p>天纪恰似七公形，数着分明多两星。</p><p>纪北三星名女床，此坐还依织女傍。</p><p>三元之像无相侵，二十八宿随其阴，</p><p>水火木土与并金，以次别有五行吟。</p><p>河中河间晋郑周，秦连巴蜀细搜求，</p><p>十一星属十一国，梁楚韩邦在尽头。</p><p>魏赵九河与中山，齐越吴徐东海间，</p><p>燕连南海尽属宋，请君熟记有何难。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_tianshiyuan.png" alt="天市垣"></p><h2 id="二十八宿">二十八宿</h2><h3 id="东方苍龙">东方苍龙</h3><p>1.角宿</p><blockquote><p>南北两星正直悬，中有平道上天田，</p><p>总是黑星两相连，别有一乌名进贤。</p><p>平道右畔独渊然，最上三星周鼎形，</p><p>角下天门左平星，双双横于库楼上。</p><p>库楼十星屈曲明，楼中柱有十五星，</p><p>三三相着如鼎形，其中四星别名衡，南门楼外两星横。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_jiao.png" alt="角"></p><p>2.亢宿</p><blockquote><p>四星恰似弯弓状，大角一星直上明，</p><p>折威七子亢下横，大角左右摄提星，三三相对如鼎形。</p><p>折威下左顿顽星，两个斜安黄色精，</p><p>顽西二星号阳门，色若顿顽直下存。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_kang.png" alt="亢"></p><p>3.氐宿</p><blockquote><p>四星似斗侧量米，天乳氐上黑一星，</p><p>世上不识称无名，一个招摇梗河上，</p><p>梗河横立三星状，帝席三黑河之西。</p><p>亢池六星近摄提，氐下众星骑官出，</p><p>骑官之众二十七，三三相连十欠一。</p><p>阵车氐下骑官次，骑官下三车骑位，</p><p>天辐两星立阵傍，将军阵里振威霜。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_di.png" alt="氐"></p><p>4.房宿</p><blockquote><p>四星直下主明堂，键闭一黄斜向上，</p><p>钩钤两个近其傍，罚有三星植钤上，</p><p>两咸夹罚似房状，房下一星号为日，从官两个日下出。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_fang.png" alt="房"></p><p>5.心宿</p><blockquote><p>三星中央色最深，下有积卒共十二，三三相聚心下是。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_xin.png" alt="心"></p><p>6.尾宿</p><blockquote><p>九星如钩苍龙尾，下头五点号龟星，</p><p>尾上天江四横是，尾东一个名傅说。</p><p>傅说东畔一鱼子，尾西一室是神宫，所以列在后妃中。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_wei.png" alt="尾"></p><p>7.箕宿</p><blockquote><p>四星其形似簸箕，箕下三星名木杵，箕前一黑是糠皮。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_ji.png" alt="箕"></p><h3 id="北方玄武">北方玄武</h3><p>1.斗宿</p><blockquote><p>六星其状似北斗，魁上建星三相对，</p><p>天弁建上三三九，斗下团圆十四星，</p><p>虽然名鳖贯索形，天鸡建背双黑星。</p><p>天籥柄前八黄精，狗国四方鸡下生，</p><p>天渊十星鳖东边，更有两狗斗魁前，</p><p>农家丈人斗下眠，天渊十黄狗色玄。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_dou.png" alt="斗"></p><p>2.牛宿</p><blockquote><p>六星近在河岸头，头上虽然有两角，</p><p>腹下从来欠一脚。牛下九黑是天田，</p><p>田下三三九坎连，牛上直建三河鼓，鼓上三星号织女。</p><p>左旗右旗各九星，河鼓两畔右边明，</p><p>更有四黄名天桴，河鼓之下如连珠。</p><p>罗堰三乌牛东居，渐台四星似口形，</p><p>辇道东足连五丁，辇道渐台在何许？欲得见时近织女。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_niu.png" alt="牛"></p><p>3.女宿</p><blockquote><p>四星如箕主嫁娶，十二诸侯在下陈，</p><p>先从越国向东论，东西两周次二秦。</p><p>雍州南下双雁门，代国向西一晋伸，</p><p>韩魏各一晋北轮，楚之一国魏西屯，</p><p>楚城南畔独燕军，燕西一郡是齐邻，</p><p>齐北两邑平原君，欲知郑在越下存。</p><p>十六黄星细区分，五个离珠女上星，</p><p>败瓜之上瓠瓜生，两个各五瓠瓜明。</p><p>天津九个弹弓形，两星入牛河中横，</p><p>四个奚仲天津上，七个仲侧扶筐星。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_nv.png" alt="女"></p><p>4.虚宿</p><blockquote><p>上下各一如连珠，命禄危非虚上呈，</p><p>虚危之下哭泣星，哭泣双双下垒城，</p><p>天垒团圆十三星，败臼四星城下横，臼西三个离瑜明。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_xu.png" alt="虚"></p><p>5.危宿</p><blockquote><p>三星不直曲为之，危上五黑号人星，</p><p>人畔三四杵臼形，人上七乌号车府，府上天钩九黄晶。</p><p>钩下五鸦字造父，危下四星号坟墓，</p><p>墓下四星斜虚梁，十个天钱梁下黄，</p><p>墓傍两星能盖屋，身着皂衣危下宿。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_wei_n.png" alt="危"></p><p>6.室宿</p><blockquote><p>两星上有离宫出，绕室三双有六星，</p><p>下头六个雷电形，垒壁阵次十二星，</p><p>十二两头大似井，阵下分布羽林军，四十五卒三为群。</p><p>军西众星多难论，仔细历历看区分，</p><p>三粒黄金名鈇钺，一颗珍珠北落门。</p><p>门东八魁九个子，门西一宿天纲是，</p><p>电傍两黑土公吏，腾蛇室上二十二。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_shi_n.png" alt="室"></p><p>7.壁宿</p><blockquote><p>两星下头是霹雳，霹雳五星横着行，</p><p>云雨之次曰四方，壁上天厩十圆黄，</p><p>鈇锧五星羽林傍，土公两黑壁上藏。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_bi_n.png" alt="壁"></p><h3 id="西方白虎">西方白虎</h3><p>1.奎宿</p><blockquote><p>腰细头尖似破鞋，一十六星绕鞋生，</p><p>外屏七乌奎下横，屏下七星天溷明。</p><p>司空右畔土之精，奎上一宿军南门，</p><p>河中六个阁道行，附路一星道傍明。</p><p>五个吐花王良星，良星近上一策名，</p><p>天策天溷与外屏，一十五星皆不明。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_kui_w.png" alt="奎"></p><p>2.娄宿</p><blockquote><p>三星不匀近一头，左更右更乌夹娄，天仓六个娄下头，天庾三星仓东脚，娄上十一将军侯。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_lou_w.png" alt="娄"></p><p>3.胃宿</p><blockquote><p>三星鼎足河之次，天廪胃下斜四星，</p><p>天囷十三如乙形，河中八星名大陵，</p><p>陵北九个天船名，陵中积尸一个星，积水船中一黑精。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_wei_w.png" alt="胃"></p><p>4.昴宿</p><blockquote><p>七星一聚实不少，阿西月东各一星，</p><p>阿下五黄天阴名，阴下六乌刍蒿营。</p><p>营南十六天苑形，河里六星名卷舌，</p><p>舌中黑点天谗星，砺石舌旁斜四丁。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_ang_w.png" alt="昂"></p><p>5.毕宿</p><blockquote><p>恰似丫叉八星出，附耳毕股一星光，</p><p>天街两星毕背旁，天节耳下八乌幢。毕上横列六诸王。</p><p>王下四皂天高星，节下团圆九州城，</p><p>毕口斜对五车口，车有三柱任纵横，</p><p>车中五个天潢精，潢畔咸池三黑星。</p><p>天关一星车脚边，参旗九个参车间，</p><p>旗下直建九斿连，斿下十三乌天园，九斿天园参脚边。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_bi_w.png" alt="毕"></p><p>6.觜宿</p><blockquote><p>三星相近作参蕊，觜上座旗直指天，尊卑之位九相连，司怪曲立座旗边，四鸦大近井钺前。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_zui_w.png" alt="觜"></p><p>7.参宿</p><blockquote><p>总有七星觜相侵，两肩双足三为心，伐有三星足黑深，玉井四星右足阴。屏星两扇井南襟，军井四星屏上吟，左足下四天厕临，厕下一物天屎沉。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_shen_w.png" alt="参"></p><h3 id="南方朱雀">南方朱雀</h3><p>1.井宿</p><blockquote><p>八星横列河中净，一星名钺井边安，</p><p>两河各三南北正，天樽三星井上头。</p><p>樽上横列五诸侯，侯上北河西积水，</p><p>欲觅积薪东畔是，钺下四星名水府，水位东边四星序。</p><p>四渎横列南河里，南河下头是军市，</p><p>军市团圆十三星，中有一个野鸡精。</p><p>孙子丈人市下列，各立两星从东说，</p><p>阙丘两个南河东，邱下一狼光蓬茸。</p><p>左畔九个弯弧弓，一矢拟射顽狼胸，</p><p>有个老人南极中，春秋出入寿无穷。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_jing_s.png" alt="井"></p><p>2.鬼宿</p><blockquote><p>四星册方似木柜，中央白者积尸气，</p><p>鬼上四星是爟位，天狗七星鬼下是，</p><p>外厨六间柳星次，天社六个弧东倚，社东一星名天纪。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_gui_s.png" alt="鬼"></p><p>3.柳宿</p><blockquote><p>八星曲头垂似柳，近上三星号为酒，宴享大酺五星守。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_liu_s.png" alt="柳"></p><p>4.星宿</p><blockquote><p>七星如钩柳下生，星上十七轩辕形，轩辕东头四内平，平下三个名天相，相下稷星横五灵。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_xing_s.png" alt="星"></p><p>5.张宿</p><blockquote><p>六星似轸在星傍，张下只是有天庙，</p><p>十四之星册四方，长垣少微虽向上，</p><p>数星欹在太微傍，太尊一星直上黄。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_zhang_s.png" alt="张"></p><p>6.翼宿</p><blockquote><p>二十二星太难识，上五下五横着行，</p><p>中心六个恰似张，更有六星在何许？</p><p>三三相连张畔附，必若不能分处所，</p><p>更请向前看记取，五个黑星翼下头，欲知名字是东瓯。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_yi_s.png" alt="翼"></p><p>7.轸宿</p><blockquote><p>四星似张翼相近，中央一个长沙子，</p><p>左辖右辖附两星，军门两黄近翼是。</p><p>门下四个土司空，门东七乌青邱子，</p><p>青邱之下名器府，器府之星三十二。</p><p>以上便为太微宫，黄道向上看取是。</p></blockquote><p><img src="/2021/zhong-guo-gu-dai-tian-wen-xue/3_zhen_s.png" alt="轸"></p><h1>修订记录</h1><ul><li><p>2021-01-12</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天文 </tag>
            
            <tag> 星宿 </tag>
            
            <tag> 节气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neovim 安装配置</title>
      <link href="2021/neovim-an-zhuang-pei-zhi/"/>
      <url>2021/neovim-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Win10 neovim 安装和配置。</p><h1>安装</h1><p>neovim 官网托管在 github 上，从<a href="https://github.com/neovim/neovim/releases">这里</a> 下载各平台最新版本。</p><ol><li>下载最新版本，例如 <code>0.4.4 nvim-win64.zip</code>。</li><li>将压缩文件解压到适当的位置，例如 <code>D:\neovim</code>，运行 <code>nvim-qt.exe</code> 即可。</li><li>添加环境变量 Path <code>D:\neovim\bin</code>。</li><li>为了方便，可将 <code>nvim-qt.exe</code> 快捷方式发送到桌面。</li></ol><p><strong>添加右键 “使用 nvim 打开”</strong></p><p>方法一：</p><ol><li>打开注册表 <code>HKEY_CLASSES_ROOT -&gt; * -&gt; shell</code>。</li><li>右键新建项，输入 <code>用 Nvim 编辑</code>。</li><li>在新项中新建 <code>command</code> 项，修改其默认值为 <code>&quot;D:\neovim\bin\nvim-qt.exe&quot; &quot;--fullscreen&quot; &quot;%1&quot;</code></li></ol><p>方法二：</p><ol><li><p>新建注册表脚本 menu.reg。</p><pre class="line-numbers language-register" data-language="register"><code class="language-register">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\*\shell\Edit with nvim]&quot;Icon&quot;&#x3D;&quot;D:\\Neovim\\bin\\nvim-qt.exe,0&quot;@&#x3D;&quot;用 Nvim 编辑&quot;[HKEY_CLASSES_ROOT\*\shell\Edit with nvim\command]@&#x3D;&quot;D:\\Neovim\\bin\\nvim-qt.exe  --fullscreen --no-ext-tabline \&quot;%1\&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双击 menu.reg 导入到注册表中。</p><ul><li>Icon 所指向的路径是 nvim 程序文件 (exe 程序本身就是一个打包格式，里边包含图标信息）。</li><li>command 指向的是路径是右键菜单要执行的程序。</li></ul></li></ol><h1>配置</h1><p>win10 中 vim <strong>用户配置</strong>。</p><table><thead><tr><th style="text-align:center">编辑器</th><th style="text-align:center">配置文件</th><th style="text-align:center">配置文件路径</th><th style="text-align:center">插件路径</th></tr></thead><tbody><tr><td style="text-align:center">vim</td><td style="text-align:center">_vimrc 或 _gvimrc</td><td style="text-align:center">~/_vimrc 或 _gvimrc</td><td style="text-align:center">~/.vim 或 ~/vimfiles，可修改</td></tr><tr><td style="text-align:center">neovim</td><td style="text-align:center">init.vim 或 ginit.vim</td><td style="text-align:center">~/AppData/Local/nvim</td><td style="text-align:center">由用户指定</td></tr></tbody></table><p>win10 中 vim <strong>全局配置</strong>。</p><table><thead><tr><th style="text-align:center">编辑器</th><th style="text-align:center">配置文件</th><th style="text-align:center">$VIM</th><th style="text-align:center">配置文件路径</th><th style="text-align:center">插件路径</th></tr></thead><tbody><tr><td style="text-align:center">vim</td><td style="text-align:center">_vimrc 或 _gvimrc</td><td style="text-align:center">安装位置</td><td style="text-align:center">$VIM/_vimrc 或 _gvimrc</td><td style="text-align:center">$VIM/vimfiles</td></tr><tr><td style="text-align:center">neovim</td><td style="text-align:center">sysinit.vim</td><td style="text-align:center">安装位置 /share/nvim</td><td style="text-align:center">$VIM/sysinit.vim</td><td style="text-align:center">由用户指定</td></tr></tbody></table><p><strong>PS：</strong> 不理解 nvim 为啥要把 init.vim 放在 C 盘隐藏文件中，不方便且乱。</p><h1>配置文件</h1><p>可以直接使用 vimrc 的配置。冲突的地方用 <code>if has('nvim')</code> 来适配 nvim。</p><h1>修订记录</h1><ul><li><p>2021-01-12</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 android studio 安装配置</title>
      <link href="2021/win10-android-studio-pei-zhi/"/>
      <url>2021/win10-android-studio-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>本文另外介绍一种搭建 android SDK 的方法，通过安装和配置 Android studio 4.1 实现。AS 内部集成了 JDK 和 JRE。</p><h1>Android Studio 安装</h1><p>网速差且没 VPN，基本上杜绝了 AS 的下载。以下是下载地址：</p><ul><li><a href="https://developer.android.google.cn/studio">https://developer.android.google.cn/studio</a></li><li><a href="https://www.androiddevtools.cn/">https://www.androiddevtools.cn/</a></li><li><a href="http://www.android-studio.org/">http://www.android-studio.org/</a></li></ul><p>还可以在 <a href="https://d.serctl.com/">https://d.serctl.com/</a> 搜索合适的 AS 并下载。</p><p>安装 AS 时使用 <code>Custom</code> 可自定义 JRE 和 SDK 的安装位置。</p><p>若第一次运行时报错 <code>Unable to access Android SDK add-on list</code>，修改 host 文件<code>C:\Windows\System32\drivers\etc\hosts</code>。</p><p>在末尾增加 <code>180.163.151.33 dl.google.com</code></p><pre class="line-numbers language-none"><code class="language-none">IP 获取用 http:&#x2F;&#x2F;ping.chinaz.com&#x2F;dl.google.com，输入 dl.google.com然后，点 ping 检测，选最快的那个 IP 即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启，按照指示选择安装 SDK 位置即可。</p><h2 id="安装-Android-SDK">安装 Android SDK</h2><p>在安装 Android Studio 时已经安装好了，但也可以通过 <code>Settings-&gt;Apperance &amp; Behavior-&gt;System Settings-&gt;Android SDK</code> 安装。</p><p>点击 <code>Android SDK Location Edit</code> 选择安装 SDK 的位置，若无法选择则必须解决第一次运行时的错误。</p><h2 id="安装-SDK-PlatForms">安装 SDK PlatForms</h2><p><code>Android SDK -&gt; SDK Platforms</code> 点击需要安装的平台。</p><h2 id="安装-SDK-Tools">安装 SDK Tools</h2><p><code>Android SDK -&gt; SDK Tools</code> 选择 <code>Android SDK Build-Tools</code>，<code>Android Emulator</code>，<code>Android SDK Platform-Tools</code></p><h2 id="Andorid-SDK">Andorid SDK</h2><p>全部下载完成后，打开 Android SDK 的安装目录，隐藏文件夹可以暂时忽略，主要看一下几个文件夹 <code>build-tools</code>、<code>emulator</code>、<code>platforms</code>、<code>platforms-tools</code></p><pre class="line-numbers language-none"><code class="language-none">build-tools     主要是 Android 开发中所需要的工具emulator        主要是用于管理模拟器platforms       存放下载的所有的 sdk platforms 包platforms-tools 主要用我们常用的 adb.exe 等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>Android studio 配置</h1><h2 id="系统变量配置">系统变量配置</h2><p>通过配置系统变量，以便直接在命令行操作 Android SDK 包中的各种工具。</p><pre class="line-numbers language-none"><code class="language-none">1. 新增变量 ANDROID_HOME&#x3D;D:\Android\sdk2. 更新 PATH 变量，新增   %ANDROID_HOME%\build-tools\30.0.2   %ANDROID_HOME%\emulator   %ANDROID_HOME%\platform-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件">配置文件</h2><p>AS4.1 的配置文件路径 <code>C:\Users\yourname\AppData\Roaming\Google\AndroidStudio4.1</code>。</p><p>由于配置文件在 C 盘，防止占用太多 C 盘空间，需要将配置文件移到合适位置。</p><p>打开 AS 安装目录，在 <code>bin</code> 目录下找到文件 <code>idea.properties</code>，修改<code>idea.config.path</code> 和 <code>idea.system.path</code> 变量</p><pre class="line-numbers language-none"><code class="language-none"># Uncomment this option if you want to customize path to IDE config folder. Make sure you&#39;re using forward slashes.#---------------------------------------------------------------------idea.config.path&#x3D;E:&#x2F;AS-Proj&#x2F;.AndroidStudio4.1&#x2F;config    # 我的配置#---------------------------------------------------------------------# Uncomment this option if you want to customize path to IDE system folder. Make sure you&#39;re using forward slashes.#---------------------------------------------------------------------idea.system.path&#x3D;E:&#x2F;AS-Proj&#x2F;.AndroidStudio4.1&#x2F;system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AVD-管理">AVD 管理</h2><p>默认 android 模拟器在 C 盘，防止占用太多 C 盘空间，需要将其移到合适位置。</p><p>AVD 默认路径 <code>C:\Users\naruto\.android\avd</code></p><h3 id="方案一">方案一</h3><ol><li>将 C 盘 avd 目录内容移动到自定义目录 D:\Android\AndroidAVD\avd，打开并修改相应的 ini 配置文件，如 Pixel_4_XL_Edited_API_29.ini。</li><li>修改 path 变量为 path=D:\Android\AndroidAVD\avd\Pixel_4_XL_Edited_API_29.avd，仅仅将原来的路径修改为我们自定义路径。</li><li>防止 AS 无法定位到新路径，将 ini 配置文件拷贝一份至 C 盘 avd。</li></ol><h3 id="方案二">方案二</h3><ol><li>增加环境变量 ANDROID_SDK_HOME</li><li>值为 D:\Android\AndroidAVD</li><li>则.android 配置文件夹在 AndroidAVD 目录下创建。</li></ol><h2 id="Gradle-安装">Gradle 安装</h2><p>类似于 make 工具，需要 jdk8 支持。AS 已安装故无需再安装。</p><p><code>gradle 地址</code> <a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a></p><p>安装 gradle 到自定义目录，配置环境变量</p><ol><li>新增变量 GRADLE_HOME=D:\Android\gradle\gradle-6.5</li><li>更新 PATH 变量，新增 %GRADLE_HOME%\bin</li></ol><p>防止每次启动 AS 时从网络下载 Gradle，可以指定使用自己安装的 gradle。<code>Settings-&gt;构建、执行、部署 -&gt;Gradle-&gt;使用来自此位置的 Gradle</code> 选择指定位置。</p><h3 id="gradle-全局配置">gradle 全局配置</h3><p>gradle 全局配置默认路径 <code>C:\Users\yourname\.gradle</code></p><p>可以在 <code>Settings-&gt;构建、执行、部署 -&gt;Gradle-&gt;常规设置 -&gt;Gradle 用户主目录</code> 设置。例如 <code>E:/AS-Proj/.gradle</code></p><h1>插件</h1><ol><li><code>Chinese (Simplified) Language Pack EAP</code>   汉化</li><li><code>IdeaVim</code>  VIM 模式</li></ol><h1>修订记录</h1><ul><li><p>2021-01-12</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD texlive 安装</title>
      <link href="2021/freebsd-an-zhuang-texlive/"/>
      <url>2021/freebsd-an-zhuang-texlive/</url>
      
        <content type="html"><![CDATA[<p>在 freeBSD 12.0 系统上安装 texlive 软件。</p><h1>pkg 安装 texlive</h1><ol><li>pkg 方法一</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg <span class="token function">install</span> texlive-base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>pkg 方法二</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg <span class="token function">install</span> texlive-texmf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>pkg 方法三</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg <span class="token function">install</span> texlive-full<span class="token comment"># 此方案只能安装 2015 版本（截止 2019 年）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="生成-pdf-指令">生成 pdf 指令</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">xelatex xxx.tex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试使用 2019 版本的 texlive 编写的 tex 文件，缺少字体，安装字体。</p><ol><li>安装 xorg 框架</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg <span class="token function">install</span> xorg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>生成 xorg.conf 配置文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Xorg -configure<span class="token comment"># 生成在 root 根目录生成 xorg.conf.new，拷贝到 /etc/X11/xorg.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>依然缺少字体，而且还有很多不识别和定义命令。太麻烦，放弃了！！！</p><h1>源码安装</h1><ol><li>安装 perl</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fetch http://www.perl.com/CPAN/src/stable.tar.gz<span class="token function">tar</span> -zxvf stable.tar.gz./Configure -des -Dprefix<span class="token operator">=</span><span class="token environment constant">$HOME</span>/localperl<span class="token function">make</span> <span class="token builtin class-name">test</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>安装 texlive</li></ol><p>下载 install-tl-unx.tar.gz。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -c http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装 texlive</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./install-tl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>配置环境变量 PATH</li></ol><p>参考 <a href="http://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf">texlive-zh-cn.pdf</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /usr/local/texlive/2020/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf<span class="token function">sudo</span> fc-cache -fsv<span class="token comment"># 在.bashrc 和.profile 加入环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MANPATH</span><span class="token operator">=</span>/usr/local/texlive/2020/texmf-dist/doc/man:<span class="token variable">$&#123;MANPATH&#125;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">INFOPATH</span><span class="token operator">=</span>/usr/local/texlive/2020/texmf-dist/doc/info:<span class="token variable">$&#123;INFOPATH&#125;</span><span class="token builtin class-name">export</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/texlive/2020/bin/x86_64-linux:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成-pdf-指令-2">生成 pdf 指令</h2><pre class="line-numbers language-none"><code class="language-none">xelatex -synctex&#x3D;1 -interaction&#x3D;nonstopmode xxx.tex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>总结</h1><p>不要依赖 ports 和 packages，可以从源码安装软件。</p><h1>修订记录</h1><ul><li><p>2021-01-12</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TexLive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> texlive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 操作与配置</title>
      <link href="2021/vim-cao-zuo-yu-pei-zhi/"/>
      <url>2021/vim-cao-zuo-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>VIM 基本操作。</p><h1>技巧</h1><p><strong>实时加密文本</strong></p><pre class="line-numbers language-none"><code class="language-none">加密指令： ggVGg?g? 使用 ROT13 对选择文本进行编码（对中文无效）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>文本加密解密</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 加密指令:X输入密码:wq 保存退出2. 解密指令:X输入密码为空（即回车）:w 保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>80 列高亮及换行</strong></p><pre class="line-numbers language-none"><code class="language-none">set colorcolumn&#x3D;80    &quot;高亮显示 80 列set textwidth&#x3D;80      &quot;80 列自动换行set formatoptions+&#x3D;mM &quot;针对中文不能自动换行对已存在的文本应用自动换行只需要选中它们，然后按 &#96;gq&#96; 即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>统计汉字</strong></p><pre class="line-numbers language-none"><code class="language-none">&quot; 包括标点符号:% s&#x2F;[^\x00-\xff]&#x2F;&#x2F;gn&quot; 不包括标点符号:s&#x2F;[\u4E00-\u9FCC]&#x2F;&#x2F;n  &quot; 统计选中区域:%s&#x2F;[\u4E00-\u9FCC]&#x2F;&#x2F;gn  &quot; 统计全文&quot; 显示字数统计，将汉字、标点、空格、英文字母都看做一个字g CTRL-G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取消高亮</strong></p><pre class="line-numbers language-none"><code class="language-none">:noh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>排序</strong></p><pre class="line-numbers language-none"><code class="language-none">:sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>折叠</h1><pre class="line-numbers language-none"><code class="language-none">折叠分为手动折叠和自动折叠手动折叠和 foldlevel 无关自动折叠受 foldlevel 约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>foldenable</li></ol><pre class="line-numbers language-none"><code class="language-none">是否打开折叠功能（即包括手动折叠，也包括自动折叠）zi 相当于该选项的 toggle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>foldlevel</li></ol><pre class="line-numbers language-none"><code class="language-none">用于自动折叠（层数高于 foldlevel 的将被自动折叠）zr 和 zm 相当于加减 foldlevelzR 和 zM 相当于设置 foldlevel 最大最小值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建折叠</li></ol><pre class="line-numbers language-none"><code class="language-none">选中，然后 zf （visual）zf10G （motion）10zf+ （count）zf%   （大括号匹配）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>删除折叠</li></ol><pre class="line-numbers language-none"><code class="language-none">zdzDzE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>保存和加载折叠</li></ol><pre class="line-numbers language-none"><code class="language-none">mkviewloadview<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>打开和关闭折叠</li></ol><pre class="line-numbers language-none"><code class="language-none">zc（zC）zo（zO）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>字体 guifont 设置</h1><p>从网上下载相关字体，通过配置 guifont 和 guifontwide 来实现。问题在于如何正确的设置字体的名字。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 通过 GUI 界面选择已安装字体:set guifont&#x3D;*&lt;CR&gt;&quot; 查看选择好的字体配置:set guifont?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把 guifont 设置内容写入 vimrc 即可。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">set guifont&#x3D;DaddyTimeMono_Nerd_Font_Mono:h10:cANSI:qDRAFT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>状态行 Statusline</h1><p><strong>定制状态行</strong></p><p>vim 默认的状态行，左侧显示当前打开的文件名，右侧显示当前所处的行列位置。</p><p>可以用命令 <code>:set statusline=format</code> 来定义状态行。</p><ul><li><code>format</code> 选项参数以 <code>%</code> 开始，中间可以夹杂普通文本。</li><li>内容默认右对齐，若想左对齐，可在 <code>%</code> 后加上 <code>-</code>。</li><li>数字内容是忽略开头 0 显示的，若要显示，可在 <code>%</code> 后加一个 <code>0</code>。</li><li>单个百分号为 <code>%%</code>。</li><li>若选项以 <code>%!</code> 开始，则用作表达式，表达式的结果作为选项值。</li><li>最多可以给出 80 个选项。</li></ul><p><img src="/2021/vim-cao-zuo-yu-pei-zhi/vim-statusline-parameters.png" alt="参数列表"></p><p><strong>显示/隐藏状态行</strong></p><p>vim 在默认情况下是不显示状态行的，而仅显示命令缓冲区等极少的信息。</p><p>通过命令 <code>:set laststatus=2</code> 将状态行显示在窗口底部倒数第二行。</p><p>也可以通过命令 <code>:set laststatus=0</code> 移除状态行。</p><p>以上所有命令去掉冒号，写入配置文件即可永久生效。</p><h1>编码设置</h1><ul><li>显示文件编码格式 <code>:set fileencoding</code>。</li><li>转换文件编码格式 <code>:set fileencoding=utf-8</code>。</li><li>查看文件格式 <code>:set fileformat?</code>。</li><li>设置文件格式 <code>:set fileformat=unix</code>。</li></ul><ol><li><p>以指定的编码格式打开文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> file.txt -c <span class="token string">"e ++enc=gbk"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解决乱码问题</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 在 .vimrc 中配置如下内容，可以让 vim 按照 fileencodings 提供的编码列表自动&quot; 识别文件编码。若找不到合适的编码，则用 latin-1(ASCII) 编码打开。set encoding&#x3D;utf-8set termencoding&#x3D;utf-8set fileencoding&#x3D;utf-8set fileencodings&#x3D;utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1>修订记录</h1><ul><li><p>2021-01-12</p><p>从其它网站迁移。</p></li><li><p>2021-01-20</p><p>增加编码设置。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim win10 源码安装</title>
      <link href="2021/vim-an-zhuang-pei-zhi/"/>
      <url>2021/vim-an-zhuang-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>win10 msys2 vim 源码安装。</p><p><a href="https://github.com/yianwillis/vimcdoc/releases">参考手册</a>。</p><h1>MSYS2</h1><ol><li><p>在 <a href="https://www.msys2.org/">官网</a> 下载 MSYS2 并安装安装到合适位置。</p></li><li><p>添加 mingw64/bin 到环境变量。</p></li><li><p>修改软件源。</p><p>软件源文件 <code>/etc/pacman.d/mirrorlist.mingw32</code></p><p>注释掉所有源，添加</p><p><code>Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686</code></p><p>软件源文件 <code>/etc/pacman.d/mirrorlist.mingw64</code></p><p>注释掉所有源，添加</p><p><code>Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64</code></p><p>软件源文件 <code>/etc/pacman.d/mirrorlist.msys</code></p><p>注释掉所有源，添加</p><p><code>Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch</code></p></li><li><p>更新软件源</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -Syu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>安装编译环境</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gdb mingw-w64-x86_64-make <span class="token function">git</span> diffutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>验证安装</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>Python 2.7</h1><p>下载 Python 并安装到合适位置，添加环境变量。</p><h1>编译 vim</h1><ol><li>下载 vim 源码到合适位置</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/vim/vim.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改编译配置 <code>custom.mak</code></li></ol><p>跳转至 vim 源码 src 目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> Make_cyg_ming.mak custom.mak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-make" data-language="make"><code class="language-make">GUI&#x3D;yes         #vim 带图形界面ARCH&#x3D;x86-64     #指定为 64 位系统编译<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到 Python 选项，本次编译使用 27 版本。</p><ol start="3"><li>编译安装</li></ol><p>在 src 目录下编译。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mingw32-make.exe -f custom.mak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若编译失败，想重新编译，可先 <code>clean</code> 重新执行以上命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mingw32-make.exe -f custom.mak clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>编译成功后打包</li></ol><p>在 <code>src</code> 父目录创建打包文件 <code>pkg.sh</code> 内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p vim-x64/vim81<span class="token function">cp</span> -a runtime/* vim-x64/vim81<span class="token function">cp</span> -a src/*.exe vim-x64/vim81<span class="token function">cp</span> -a src/GvimExt/gvimext.dll vim-x64/vim81<span class="token function">cp</span> -a src/xxd/xxd.exe vim-x64/vim81<span class="token function">cp</span> -a vimtutor.bat vim-x64/vim81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>vim-x64/vim81 即为编译好的 vim 版本</li></ol><p>将 vim81 移到合适的位置，以管理员的权限执行 <code>install.exe</code> 文件。</p><p>根据提示选择编号，选择 d 进行安装。</p><h1>添加右键 <code>用 vim 打开</code></h1><ol><li>打开注册表：计算机 <code>\HKEY_CLASSES_ROOT\*\shell\</code>。</li><li>新建项，命名为 <code>用 VIM 编辑</code>。</li><li>在该项右键新建字符串值 <code>Icon</code>，内容为 <code>&quot;/path/to/gvim.exe,0&quot;</code>。</li><li>继续在该项右键新建项 <code>Command</code>，修改默认值为 <code>/path/to/gvim.exe -p --remote-tab-silent &quot;%1&quot;</code>。</li></ol><h1>修订记录</h1><ul><li><p>2021-01-11</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket 配 CDN 的 VPN 搭建</title>
      <link href="2021/websocket-pei-cdn-de-vpn-da-jian/"/>
      <url>2021/websocket-pei-cdn-de-vpn-da-jian/</url>
      
        <content type="html"><![CDATA[<p>为进一步增强安全性，VPN 采用 websocket + tls + web + cdn 的策略。</p><h1>安装 caddy v2</h1><p>登录服务器，运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb [trusted=yes] https://apt.fury.io/caddy/ /"</span> <span class="token punctuation">\</span>    <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/apt/sources.list.d/caddy-fury.list<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> caddy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件位置 <em>/etc/caddy/Caddyfile</em>。</p><p>https/ssl 证书位置 <em>/var/lib/caddy</em>。</p><p><strong>Caddy v1 和 v2 的语法不同</strong>。</p><h1>配置</h1><h2 id="cloudflare-配置">cloudflare 配置</h2><p><em>添加站点</em> -&gt; 选择 <em>Free</em> 计划 -&gt; <em>添加记录</em></p><table><thead><tr><th>类型</th><th>名称</th><th>内容</th><th>TTL</th><th>代理状态</th></tr></thead><tbody><tr><td>A</td><td>刚刚申请的域名</td><td>服务器地址</td><td>自动</td><td>仅限 DNS</td></tr></tbody></table><p>继续，cloudflare 要求 <em>更改您的名称服务器</em>，将两个 nameserver 添加到 freenom 自定义 nameserver 完成。</p><p>稍等片刻新申请的域名即可使用，在 <em>SSL/TLS</em> 将模式设置为 <em>完全</em>。</p><h2 id="freenom-域名配置">freenom 域名配置</h2><p>登录 <a href="http://www.freenom.com/zh/index.html">freenom</a> 网站。</p><p><em>gServices</em> -&gt; <em>My Domains</em> -&gt; <em>Manage Domain</em> -&gt; <em>Management Tools</em> -&gt; <em>Nameservers</em></p><p>选择 <em>Use custom nameservers (enter below)</em>。</p><p>添加从 cloudflare 新申请的域名获取的名称服务器（在 <em>DNS</em> 选项）。</p><h2 id="caddy-配置">caddy 配置</h2><pre class="line-numbers language-caddy" data-language="caddy"><code class="language-caddy">&#123;    email your@email&#125;your.domain &#123;    log &#123;        output file &#x2F;etc&#x2F;caddy&#x2F;caddy.log    &#125;    tls &#123;        protocols tls1.2 tls1.3        ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256        curves x25519    &#125;    @v2ray_websocket &#123;        path &#x2F;ray                                       &#x2F;&#x2F; 证书位置要和 v2ray 客户端位置保持一致        header Connection *Upgrade*        header Upgrade websocket    &#125;    reverse_proxy @v2ray_websocket localhost:10250      &#x2F;&#x2F; 端口和 v2ray 服务端 inbound 保持一致&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 caddy 服务 <code>systemctl restart caddy</code>。</p><h2 id="v2fly-服务端配置">v2fly 服务端配置</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"domainStrategy"</span><span class="token operator">:</span> <span class="token string">"AsIs"</span><span class="token punctuation">,</span>        <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"geoip:private"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"blocked"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">10250</span><span class="token punctuation">,</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"clients"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>                        <span class="token property">"alterId"</span><span class="token operator">:</span> <span class="token number">64</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>                <span class="token property">"wsSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                     <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/ray"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"blocked"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 v2ray 服务 <code>systemctl restart v2ray</code>。</p><h2 id="v2fly-客户端配置">v2fly 客户端配置</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"proxy"</span><span class="token punctuation">,</span>    <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"socks"</span><span class="token punctuation">,</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"noauth"</span><span class="token punctuation">,</span>      <span class="token property">"udp"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"sniffing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"destOverride"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"tls"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"vnext"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"alterId"</span><span class="token operator">:</span> <span class="token number">64</span><span class="token punctuation">,</span>                                <span class="token property">"security"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"xxx"</span>                 <span class="token comment">// 和服务端保持一致</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>                        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"new domain"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>                <span class="token property">"security"</span><span class="token operator">:</span> <span class="token string">"tls"</span><span class="token punctuation">,</span>                <span class="token property">"wsSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/ray"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"adblock"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"domainStrategy"</span><span class="token operator">:</span> <span class="token string">"IPOnDemand"</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"tanx.com"</span><span class="token punctuation">,</span>          <span class="token string">"googeadsserving.cn"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"adblock"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"geoip:private"</span><span class="token punctuation">,</span>          <span class="token string">"geoip:cn"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置并重启 caddy 和 v2fly，登录 cloudflare，配置新域名 DNS 记录，将代理状态由 *仅限 DNS* 切换为 <em>已代理</em>。</p><h1>修订记录</h1><ul><li><p>2021-01-11</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> caddy </tag>
            
            <tag> vpn </tag>
            
            <tag> cdn </tag>
            
            <tag> v2fly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单模型 VPN 搭建</title>
      <link href="2021/jian-dan-mo-xing-de-vpn-da-jian/"/>
      <url>2021/jian-dan-mo-xing-de-vpn-da-jian/</url>
      
        <content type="html"><![CDATA[<p>采用 <em>v2ray/v2fly</em> 工具搭建 VPN 服务器。</p><h1>v2ray 安装及配置</h1><h2 id="服务端">服务端</h2><ol><li>安装 <a href="https://github.com/v2fly/fhs-install-v2ray">v2ray/v2fly</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装必备工具</span><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span><span class="token comment"># 下载 v2ray/v2fly</span><span class="token function">curl</span> -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh<span class="token comment"># 安装</span><span class="token function">bash</span> install-release.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>配置文件</li></ol><pre class="line-numbers language-template" data-language="template"><code class="language-template">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;v2ray&#x2F;config.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><a href="https://github.com/v2fly/v2ray-examples">配置模板</a></li></ol><pre class="line-numbers language-template" data-language="template"><code class="language-template">https:&#x2F;&#x2F;github.com&#x2F;v2fly&#x2F;v2ray-examples<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>配置内容</li></ol><p>注意 json 格式。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"domainStrategy"</span><span class="token operator">:</span><span class="token string">"AsIs"</span><span class="token punctuation">,</span>        <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"geoip:private"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"blocked"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"udp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"clients"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"92be9285-52eb-4666-bb92-eae0e608ca8a"</span><span class="token punctuation">,</span>                        <span class="token property">"alterId"</span><span class="token operator">:</span> <span class="token number">4</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"mkcp"</span><span class="token punctuation">,</span>                <span class="token property">"kcpSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"uplinkCapacity"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                    <span class="token property">"downlinkCapacity"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                    <span class="token property">"congestion"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"header"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"none"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"blocked"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>启动 v2ray/v2fly</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> v2raysystemctl start v2ray<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="客户端">客户端</h2><ol><li>客户端地址</li></ol><ul><li><p><a href="https://github.com/v2fly/v2ray-core/releases"> <code>v2ray-core</code> </a> 各个 PC 平台不带图形界面，通过配置文件 <code>config.json</code> 使用。</p></li><li><p><a href="https://github.com/2dust/v2rayNG/releases"> <code>v2rayNG</code> </a> Android 平台可使用。</p></li><li><p><a href="https://github.com/2dust/v2rayN/releases"> <code>v2rayN</code> </a> Windows 平台带图形界面。</p></li></ul><ol start="2"><li>配置内容</li></ol><p>注意 json 格式，双斜杠注释内容在 config 配置文件中包括双斜杠在内都要去除。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">2080</span><span class="token punctuation">,</span>                       <span class="token comment">// 须和浏览器代理保持一致</span>    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>              <span class="token comment">// 同上</span>    <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"proxy"</span><span class="token punctuation">,</span>    <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"socks"</span><span class="token punctuation">,</span>                <span class="token comment">// 同上 socks v5</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"noauth"</span><span class="token punctuation">,</span>      <span class="token property">"udp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"sniffing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"destOverride"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"tls"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"vnext"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"alterId"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token property">"security"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>                                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"92be9285-52eb-4666-bb92-eae0e608ca8a"</span> <span class="token comment">// 需要和服务器端 inbounds 的 id 保持一致</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>                                       <span class="token comment">// 同上</span>                        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"xxx.xxx.xx.xxx"</span>                         <span class="token comment">// 服务器地址</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"mkcp"</span><span class="token punctuation">,</span>                                          <span class="token comment">// 最简单方式直接设置为 tcp，需要和服务端 inbounds 保持一致</span>                <span class="token property">"kcpSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"uplinkCapacity"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                    <span class="token property">"downlinkCapacity"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                    <span class="token property">"congestion"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"header"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"none"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"blackhole"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"adblock"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"routing"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                                          <span class="token comment">// 路由</span>    <span class="token property">"domainStrategy"</span><span class="token operator">:</span> <span class="token string">"IPOnDemand"</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"tanx.com"</span><span class="token punctuation">,</span>          <span class="token string">"googeadsserving.cn"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"adblock"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"geoip:private"</span><span class="token punctuation">,</span>          <span class="token string">"geoip:cn"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"field"</span><span class="token punctuation">,</span>        <span class="token property">"domain"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"geosite:cn"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"outboundTag"</span><span class="token operator">:</span> <span class="token string">"direct"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="v2rayNG-设置">v2rayNG 设置</h3><p>在右上角 <em>+</em> 选择 <em>手动输入 [Vmess]</em></p><ul><li><p>别名 <strong>v2ray</strong></p></li><li><p>地址 <strong>服务器 IP</strong></p></li><li><p>端口 <strong>和服务器保持一致</strong></p></li><li><p>用户 ID <strong>和服务器的用户 ID 保持一致</strong></p></li><li><p>额外 ID(alterID) <strong>和服务器保持一致</strong></p></li><li><p>加密方式 <strong>none</strong></p></li><li><p>底层传输方式 <strong>tcp</strong></p></li><li><p>伪装类型 <strong>none</strong></p></li><li><p>跳过证书验证 <strong>true</strong></p></li></ul><h1>问题</h1><ol><li><p>failed to process outbound traffic</p><pre class="line-numbers language-template" data-language="template"><code class="language-template">感觉造成这个问题的原因很多，烦不胜烦。1. 网络差。2. Ubuntu 服务器 MTU 包莫名丢失，调整 MTU 值为 1280 以下。   # vi &#x2F;etc&#x2F;network&#x2F;interfaces   #增加如下值   mtu 9000   #保存后，重启网络生效   # &#x2F;etc&#x2F;init.d&#x2F;networking restart3. 服务器和本地时间不同步，同步二者时间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2fly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周易</title>
      <link href="2021/zhou-yi-bi-ji/"/>
      <url>2021/zhou-yi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>易、八卦、六十四卦、五行、干支。</p><h1>易</h1><h2 id="三易">三易</h2><p>易有三易，一曰《连山易》，二曰《归藏易》，三曰《周易》。</p><p>《连山易》是神农时代的《易》，从 <em>艮卦</em> 开始；《归藏易》是黄帝时代的《易》，从<em>坤卦</em> 开始；《周易》则从 <em>乾卦</em> 开始。其中前两者只在江湖上传承了，如医药、堪舆及道家这一方面的东西。</p><p>《周易》名之由来，其一，周文王拘在羑里推演周易，是周代的易，故称《周易》；其二，<em>周</em> 表示周详，易可以演绎万事万物，所以称为《周易》。</p><h2 id="三原则">三原则</h2><ol><li>变易。万事万物没有什么东西是不变的，时间，空间，乃至思想都无时无刻不在变化</li><li>简易。把变化复杂的事物精简成八卦，做到乾坤在手。</li><li>不易。虽然万事万物都在变化，但衍生出万事万物的根本是不变化的。</li></ol><h2 id="三法则：理、象、数">三法则：理、象、数</h2><p>宇宙间万事万物既有它的理，也必有它的象；反过来说，宇宙间的任何一个现象，也一定有它的理，同时每个现象，又一定有它的数。</p><h2 id="研究方法">研究方法</h2><blockquote><p>玩索而有得。        ——孔子</p></blockquote><h1>卦</h1><p>卦者挂也。</p><h2 id="八卦口诀">八卦口诀</h2><blockquote><p>乾三连。坤六断。</p><p>震仰盂。艮覆碗。</p><p>离中虚。坎中满。</p><p>兑上缺。巽下断。</p></blockquote><h2 id="八卦方位图">八卦方位图</h2><p>左东右西，上南下北。</p><p><img src="/2021/zhou-yi-bi-ji/%E6%96%B9%E4%BD%8D%E5%9B%BE.png" alt="八卦方位图"></p><h2 id="先天八卦（伏羲八卦方位图）">先天八卦（伏羲八卦方位图）</h2><p>八卦的卦爻是自下向上画的，由内而外。</p><p><img src="/2021/zhou-yi-bi-ji/%E5%85%88%E5%A4%A9%E5%85%AB%E5%8D%A6%E5%9B%BE.png" alt="先天八卦图"></p><blockquote><p>先天八卦卦序：</p><p>乾一、兑二、离三、震四，巽五、坎六、艮七、坤八。</p></blockquote><blockquote><p>《说卦传》：</p><p>天地定位，山泽通气，雷泽相薄，水火不相射。八卦相错。</p></blockquote><h2 id="后天八卦（文王八卦方位图）">后天八卦（文王八卦方位图）</h2><p><img src="/2021/zhou-yi-bi-ji/%E5%90%8E%E5%A4%A9%E5%85%AB%E5%8D%A6%E5%9B%BE%E5%8F%8A%E6%96%B9%E5%9B%BE.png" alt="后天八卦图及方图"></p><blockquote><p>后天八卦卦序歌：</p><p>一数坎兮二数坤，三震四巽数中分，</p><p>五寄中宫六乾是，七兑八艮九离门。</p></blockquote><blockquote><p>《说卦传》</p><p>帝出乎震。齐乎巽。相见乎离。</p><p>致役乎坤。说言乎兑。战乎乾。</p><p>劳乎坎。成言乎艮。</p></blockquote><h2 id="六十四卦卦序歌">六十四卦卦序歌</h2><blockquote><p>乾坤屯蒙需讼师，比小畜兮履泰否。</p><p>同人大有谦豫随，蛊临观兮噬嗑贲。</p><p>剥复无妄大畜颐，大过坎离三十备。</p><p>咸恒遁兮及大壮，晋与明夷家人睽。</p><p>蹇解损益夬姤萃，升困井革鼎震继。</p><p>艮渐归妹丰旅巽，兑涣节兮中孚至。</p><p>小过既济兼未济，是为下经三十四。</p></blockquote><h2 id="分宫卦象次序">分宫卦象次序</h2><p>乾坎艮震为阳四宫，巽离坤兑为阴四宫，每宫阴阳八卦。</p><table><thead><tr><th>乾为天</th><th>天风姤</th><th>天山遁</th><th>天地否</th><th>风地观</th><th>山地剥</th><th>火地晋</th><th>火天大有</th></tr></thead><tbody><tr><td>坎为水</td><td>水泽节</td><td>水雷屯</td><td>水火既济</td><td>泽火革</td><td>雷火丰</td><td>地火明夷</td><td>地水师</td></tr><tr><td>艮为山</td><td>山火贲</td><td>山天大畜</td><td>山泽损</td><td>火泽睽</td><td>天泽履</td><td>风泽中孚</td><td>风山渐</td></tr><tr><td>震为雷</td><td>雷地豫</td><td>雷水解</td><td>雷风恒</td><td>地风升</td><td>水风井</td><td>泽风大过</td><td>泽雷随</td></tr><tr><td>巽为风</td><td>风天小畜</td><td>风火家人</td><td>风雷益</td><td>天雷无妄</td><td>火雷筮盍</td><td>山雷颐</td><td>山风蛊</td></tr><tr><td>离为火</td><td>火山旅</td><td>火风鼎</td><td>火水未济</td><td>山水蒙</td><td>风水涣</td><td>天水讼</td><td>天火同人</td></tr><tr><td>坤为地</td><td>地雷复</td><td>地泽临</td><td>地天泰</td><td>雷天大壮</td><td>泽天夬</td><td>水天需</td><td>水地比</td></tr><tr><td>兑为泽</td><td>泽水困</td><td>泽地萃</td><td>泽山咸</td><td>水山蹇</td><td>地山谦</td><td>雷山小过</td><td>雷泽归妹</td></tr></tbody></table><h2 id="六十四卦方圆图">六十四卦方圆图</h2><p><img src="/2021/zhou-yi-bi-ji/%E6%96%B9%E5%9C%86%E5%9B%BE.png" alt="方圆图"></p><h3 id="方图数字图">方图数字图</h3><table><thead><tr><th style="text-align:center">坤8</th><th style="text-align:center">艮7</th><th style="text-align:center">坎6</th><th style="text-align:center">巽5</th><th style="text-align:center">震4</th><th style="text-align:center">离3</th><th style="text-align:center">泽2</th><th style="text-align:center">乾1</th></tr></thead><tbody><tr><td style="text-align:center">8<br>8</td><td style="text-align:center">7<br>8</td><td style="text-align:center">6<br>8</td><td style="text-align:center">5<br>8</td><td style="text-align:center">4<br>8</td><td style="text-align:center">3<br>8</td><td style="text-align:center">2<br>8</td><td style="text-align:center">1<br>8</td></tr><tr><td style="text-align:center">8<br>7</td><td style="text-align:center">7<br>7</td><td style="text-align:center">6<br>7</td><td style="text-align:center">5<br>7</td><td style="text-align:center">4<br>7</td><td style="text-align:center">3<br>7</td><td style="text-align:center">2<br>7</td><td style="text-align:center">1<br>7</td></tr><tr><td style="text-align:center">8<br>6</td><td style="text-align:center">7<br>6</td><td style="text-align:center">6<br>6</td><td style="text-align:center">5<br>6</td><td style="text-align:center">4<br>6</td><td style="text-align:center">3<br>6</td><td style="text-align:center">2<br>6</td><td style="text-align:center">1<br>6</td></tr><tr><td style="text-align:center">8<br>5</td><td style="text-align:center">7<br>5</td><td style="text-align:center">6<br>5</td><td style="text-align:center">5<br>5</td><td style="text-align:center">4<br>5</td><td style="text-align:center">3<br>5</td><td style="text-align:center">2<br>5</td><td style="text-align:center">1<br>5</td></tr><tr><td style="text-align:center">8<br>4</td><td style="text-align:center">7<br>4</td><td style="text-align:center">6<br>4</td><td style="text-align:center">5<br>4</td><td style="text-align:center">4<br>4</td><td style="text-align:center">3<br>4</td><td style="text-align:center">2<br>4</td><td style="text-align:center">1<br>4</td></tr><tr><td style="text-align:center">8<br>3</td><td style="text-align:center">7<br>3</td><td style="text-align:center">6<br>3</td><td style="text-align:center">5<br>3</td><td style="text-align:center">4<br>3</td><td style="text-align:center">3<br>3</td><td style="text-align:center">2<br>3</td><td style="text-align:center">1<br>3</td></tr><tr><td style="text-align:center">8<br>2</td><td style="text-align:center">7<br>2</td><td style="text-align:center">6<br>2</td><td style="text-align:center">5<br>2</td><td style="text-align:center">4<br>2</td><td style="text-align:center">3<br>2</td><td style="text-align:center">2<br>2</td><td style="text-align:center">1<br>2</td></tr><tr><td style="text-align:center">8<br>1</td><td style="text-align:center">7<br>1</td><td style="text-align:center">6<br>1</td><td style="text-align:center">5<br>1</td><td style="text-align:center">4<br>1</td><td style="text-align:center">3<br>1</td><td style="text-align:center">2<br>1</td><td style="text-align:center">1<br>1</td></tr></tbody></table><p>对照方圆图中的方图，规律：</p><ol><li>每行的外卦（六十四卦分上下卦，下卦称为内卦，上卦称为外卦），从右到左以先天八卦次序依次排列。</li><li>每列的内卦，从下到上一先天八卦次序一次排列。</li></ol><h3 id="圆图">圆图</h3><ol><li>首先用方图最下面的第一横列的乾、夬、大有、大壮、小畜、需、泰等八个卦，依次序放到圆圈的顶端，从左边开始，顺原次序向左排列。又将第二横列的履、兑、睽、归妹、中孚、节、损、临等八个卦的履卦紧接在泰卦后面，依原次序排列下去，然后将第三、四横列的每个卦，都照这个方法排列，最后复卦紧靠了中线下端的左边为止。排列成了左边的半个圆圈。</li><li>排列右半个圆圈，排列的次序不同了，不从第五横列开始，而从第八横列。将否、萃、晋、豫、观、比、剥、坤等八个卦，以逆次序接在复卦后面，即排成复、坤、剥、比、观、豫、晋、萃、否的次序。然后再用第七横列，找第八横列的排法排下去，第六、第四横列均如此。</li><li>注意，如果是画卦，还是要内卦在内圈，外卦在外圈。</li></ol><h1>五行</h1><h2 id="五行相生相克">五行相生相克</h2><p>相生：木生火，火生土，土生金，金生水，水生木。</p><p>相克：木克土，土克水，水克火，火克金，金克木。</p><p><img src="/2021/zhou-yi-bi-ji/%E4%BA%94%E8%A1%8C%E7%9B%B8%E7%94%9F%E7%9B%B8%E5%85%8B%E5%9B%BE.png" alt="五行相生相克图"></p><h2 id="五行方位">五行方位</h2><p>东方木，西方金，北方水，南方火，中央土。</p><p><img src="/2021/zhou-yi-bi-ji/%E4%BA%94%E8%A1%8C%E6%96%B9%E4%BD%8D%E5%9B%BE.png" alt="五行方位图"></p><h1>干支</h1><h2 id="天干">天干</h2><p>甲、乙、丙、丁、戊、己、庚、辛、壬、癸。</p><h3 id="天干五行配">天干五行配</h3><p>严格来说，五行和八卦两种体系是分开的。但几千年来，大家都把它混合在一起了。</p><blockquote><p>东方甲乙木、南方丙丁火、西方庚辛金、北方壬癸水、中央戊己土。</p></blockquote><table><thead><tr><th style="text-align:center">方位</th><th style="text-align:center">天干</th><th style="text-align:center">五行</th></tr></thead><tbody><tr><td style="text-align:center">东</td><td style="text-align:center">甲乙</td><td style="text-align:center">木</td></tr><tr><td style="text-align:center">南</td><td style="text-align:center">丙丁</td><td style="text-align:center">火</td></tr><tr><td style="text-align:center">西</td><td style="text-align:center">庚辛</td><td style="text-align:center">金</td></tr><tr><td style="text-align:center">北</td><td style="text-align:center">壬癸</td><td style="text-align:center">水</td></tr><tr><td style="text-align:center">中</td><td style="text-align:center">戊己</td><td style="text-align:center">土</td></tr></tbody></table><h3 id="天干的阴阳">天干的阴阳</h3><table><thead><tr><th>天干</th><th>阴阳</th><th>五行</th></tr></thead><tbody><tr><td>甲</td><td>阳</td><td>阳木</td></tr><tr><td>乙</td><td>阴</td><td>阴木</td></tr><tr><td>丙</td><td>阳</td><td>阳火</td></tr><tr><td>丁</td><td>阴</td><td>阴火</td></tr><tr><td>戊</td><td>阳</td><td>阳土</td></tr><tr><td>己</td><td>阴</td><td>阴土</td></tr><tr><td>庚</td><td>阳</td><td>阳金</td></tr><tr><td>辛</td><td>阴</td><td>阴金</td></tr><tr><td>壬</td><td>阳</td><td>阳水</td></tr><tr><td>癸</td><td>阴</td><td>阴水</td></tr></tbody></table><p><img src="/2021/zhou-yi-bi-ji/%E5%A4%A9%E5%B9%B2%E9%98%B4%E9%98%B3%E4%BA%94%E8%A1%8C%E5%9B%BE.png" alt="天干阴阳五行图"></p><h2 id="地支">地支</h2><p>子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥。</p><h3 id="黄道十二次">黄道十二次</h3><p>地支有十二位，代表十二个月。实际上地支是什么？是天文上黄道十二次的代名。</p><h3 id="六十花甲">六十花甲</h3><p>六十花甲是根据干支来的，如甲子、乙丑、丙寅……这样天干与地支配起来，便可以代表太阳系统这个天体和地球产生万有的变化；其中以气象的变化是最大的，也最显著，容易见到。万有的变化，各有不同，于是用干支配合，而且是天干的阳配地支的阳，天干的阴配地支的阴，阳配阳，阴配阴，依照次序轮流配合，完全相互配合，刚好满六十个相配，成一周期，又从甲子开始。</p><h3 id="纳甲">纳甲</h3><p>把五行、八卦、天干、地支，归纳到一起名为纳甲。</p><h1>修订记录</h1><ul><li><p>2021-01-10</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Culture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 插件介绍</title>
      <link href="2021/vim-cha-jian-jie-shao/"/>
      <url>2021/vim-cha-jian-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>介绍一些 vim 实用的插件，本文所介绍插件均以 vim-plug 安装。</p><h1>vim-plug 插件管理</h1><p><a href="https://github.com/junegunn/vim-plug">vim-plug</a> 是一个 vim 插件管理器，利用异步并行可以快速地安装、更新和卸载插件。</p><h2 id="安装">安装</h2><ol><li><p>下载<a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">plug.vim</a>文件，根据不同操作系统，放置在相应的 autoload 目录中。</p><ul><li><p><strong>Linux</strong></p><p>用户配置： <em>~/.vim/autoload</em></p><p>全局配置： <em>安装位置/autolaod</em></p></li><li><p><strong>Windows</strong></p><p>用户配置： <em>~\vimfiles\autoload</em></p><p>全局配置： <em>安装位置\autoload</em></p></li></ul></li><li><p>结构目录如下，之后安装的插件将存放在 plugged 目录中。</p></li></ol><pre class="line-numbers language-none"><code class="language-none">~&#x2F;.vim+----- autoload|      +-- plug.vim+----- plugged       +-- drawit       +-- ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>： plugged 目录是由 vimrc 中 <code>call plug#begin()</code> 中定义，可修改。</p><ol start="3"><li>在 vimrc 文件中的配置。</li></ol><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)&quot; Shorthand notation for pluginPlug &#39;vim-scripts&#x2F;DrawIt&#39;call plug#end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插件管理">插件管理</h2><p>以 vim 画图插件 DrawIt 为例。</p><p><strong>安装插件</strong></p><p>vim 可以在 GitHub 上面找到几乎所有的插件。</p><p>vim 官网的所有插件都在 <em><a href="https://github.com/vim-scripts/">https://github.com/vim-scripts/</a></em> 中。</p><p><a href="https://vimawesome.com/">vim Awesome</a> 几乎网罗了网络上所有的插件，并提供各种管理工具的下载方式。</p><p>若安装新插件，只需在 <code>call plug#begin()</code> 和 <code>call plug#end()</code> 之间添加插件github 缩写地址 <code>Plug 'vim-scripts/DrawIt'</code>，然后执行命令:</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugInstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可安装所有添加插件。</p><p>若要安装指定的插件，可执行:</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugInstall DrawIt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更新插件</strong></p><p>批量更新所有已安装插件：</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 vim-plug 插件自身：</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugUpgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>插件卸载</strong></p><p>若要卸载插件，需要在 vimrc 中注释掉或删除相应的插件，然后执行：</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugClean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>插件状态</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">:PlugStatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>fzf 模糊搜索</h1><p>fzf 全称 Fuzzy finder，由 golang 编写的，用于模糊搜索的工具。结合其他工具可以完成非常多得工作，如 ag、fasd、ripgrep。</p><p>类似工具有 CtrlP、LeaderF。</p><h2 id="安装-2">安装</h2><p>有很多方式可以安装 <a href="https://github.com/junegunn/fzf">fzf</a>，由于 fzf 是独立于 vim可以运行在各个平台的工具，所以可以独立于 vim 安装。</p><p><strong>使用 git 安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用 vim-plug 安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;junegunn&#x2F;fzf&#39;, &#123; &#39;do&#39;: &#123; -&gt; fzf#install() &#125; &#125;Plug &#39;junegunn&#x2F;fzf.vim&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们使用 vim-plug 安装，同时安装插件 fzf.vim。使用 vim-plug 安装方式，我们就可以通过 <code>:PlugUpdate fzf</code> 指令更新。</p><h2 id="配置">配置</h2><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 在当前目录搜索文件nnoremap &lt;silent&gt; &lt;Leader&gt;f :Files&lt;CR&gt;&quot;切换Buffer中的文件nnoremap &lt;silent&gt; &lt;Leader&gt;b :Buffers&lt;CR&gt;&quot;在当前所有加载的Buffer中搜索包含目标词的所有行，:BLines只在当前Buffer中搜索nnoremap &lt;silent&gt; &lt;Leader&gt;p :Lines&lt;CR&gt;&quot;在Vim打开的历史文件中搜索，相当于是在MRU中搜索，:History：命令历史查找nnoremap &lt;silent&gt; &lt;Leader&gt;h :History&lt;CR&gt;&quot; 调用 Rg 进行搜索，包含隐藏文件。需要安装 ripgrep 工具，&quot; https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrepcommand! -bang -nargs&#x3D;* Rg  \ call fzf#vim#grep(  \   &#39;rg --column --line-number --no-heading --color&#x3D;always --smart-case --hidden &#39;.shellescape(&lt;q-args&gt;), 1,  \   &lt;bang&gt;0 ? fzf#vim#with_preview(&#39;up:60%&#39;)  \           : fzf#vim#with_preview(&#39;right:50%:hidden&#39;, &#39;?&#39;),  \   &lt;bang&gt;0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>主题美化</h1><h2 id="spaceline-状态栏">spaceline 状态栏</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;glepnir&#x2F;spaceline.vim&#39;Plug &#39;ryanoasis&#x2F;vim-devicons&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置</strong></p><p>配置说明可参考 <a href="https://github.com/glepnir/spaceline.vim">spaceline</a>。</p><p>使用 vim-devicons 需要先 <a href="https://www.nerdfonts.com/">安装字体</a> 并设置 guifont。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">set guifont&#x3D;DaddyTimeMono_Nerd_Font_Mono:h11:cANSI:qDRAFTlet g:spaceline_colorscheme &#x3D; &#39;space&#39;let g:spaceline_seperate_style &#x3D; &#39;curve&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="airline">airline</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;vim-airline&#x2F;vim-airline&#39;Plug &#39;vim-airline&#x2F;vim-airline-themes&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置</strong></p><p>配置说明参考 <a href="https://github.com/vim-airline/vim-airline">airline</a>。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; vim-airlinelet g:airline_powerline_fonts &#x3D; 1let g:airline#extensions#tabline#enabled &#x3D; 1let g:airline#extensions#tabline#buffer_nr_show &#x3D; 1&quot; vim-airline-themes 使用 solarized 主题let g:airline_theme&#x3D;&quot;solarized&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vim-colorschemes-配色">vim-colorschemes 配色</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;flazz&#x2F;vim-colorschemes&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">set background&#x3D;lightcolorscheme solarized<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1>Markdown</h1><h2 id="vim-markdown">vim-markdown</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;godlygeek&#x2F;tabular&#39;Plug &#39;plasticboy&#x2F;vim-markdown&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置</strong></p><p>配置说明可参考 <a href="https://github.com/plasticboy/vim-markdown">vim-markdown</a>。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 支持 LaTeX 数学语法let g:vim_markdown_math &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="vim-markdown-toc-目录">vim-markdown-toc 目录</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;mzlogin&#x2F;vim-markdown-toc&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置</strong></p><p>配置说明可参考 <a href="https://github.com/mzlogin/vim-markdown-toc">vim-markdown-toc</a>。</p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 存储时取消自动更新let g:vmt_auto_update_on_save &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="markdown-preview-预览">markdown-preview 预览</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">&quot; 需要安装 nodejs 和 yarnPlug &#39;iamcco&#x2F;markdown-preview.nvim&#39;, &#123; &#39;do&#39;: &#39;cd app &amp;&amp; yarn install&#39;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置</strong></p><p>同类型的还有 vim-instant-markdown，体验较差。本插件配置说明可参考<a href="https://github.com/iamcco/markdown-preview.nvim">markdown-preview</a>。</p><h2 id="pangu-排版">pangu 排版</h2><p><strong>安装</strong></p><pre class="line-numbers language-vimscript" data-language="vimscript"><code class="language-vimscript">Plug &#39;hotoo&#x2F;pangu.vim&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置</strong></p><p>配置说明可参考 <a href="https://github.com/hotoo/pangu.vim">pangu</a>。</p><p>有一些问题：</p><ul><li>引用图片时，地址不能包含中文。引用时的方括号一定要在同一行。</li></ul><h1>修订记录</h1><ul><li><p>2021-01-08</p><p>创建，增加 vim-plug、fzf。</p></li><li><p>2021-01-09</p><p>增加 spceline， vim-markdown，vim-markdown-toc，markdown-preview，pangu，vim-airline，vim-airline-theme，vim-colorschemes。</p></li><li><p>2021-01-10</p><p>从其它网站迁移。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> vim 插件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
